
HeliosTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d30  08007d30  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d38  08007d38  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d38  08007d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038a0  20000078  08007db8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003918  08007db8  00023918  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001994d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aed  00000000  00000000  000399ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009163  00000000  00000000  00040c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f491  00000000  00000000  00049dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4fcd  00000000  00000000  0006928c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b34  00000000  00000000  0010e2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08007a08 	.word	0x08007a08

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08007a08 	.word	0x08007a08

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b976 	b.w	8000484 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	4688      	mov	r8, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14d      	bne.n	800025c <__udivmoddi4+0xac>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d968      	bls.n	8000298 <__udivmoddi4+0xe8>
 80001c6:	fab2 f282 	clz	r2, r2
 80001ca:	b152      	cbz	r2, 80001e2 <__udivmoddi4+0x32>
 80001cc:	fa01 f302 	lsl.w	r3, r1, r2
 80001d0:	f1c2 0120 	rsb	r1, r2, #32
 80001d4:	fa20 f101 	lsr.w	r1, r0, r1
 80001d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001dc:	ea41 0803 	orr.w	r8, r1, r3
 80001e0:	4094      	lsls	r4, r2
 80001e2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ea:	fa1f fe8c 	uxth.w	lr, ip
 80001ee:	fb01 8817 	mls	r8, r1, r7, r8
 80001f2:	fb07 f00e 	mul.w	r0, r7, lr
 80001f6:	0c23      	lsrs	r3, r4, #16
 80001f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001fc:	4298      	cmp	r0, r3
 80001fe:	d90a      	bls.n	8000216 <__udivmoddi4+0x66>
 8000200:	eb1c 0303 	adds.w	r3, ip, r3
 8000204:	f107 35ff 	add.w	r5, r7, #4294967295
 8000208:	f080 811e 	bcs.w	8000448 <__udivmoddi4+0x298>
 800020c:	4298      	cmp	r0, r3
 800020e:	f240 811b 	bls.w	8000448 <__udivmoddi4+0x298>
 8000212:	3f02      	subs	r7, #2
 8000214:	4463      	add	r3, ip
 8000216:	1a1b      	subs	r3, r3, r0
 8000218:	fbb3 f0f1 	udiv	r0, r3, r1
 800021c:	fb01 3310 	mls	r3, r1, r0, r3
 8000220:	fb00 fe0e 	mul.w	lr, r0, lr
 8000224:	b2a4      	uxth	r4, r4
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	45a6      	cmp	lr, r4
 800022c:	d90a      	bls.n	8000244 <__udivmoddi4+0x94>
 800022e:	eb1c 0404 	adds.w	r4, ip, r4
 8000232:	f100 33ff 	add.w	r3, r0, #4294967295
 8000236:	f080 8109 	bcs.w	800044c <__udivmoddi4+0x29c>
 800023a:	45a6      	cmp	lr, r4
 800023c:	f240 8106 	bls.w	800044c <__udivmoddi4+0x29c>
 8000240:	4464      	add	r4, ip
 8000242:	3802      	subs	r0, #2
 8000244:	2100      	movs	r1, #0
 8000246:	eba4 040e 	sub.w	r4, r4, lr
 800024a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024e:	b11e      	cbz	r6, 8000258 <__udivmoddi4+0xa8>
 8000250:	2300      	movs	r3, #0
 8000252:	40d4      	lsrs	r4, r2
 8000254:	e9c6 4300 	strd	r4, r3, [r6]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	428b      	cmp	r3, r1
 800025e:	d908      	bls.n	8000272 <__udivmoddi4+0xc2>
 8000260:	2e00      	cmp	r6, #0
 8000262:	f000 80ee 	beq.w	8000442 <__udivmoddi4+0x292>
 8000266:	2100      	movs	r1, #0
 8000268:	e9c6 0500 	strd	r0, r5, [r6]
 800026c:	4608      	mov	r0, r1
 800026e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000272:	fab3 f183 	clz	r1, r3
 8000276:	2900      	cmp	r1, #0
 8000278:	d14a      	bne.n	8000310 <__udivmoddi4+0x160>
 800027a:	42ab      	cmp	r3, r5
 800027c:	d302      	bcc.n	8000284 <__udivmoddi4+0xd4>
 800027e:	4282      	cmp	r2, r0
 8000280:	f200 80fc 	bhi.w	800047c <__udivmoddi4+0x2cc>
 8000284:	1a84      	subs	r4, r0, r2
 8000286:	eb65 0303 	sbc.w	r3, r5, r3
 800028a:	2001      	movs	r0, #1
 800028c:	4698      	mov	r8, r3
 800028e:	2e00      	cmp	r6, #0
 8000290:	d0e2      	beq.n	8000258 <__udivmoddi4+0xa8>
 8000292:	e9c6 4800 	strd	r4, r8, [r6]
 8000296:	e7df      	b.n	8000258 <__udivmoddi4+0xa8>
 8000298:	b902      	cbnz	r2, 800029c <__udivmoddi4+0xec>
 800029a:	deff      	udf	#255	; 0xff
 800029c:	fab2 f282 	clz	r2, r2
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	f040 8091 	bne.w	80003c8 <__udivmoddi4+0x218>
 80002a6:	eba1 000c 	sub.w	r0, r1, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b0:	fa1f fe8c 	uxth.w	lr, ip
 80002b4:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b8:	fb07 0013 	mls	r0, r7, r3, r0
 80002bc:	0c25      	lsrs	r5, r4, #16
 80002be:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002c2:	fb0e f003 	mul.w	r0, lr, r3
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x12c>
 80002ca:	eb1c 0505 	adds.w	r5, ip, r5
 80002ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x12a>
 80002d4:	42a8      	cmp	r0, r5
 80002d6:	f200 80ce 	bhi.w	8000476 <__udivmoddi4+0x2c6>
 80002da:	4643      	mov	r3, r8
 80002dc:	1a2d      	subs	r5, r5, r0
 80002de:	fbb5 f0f7 	udiv	r0, r5, r7
 80002e2:	fb07 5510 	mls	r5, r7, r0, r5
 80002e6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ea:	b2a4      	uxth	r4, r4
 80002ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x156>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x154>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80b6 	bhi.w	8000470 <__udivmoddi4+0x2c0>
 8000304:	4628      	mov	r0, r5
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030e:	e79e      	b.n	800024e <__udivmoddi4+0x9e>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fbba f8f9 	udiv	r8, sl, r9
 800032a:	fa20 f307 	lsr.w	r3, r0, r7
 800032e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000332:	408d      	lsls	r5, r1
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	431d      	orrs	r5, r3
 800033a:	fa00 f301 	lsl.w	r3, r0, r1
 800033e:	fb08 f00e 	mul.w	r0, r8, lr
 8000342:	0c2c      	lsrs	r4, r5, #16
 8000344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000348:	42a0      	cmp	r0, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b8>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8088 	bcs.w	800046c <__udivmoddi4+0x2bc>
 800035c:	42a0      	cmp	r0, r4
 800035e:	f240 8085 	bls.w	800046c <__udivmoddi4+0x2bc>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1a24      	subs	r4, r4, r0
 800036a:	fbb4 f0f9 	udiv	r0, r4, r9
 800036e:	fb09 4410 	mls	r4, r9, r0, r4
 8000372:	fb00 fe0e 	mul.w	lr, r0, lr
 8000376:	b2ad      	uxth	r5, r5
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1e2>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 35ff 	add.w	r5, r0, #4294967295
 8000388:	d26c      	bcs.n	8000464 <__udivmoddi4+0x2b4>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d96a      	bls.n	8000464 <__udivmoddi4+0x2b4>
 800038e:	3802      	subs	r0, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000396:	fba0 9502 	umull	r9, r5, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	42ac      	cmp	r4, r5
 80003a0:	46c8      	mov	r8, r9
 80003a2:	46ae      	mov	lr, r5
 80003a4:	d356      	bcc.n	8000454 <__udivmoddi4+0x2a4>
 80003a6:	d053      	beq.n	8000450 <__udivmoddi4+0x2a0>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d069      	beq.n	8000480 <__udivmoddi4+0x2d0>
 80003ac:	ebb3 0208 	subs.w	r2, r3, r8
 80003b0:	eb64 040e 	sbc.w	r4, r4, lr
 80003b4:	fa22 f301 	lsr.w	r3, r2, r1
 80003b8:	fa04 f707 	lsl.w	r7, r4, r7
 80003bc:	431f      	orrs	r7, r3
 80003be:	40cc      	lsrs	r4, r1
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	2100      	movs	r1, #0
 80003c6:	e747      	b.n	8000258 <__udivmoddi4+0xa8>
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	f1c2 0120 	rsb	r1, r2, #32
 80003d0:	fa25 f301 	lsr.w	r3, r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa20 f101 	lsr.w	r1, r0, r1
 80003dc:	4095      	lsls	r5, r2
 80003de:	430d      	orrs	r5, r1
 80003e0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e4:	fb07 3311 	mls	r3, r7, r1, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	0c28      	lsrs	r0, r5, #16
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	fb01 f30e 	mul.w	r3, r1, lr
 80003f6:	4283      	cmp	r3, r0
 80003f8:	fa04 f402 	lsl.w	r4, r4, r2
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x260>
 80003fe:	eb1c 0000 	adds.w	r0, ip, r0
 8000402:	f101 38ff 	add.w	r8, r1, #4294967295
 8000406:	d22f      	bcs.n	8000468 <__udivmoddi4+0x2b8>
 8000408:	4283      	cmp	r3, r0
 800040a:	d92d      	bls.n	8000468 <__udivmoddi4+0x2b8>
 800040c:	3902      	subs	r1, #2
 800040e:	4460      	add	r0, ip
 8000410:	1ac0      	subs	r0, r0, r3
 8000412:	fbb0 f3f7 	udiv	r3, r0, r7
 8000416:	fb07 0013 	mls	r0, r7, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000420:	fb03 f00e 	mul.w	r0, r3, lr
 8000424:	42a8      	cmp	r0, r5
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x28a>
 8000428:	eb1c 0505 	adds.w	r5, ip, r5
 800042c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000430:	d216      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000432:	42a8      	cmp	r0, r5
 8000434:	d914      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000436:	3b02      	subs	r3, #2
 8000438:	4465      	add	r5, ip
 800043a:	1a28      	subs	r0, r5, r0
 800043c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000440:	e738      	b.n	80002b4 <__udivmoddi4+0x104>
 8000442:	4631      	mov	r1, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e707      	b.n	8000258 <__udivmoddi4+0xa8>
 8000448:	462f      	mov	r7, r5
 800044a:	e6e4      	b.n	8000216 <__udivmoddi4+0x66>
 800044c:	4618      	mov	r0, r3
 800044e:	e6f9      	b.n	8000244 <__udivmoddi4+0x94>
 8000450:	454b      	cmp	r3, r9
 8000452:	d2a9      	bcs.n	80003a8 <__udivmoddi4+0x1f8>
 8000454:	ebb9 0802 	subs.w	r8, r9, r2
 8000458:	eb65 0e0c 	sbc.w	lr, r5, ip
 800045c:	3801      	subs	r0, #1
 800045e:	e7a3      	b.n	80003a8 <__udivmoddi4+0x1f8>
 8000460:	4643      	mov	r3, r8
 8000462:	e7ea      	b.n	800043a <__udivmoddi4+0x28a>
 8000464:	4628      	mov	r0, r5
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e2>
 8000468:	4641      	mov	r1, r8
 800046a:	e7d1      	b.n	8000410 <__udivmoddi4+0x260>
 800046c:	46d0      	mov	r8, sl
 800046e:	e77b      	b.n	8000368 <__udivmoddi4+0x1b8>
 8000470:	4464      	add	r4, ip
 8000472:	3802      	subs	r0, #2
 8000474:	e747      	b.n	8000306 <__udivmoddi4+0x156>
 8000476:	3b02      	subs	r3, #2
 8000478:	4465      	add	r5, ip
 800047a:	e72f      	b.n	80002dc <__udivmoddi4+0x12c>
 800047c:	4608      	mov	r0, r1
 800047e:	e706      	b.n	800028e <__udivmoddi4+0xde>
 8000480:	4631      	mov	r1, r6
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0xa8>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000490:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000494:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	2b00      	cmp	r3, #0
 800049e:	d013      	beq.n	80004c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00b      	beq.n	80004c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004b0:	e000      	b.n	80004b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f9      	beq.n	80004b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004c8:	687b      	ldr	r3, [r7, #4]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
	int i=0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++) {
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	e009      	b.n	80004fe <_write+0x2a>
		ITM_SendChar((*ptr++));
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	60ba      	str	r2, [r7, #8]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ffc8 	bl	8000488 <ITM_SendChar>
	for (i=0; i<len; i++) {
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbf1      	blt.n	80004ea <_write+0x16>
	}
	return len;
 8000506:	687b      	ldr	r3, [r7, #4]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fa47 	bl	80009a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f818 	bl	800054c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  vTraceEnable(TRC_START);
 800051c:	2001      	movs	r0, #1
 800051e:	f005 feeb 	bl	80062f8 <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f85f 	bl	80005e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000526:	f001 fd2f 	bl	8001f88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <main+0x30>)
 800052c:	2100      	movs	r1, #0
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x34>)
 8000530:	f001 fd90 	bl	8002054 <osThreadNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a04      	ldr	r2, [pc, #16]	; (8000548 <main+0x38>)
 8000538:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053a:	f001 fd57 	bl	8001fec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	e7fe      	b.n	800053e <main+0x2e>
 8000540:	08007c50 	.word	0x08007c50
 8000544:	08000695 	.word	0x08000695
 8000548:	20000094 	.word	0x20000094

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b092      	sub	sp, #72	; 0x48
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 fab8 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <SystemClock_Config+0x94>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <SystemClock_Config+0x94>)
 8000578:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800057c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057e:	2301      	movs	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fcd7 	bl	8000f54 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005ac:	f000 f89d 	bl	80006ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2101      	movs	r1, #1
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fff3 	bl	80015b4 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d4:	f000 f889 	bl	80006ea <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3748      	adds	r7, #72	; 0x48
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <MX_GPIO_Init+0xa8>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <MX_GPIO_Init+0xa8>)
 8000600:	f043 0320 	orr.w	r3, r3, #32
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_GPIO_Init+0xa8>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0320 	and.w	r3, r3, #32
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_GPIO_Init+0xa8>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <MX_GPIO_Init+0xa8>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_GPIO_Init+0xa8>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_GPIO_Init+0xa8>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_GPIO_Init+0xa8>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_GPIO_Init+0xa8>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_GPIO_Init+0xa8>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a11      	ldr	r2, [pc, #68]	; (800068c <MX_GPIO_Init+0xa8>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_GPIO_Init+0xa8>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <MX_GPIO_Init+0xac>)
 8000662:	f000 fc45 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 8000666:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0xac>)
 8000680:	f000 faa6 	bl	8000bd0 <HAL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40020800 	.word	0x40020800

08000694 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 800069c:	20c8      	movs	r0, #200	; 0xc8
 800069e:	f001 fd83 	bl	80021a8 <osDelay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80006a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <StartDefaultTask+0x30>)
 80006a8:	f000 fc3a 	bl	8000f20 <HAL_GPIO_TogglePin>
    count++;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <StartDefaultTask+0x34>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <StartDefaultTask+0x34>)
 80006b6:	701a      	strb	r2, [r3, #0]
    printf(count);
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <StartDefaultTask+0x34>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f006 fa0f 	bl	8006ae0 <iprintf>
    osDelay(200);
 80006c2:	e7eb      	b.n	800069c <StartDefaultTask+0x8>
 80006c4:	40020800 	.word	0x40020800
 80006c8:	20000098 	.word	0x20000098

080006cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006dc:	d101      	bne.n	80006e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006de:	f000 f97b 	bl	80009d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ee:	b672      	cpsid	i
}
 80006f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_MspInit+0x64>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <HAL_MspInit+0x64>)
 8000700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000704:	6253      	str	r3, [r2, #36]	; 0x24
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_MspInit+0x64>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_MspInit+0x64>)
 8000714:	6a1b      	ldr	r3, [r3, #32]
 8000716:	4a10      	ldr	r2, [pc, #64]	; (8000758 <HAL_MspInit+0x64>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6213      	str	r3, [r2, #32]
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_MspInit+0x64>)
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_MspInit+0x64>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_MspInit+0x64>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6253      	str	r3, [r2, #36]	; 0x24
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_MspInit+0x64>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	210f      	movs	r1, #15
 8000746:	f06f 0001 	mvn.w	r0, #1
 800074a:	f000 fa16 	bl	8000b7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	201c      	movs	r0, #28
 8000772:	f000 fa02 	bl	8000b7a <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000776:	201c      	movs	r0, #28
 8000778:	f000 fa1b 	bl	8000bb2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <HAL_InitTick+0xa0>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <HAL_InitTick+0xa0>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6253      	str	r3, [r2, #36]	; 0x24
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_InitTick+0xa0>)
 800078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000794:	f107 0210 	add.w	r2, r7, #16
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f958 	bl	8001a54 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007a4:	f001 f942 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80007a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_InitTick+0xa4>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	3b01      	subs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0xa8>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_InitTick+0xa8>)
 80007c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_InitTick+0xa8>)
 80007ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007cc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_InitTick+0xa8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_InitTick+0xa8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80007da:	480a      	ldr	r0, [pc, #40]	; (8000804 <HAL_InitTick+0xa8>)
 80007dc:	f001 f9ca 	bl	8001b74 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d104      	bne.n	80007f0 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <HAL_InitTick+0xa8>)
 80007e8:	f001 fa0c 	bl	8001c04 <HAL_TIM_Base_Start_IT>
 80007ec:	4603      	mov	r3, r0
 80007ee:	e000      	b.n	80007f2 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	431bde83 	.word	0x431bde83
 8000804:	2000009c 	.word	0x2000009c

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
	...

08000834 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <TIM2_IRQHandler+0x10>)
 800083a:	f001 fa35 	bl	8001ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000009c 	.word	0x2000009c

08000848 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e00a      	b.n	8000870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800085a:	f3af 8000 	nop.w
 800085e:	4601      	mov	r1, r0
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	dbf0      	blt.n	800085a <_read+0x12>
	}

return len;
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	return -1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a8:	605a      	str	r2, [r3, #4]
	return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
	return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
	...

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f006 f8a4 	bl	8006a60 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20014000 	.word	0x20014000
 8000944:	00000400 	.word	0x00000400
 8000948:	200000dc 	.word	0x200000dc
 800094c:	20003918 	.word	0x20003918

08000950 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	; (80009a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000982:	f7ff ffe5 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f006 f871 	bl	8006a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fdc1 	bl	8000510 <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000998:	08007d40 	.word	0x08007d40
  ldr r2, =_sbss
 800099c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009a0:	20003918 	.word	0x20003918

080009a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_IRQHandler>

080009a6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f8d7 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b6:	200f      	movs	r0, #15
 80009b8:	f7ff fed0 	bl	800075c <HAL_InitTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	e001      	b.n	80009cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c8:	f7ff fe94 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x1c>)
 80009e8:	6013      	str	r3, [r2, #0]
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	200000e0 	.word	0x200000e0
 80009f8:	20000008 	.word	0x20000008

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	200000e0 	.word	0x200000e0

08000a10 <__NVIC_SetPriorityGrouping>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <__NVIC_EnableIRQ+0x34>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff4f 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff64 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ffb2 	bl	8000b00 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff81 	bl	8000aac <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff57 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000be6:	e160      	b.n	8000eaa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8152 	beq.w	8000ea4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d005      	beq.n	8000c18 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d130      	bne.n	8000c7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c4e:	2201      	movs	r2, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	f003 0201 	and.w	r2, r3, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d017      	beq.n	8000cb6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d123      	bne.n	8000d0a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	220f      	movs	r2, #15
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	691a      	ldr	r2, [r3, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	6939      	ldr	r1, [r7, #16]
 8000d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0203 	and.w	r2, r3, #3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80ac 	beq.w	8000ea4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	4a5d      	ldr	r2, [pc, #372]	; (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6213      	str	r3, [r2, #32]
 8000d58:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <HAL_GPIO_Init+0x2f8>)
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d64:	4a59      	ldr	r2, [pc, #356]	; (8000ecc <HAL_GPIO_Init+0x2fc>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <HAL_GPIO_Init+0x300>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d025      	beq.n	8000ddc <HAL_GPIO_Init+0x20c>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d01f      	beq.n	8000dd8 <HAL_GPIO_Init+0x208>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <HAL_GPIO_Init+0x308>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d019      	beq.n	8000dd4 <HAL_GPIO_Init+0x204>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_GPIO_Init+0x30c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d013      	beq.n	8000dd0 <HAL_GPIO_Init+0x200>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <HAL_GPIO_Init+0x310>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_Init+0x1fc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a4c      	ldr	r2, [pc, #304]	; (8000ee4 <HAL_GPIO_Init+0x314>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_Init+0x1f8>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a4b      	ldr	r2, [pc, #300]	; (8000ee8 <HAL_GPIO_Init+0x318>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_Init+0x1f4>
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	e00c      	b.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	e00a      	b.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dc8:	2305      	movs	r3, #5
 8000dca:	e008      	b.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dcc:	2304      	movs	r3, #4
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x20e>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x20e>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dee:	4937      	ldr	r1, [pc, #220]	; (8000ecc <HAL_GPIO_Init+0x2fc>)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <HAL_GPIO_Init+0x31c>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f47f ae97 	bne.w	8000be8 <HAL_GPIO_Init+0x18>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40021400 	.word	0x40021400
 8000ee8:	40021800 	.word	0x40021800
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43d9      	mvns	r1, r3
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	400b      	ands	r3, r1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e31d      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f66:	4b94      	ldr	r3, [pc, #592]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f70:	4b91      	ldr	r3, [pc, #580]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d07b      	beq.n	800107e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d006      	beq.n	8000f9a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d10f      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d10b      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	4b87      	ldr	r3, [pc, #540]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d06a      	beq.n	800107c <HAL_RCC_OscConfig+0x128>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d166      	bne.n	800107c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e2f7      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x74>
 8000fba:	4b7f      	ldr	r3, [pc, #508]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7e      	ldr	r2, [pc, #504]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e02d      	b.n	8001024 <HAL_RCC_OscConfig+0xd0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_OscConfig+0x96>
 8000fd0:	4b79      	ldr	r3, [pc, #484]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a78      	ldr	r2, [pc, #480]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e01c      	b.n	8001024 <HAL_RCC_OscConfig+0xd0>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0xb8>
 8000ff2:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a70      	ldr	r2, [pc, #448]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b6e      	ldr	r3, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6d      	ldr	r2, [pc, #436]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xd0>
 800100c:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a69      	ldr	r2, [pc, #420]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a66      	ldr	r2, [pc, #408]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fce6 	bl	80009fc <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fce2 	bl	80009fc <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e2ad      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xe0>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fcd2 	bl	80009fc <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fcce 	bl	80009fc <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e299      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x108>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d05a      	beq.n	8001140 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b04      	cmp	r3, #4
 800108e:	d005      	beq.n	800109c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d119      	bne.n	80010ca <HAL_RCC_OscConfig+0x176>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d116      	bne.n	80010ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x160>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d001      	beq.n	80010b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e276      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	493d      	ldr	r1, [pc, #244]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c8:	e03a      	b.n	8001140 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d020      	beq.n	8001114 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_RCC_OscConfig+0x268>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc90 	bl	80009fc <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc8c 	bl	80009fc <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e257      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	492a      	ldr	r1, [pc, #168]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
 8001112:	e015      	b.n	8001140 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_RCC_OscConfig+0x268>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fc6f 	bl	80009fc <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff fc6b 	bl	80009fc <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e236      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80b8 	beq.w	80012be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d170      	bne.n	8001236 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_OscConfig+0x218>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e21a      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001178:	429a      	cmp	r2, r3
 800117a:	d921      	bls.n	80011c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fc97 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e208      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4906      	ldr	r1, [pc, #24]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	061b      	lsls	r3, r3, #24
 80011b0:	4901      	ldr	r1, [pc, #4]	; (80011b8 <HAL_RCC_OscConfig+0x264>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
 80011b6:	e020      	b.n	80011fa <HAL_RCC_OscConfig+0x2a6>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c0:	4b99      	ldr	r3, [pc, #612]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4996      	ldr	r1, [pc, #600]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b95      	ldr	r3, [pc, #596]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	061b      	lsls	r3, r3, #24
 80011e0:	4991      	ldr	r1, [pc, #580]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fc62 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1d3      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	0b5b      	lsrs	r3, r3, #13
 8001200:	3301      	adds	r3, #1
 8001202:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800120a:	4a87      	ldr	r2, [pc, #540]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 800120c:	6892      	ldr	r2, [r2, #8]
 800120e:	0912      	lsrs	r2, r2, #4
 8001210:	f002 020f 	and.w	r2, r2, #15
 8001214:	4985      	ldr	r1, [pc, #532]	; (800142c <HAL_RCC_OscConfig+0x4d8>)
 8001216:	5c8a      	ldrb	r2, [r1, r2]
 8001218:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800121a:	4a85      	ldr	r2, [pc, #532]	; (8001430 <HAL_RCC_OscConfig+0x4dc>)
 800121c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800121e:	4b85      	ldr	r3, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x4e0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fa9a 	bl	800075c <HAL_InitTick>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d045      	beq.n	80012be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	e1b5      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d029      	beq.n	8001292 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800123e:	4b7e      	ldr	r3, [pc, #504]	; (8001438 <HAL_RCC_OscConfig+0x4e4>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fbda 	bl	80009fc <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800124c:	f7ff fbd6 	bl	80009fc <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1a1      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800125e:	4b72      	ldr	r3, [pc, #456]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	4b6f      	ldr	r3, [pc, #444]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	496c      	ldr	r1, [pc, #432]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127c:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	4967      	ldr	r1, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001292:	4b69      	ldr	r3, [pc, #420]	; (8001438 <HAL_RCC_OscConfig+0x4e4>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fbb0 	bl	80009fc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a0:	f7ff fbac 	bl	80009fc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e177      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d030      	beq.n	800132c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d016      	beq.n	8001300 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d2:	4b5a      	ldr	r3, [pc, #360]	; (800143c <HAL_RCC_OscConfig+0x4e8>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fb90 	bl	80009fc <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fb8c 	bl	80009fc <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e157      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f2:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x38c>
 80012fe:	e015      	b.n	800132c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001300:	4b4e      	ldr	r3, [pc, #312]	; (800143c <HAL_RCC_OscConfig+0x4e8>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb79 	bl	80009fc <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fb75 	bl	80009fc <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e140      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80b5 	beq.w	80014a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	4a36      	ldr	r2, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6253      	str	r3, [r2, #36]	; 0x24
 8001356:	4b34      	ldr	r3, [pc, #208]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <HAL_RCC_OscConfig+0x4ec>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_RCC_OscConfig+0x4ec>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <HAL_RCC_OscConfig+0x4ec>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7ff fb3d 	bl	80009fc <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff fb39 	bl	80009fc <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e104      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b29      	ldr	r3, [pc, #164]	; (8001440 <HAL_RCC_OscConfig+0x4ec>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x466>
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6353      	str	r3, [r2, #52]	; 0x34
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_OscConfig+0x4c2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x488>
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013cc:	6353      	str	r3, [r2, #52]	; 0x34
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013d8:	6353      	str	r3, [r2, #52]	; 0x34
 80013da:	e01c      	b.n	8001416 <HAL_RCC_OscConfig+0x4c2>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x4aa>
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6353      	str	r3, [r2, #52]	; 0x34
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6353      	str	r3, [r2, #52]	; 0x34
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x4c2>
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001408:	6353      	str	r3, [r2, #52]	; 0x34
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <HAL_RCC_OscConfig+0x4d4>)
 8001410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001414:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d024      	beq.n	8001468 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff faed 	bl	80009fc <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001424:	e019      	b.n	800145a <HAL_RCC_OscConfig+0x506>
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	08007c80 	.word	0x08007c80
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004
 8001438:	42470020 	.word	0x42470020
 800143c:	42470680 	.word	0x42470680
 8001440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001444:	f7ff fada 	bl	80009fc <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0a3      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0ee      	beq.n	8001444 <HAL_RCC_OscConfig+0x4f0>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fac8 	bl	80009fc <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800146e:	e00a      	b.n	8001486 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff fac4 	bl	80009fc <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e08d      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ee      	bne.n	8001470 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001498:	4b44      	ldr	r3, [pc, #272]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	4a43      	ldr	r2, [pc, #268]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 800149e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d079      	beq.n	80015a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d056      	beq.n	8001560 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d13b      	bne.n	8001532 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_OscConfig+0x65c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fa9c 	bl	80009fc <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fa98 	bl	80009fc <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e063      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014da:	4b34      	ldr	r3, [pc, #208]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	4319      	orrs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	430b      	orrs	r3, r1
 80014fe:	492b      	ldr	r1, [pc, #172]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001500:	4313      	orrs	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x65c>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fa77 	bl	80009fc <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fa73 	bl	80009fc <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e03e      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x5be>
 8001530:	e036      	b.n	80015a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_RCC_OscConfig+0x65c>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fa60 	bl	80009fc <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fa5c 	bl	80009fc <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e027      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x5ec>
 800155e:	e01f      	b.n	80015a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e01a      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_RCC_OscConfig+0x658>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	429a      	cmp	r2, r3
 800157e:	d10d      	bne.n	800159c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	42470060 	.word	0x42470060

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e11a      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d919      	bls.n	800160a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x34>
 80015dc:	4b8a      	ldr	r3, [pc, #552]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a89      	ldr	r2, [pc, #548]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b87      	ldr	r3, [pc, #540]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 0201 	bic.w	r2, r3, #1
 80015f0:	4985      	ldr	r1, [pc, #532]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0f9      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d008      	beq.n	8001628 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	497a      	ldr	r1, [pc, #488]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 808e 	beq.w	8001752 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d121      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0d7      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001656:	4b6d      	ldr	r3, [pc, #436]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d115      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0cb      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800166e:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0bf      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0b7      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	495c      	ldr	r1, [pc, #368]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff f9ac 	bl	80009fc <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d112      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff f9a4 	bl	80009fc <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e09b      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d1ee      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xfc>
 80016d2:	e03e      	b.n	8001752 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d112      	bne.n	8001702 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7ff f98d 	bl	80009fc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e084      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f4:	4b45      	ldr	r3, [pc, #276]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_ClockConfig+0x12a>
 8001700:	e027      	b.n	8001752 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d11d      	bne.n	8001746 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff f976 	bl	80009fc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e06d      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d1ee      	bne.n	800170c <HAL_RCC_ClockConfig+0x158>
 800172e:	e010      	b.n	8001752 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff f964 	bl	80009fc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e05b      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001746:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d219      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <HAL_RCC_ClockConfig+0x1be>
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 0201 	bic.w	r2, r3, #1
 800177a:	4923      	ldr	r1, [pc, #140]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_RCC_ClockConfig+0x254>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e034      	b.n	80017fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4917      	ldr	r1, [pc, #92]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	490f      	ldr	r1, [pc, #60]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d2:	f000 f823 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_ClockConfig+0x258>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	490b      	ldr	r1, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x25c>)
 80017e4:	5ccb      	ldrb	r3, [r1, r3]
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x260>)
 80017ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x264>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe ffb2 	bl	800075c <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80017fc:	7afb      	ldrb	r3, [r7, #11]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	08007c80 	.word	0x08007c80
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001820:	b092      	sub	sp, #72	; 0x48
 8001822:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001824:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800182a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d00d      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x34>
 8001834:	2b0c      	cmp	r3, #12
 8001836:	f200 80d5 	bhi.w	80019e4 <HAL_RCC_GetSysClockFreq+0x1c8>
 800183a:	2b04      	cmp	r3, #4
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x28>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x2e>
 8001842:	e0cf      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4b72      	ldr	r3, [pc, #456]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001848:	e0da      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184a:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800184c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800184e:	e0d7      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	f003 020f 	and.w	r2, r3, #15
 8001858:	4b6e      	ldr	r3, [pc, #440]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800185a:	5c9b      	ldrb	r3, [r3, r2]
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800185e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001860:	0d9b      	lsrs	r3, r3, #22
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	3301      	adds	r3, #1
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186a:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d05d      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001878:	2200      	movs	r2, #0
 800187a:	4618      	mov	r0, r3
 800187c:	4611      	mov	r1, r2
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	4622      	mov	r2, r4
 8001884:	462b      	mov	r3, r5
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0159      	lsls	r1, r3, #5
 8001890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001894:	0150      	lsls	r0, r2, #5
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4621      	mov	r1, r4
 800189c:	1a51      	subs	r1, r2, r1
 800189e:	6139      	str	r1, [r7, #16]
 80018a0:	4629      	mov	r1, r5
 80018a2:	eb63 0301 	sbc.w	r3, r3, r1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b4:	4659      	mov	r1, fp
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	4651      	mov	r1, sl
 80018ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018be:	4651      	mov	r1, sl
 80018c0:	018a      	lsls	r2, r1, #6
 80018c2:	46d4      	mov	ip, sl
 80018c4:	ebb2 080c 	subs.w	r8, r2, ip
 80018c8:	4659      	mov	r1, fp
 80018ca:	eb63 0901 	sbc.w	r9, r3, r1
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e2:	4690      	mov	r8, r2
 80018e4:	4699      	mov	r9, r3
 80018e6:	4623      	mov	r3, r4
 80018e8:	eb18 0303 	adds.w	r3, r8, r3
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	462b      	mov	r3, r5
 80018f0:	eb49 0303 	adc.w	r3, r9, r3
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001902:	4629      	mov	r1, r5
 8001904:	028b      	lsls	r3, r1, #10
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	4604      	mov	r4, r0
 800190c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001910:	4601      	mov	r1, r0
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	2200      	movs	r2, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
 800191e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001924:	f7fe fc2c 	bl	8000180 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
 8001930:	e055      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001934:	2200      	movs	r2, #0
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	627a      	str	r2, [r7, #36]	; 0x24
 800193a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800193e:	4642      	mov	r2, r8
 8001940:	464b      	mov	r3, r9
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	0159      	lsls	r1, r3, #5
 800194c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001950:	0150      	lsls	r0, r2, #5
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	46c4      	mov	ip, r8
 8001958:	ebb2 0a0c 	subs.w	sl, r2, ip
 800195c:	4640      	mov	r0, r8
 800195e:	4649      	mov	r1, r9
 8001960:	468c      	mov	ip, r1
 8001962:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001972:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001976:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800197a:	ebb2 040a 	subs.w	r4, r2, sl
 800197e:	eb63 050b 	sbc.w	r5, r3, fp
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	00eb      	lsls	r3, r5, #3
 800198c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001990:	00e2      	lsls	r2, r4, #3
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	4603      	mov	r3, r0
 8001998:	18e3      	adds	r3, r4, r3
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	460b      	mov	r3, r1
 800199e:	eb45 0303 	adc.w	r3, r5, r3
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b0:	4629      	mov	r1, r5
 80019b2:	028b      	lsls	r3, r1, #10
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	4604      	mov	r4, r0
 80019ba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80019be:	4601      	mov	r1, r0
 80019c0:	028a      	lsls	r2, r1, #10
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	2200      	movs	r2, #0
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	61fa      	str	r2, [r7, #28]
 80019ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d2:	f7fe fbd5 	bl	8000180 <__aeabi_uldivmod>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4613      	mov	r3, r2
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80019de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80019e2:	e00d      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0b5b      	lsrs	r3, r3, #13
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	3301      	adds	r3, #1
 80019f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80019fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3748      	adds	r7, #72	; 0x48
 8001a06:	46bd      	mov	sp, r7
 8001a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	08007c74 	.word	0x08007c74

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08007c90 	.word	0x08007c90

08001a54 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	220f      	movs	r2, #15
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_RCC_GetClockConfig+0x58>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0201 	and.w	r2, r3, #1
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d12c      	bne.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e016      	b.n	8001b12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6253      	str	r3, [r2, #36]	; 0x24
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b04:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b18:	d105      	bne.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b20:	d101      	bne.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 0201 	bic.w	r2, r3, #1
 8001b40:	490b      	ldr	r1, [pc, #44]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e031      	b.n	8001bea <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f829 	bl	8001bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f000 f978 	bl	8001ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e03a      	b.n	8001c92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3c:	d00e      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x58>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_TIM_Base_Start_IT+0x98>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x58>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x58>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d010      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7e:	e007      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0202 	mvn.w	r2, #2
 8001cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8c1 	bl	8001e72 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8b4 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f8c3 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0204 	mvn.w	r2, #4
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f897 	bl	8001e72 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f88a 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f899 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0208 	mvn.w	r2, #8
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2204      	movs	r2, #4
 8001d82:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f86d 	bl	8001e72 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f860 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f86f 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0210 	mvn.w	r2, #16
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f843 	bl	8001e72 <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f836 	bl	8001e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f845 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10e      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0201 	mvn.w	r2, #1
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fc50 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d107      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f81f 	bl	8001e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d00f      	beq.n	8001ee0 <TIM_Base_SetConfig+0x38>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <TIM_Base_SetConfig+0xc8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00b      	beq.n	8001ee0 <TIM_Base_SetConfig+0x38>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <TIM_Base_SetConfig+0xcc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <TIM_Base_SetConfig+0x38>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <TIM_Base_SetConfig+0xd0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0x38>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <TIM_Base_SetConfig+0xd4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d108      	bne.n	8001ef2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d017      	beq.n	8001f2a <TIM_Base_SetConfig+0x82>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <TIM_Base_SetConfig+0xc8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <TIM_Base_SetConfig+0x82>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <TIM_Base_SetConfig+0xcc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00f      	beq.n	8001f2a <TIM_Base_SetConfig+0x82>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <TIM_Base_SetConfig+0xd0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0x82>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <TIM_Base_SetConfig+0xd4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0x82>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <TIM_Base_SetConfig+0xd8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0x82>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <TIM_Base_SetConfig+0xdc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40011000 	.word	0x40011000

08001f88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f8e:	f3ef 8305 	mrs	r3, IPSR
 8001f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10f      	bne.n	8001fba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <osKernelInitialize+0x32>
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <osKernelInitialize+0x60>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d109      	bne.n	8001fc2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fae:	f3ef 8311 	mrs	r3, BASEPRI
 8001fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001fba:	f06f 0305 	mvn.w	r3, #5
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e00c      	b.n	8001fdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <osKernelInitialize+0x60>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <osKernelInitialize+0x60>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e002      	b.n	8001fdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	200000e4 	.word	0x200000e4

08001fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ff2:	f3ef 8305 	mrs	r3, IPSR
 8001ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10f      	bne.n	800201e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8002002:	607b      	str	r3, [r7, #4]
  return(result);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <osKernelStart+0x32>
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <osKernelStart+0x64>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d109      	bne.n	8002026 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002012:	f3ef 8311 	mrs	r3, BASEPRI
 8002016:	603b      	str	r3, [r7, #0]
  return(result);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <osKernelStart+0x3a>
    stat = osErrorISR;
 800201e:	f06f 0305 	mvn.w	r3, #5
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e00e      	b.n	8002044 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <osKernelStart+0x64>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <osKernelStart+0x64>)
 8002030:	2202      	movs	r2, #2
 8002032:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002034:	f001 f878 	bl	8003128 <vTaskStartScheduler>
      stat = osOK;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e002      	b.n	8002044 <osKernelStart+0x58>
    } else {
      stat = osError;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200000e4 	.word	0x200000e4

08002054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b092      	sub	sp, #72	; 0x48
 8002058:	af04      	add	r7, sp, #16
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002064:	f3ef 8305 	mrs	r3, IPSR
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 8094 	bne.w	800219a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002072:	f3ef 8310 	mrs	r3, PRIMASK
 8002076:	623b      	str	r3, [r7, #32]
  return(result);
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 808d 	bne.w	800219a <osThreadNew+0x146>
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <osThreadNew+0x150>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d106      	bne.n	8002096 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002088:	f3ef 8311 	mrs	r3, BASEPRI
 800208c:	61fb      	str	r3, [r7, #28]
  return(result);
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 8082 	bne.w	800219a <osThreadNew+0x146>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d07e      	beq.n	800219a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80020a0:	2318      	movs	r3, #24
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80020a4:	2300      	movs	r3, #0
 80020a6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80020a8:	f107 031b 	add.w	r3, r7, #27
 80020ac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d045      	beq.n	8002146 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <osThreadNew+0x74>
        name = attr->name;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <osThreadNew+0x9a>
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	2b38      	cmp	r3, #56	; 0x38
 80020e0:	d805      	bhi.n	80020ee <osThreadNew+0x9a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <osThreadNew+0x9e>
        return (NULL);
 80020ee:	2300      	movs	r3, #0
 80020f0:	e054      	b.n	800219c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00e      	beq.n	8002128 <osThreadNew+0xd4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b5b      	cmp	r3, #91	; 0x5b
 8002110:	d90a      	bls.n	8002128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <osThreadNew+0xd4>
        mem = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
 8002126:	e010      	b.n	800214a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10c      	bne.n	800214a <osThreadNew+0xf6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <osThreadNew+0xf6>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <osThreadNew+0xf6>
          mem = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
 8002144:	e001      	b.n	800214a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	2b01      	cmp	r3, #1
 800214e:	d110      	bne.n	8002172 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002158:	9202      	str	r2, [sp, #8]
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fe12 	bl	8002d90 <xTaskCreateStatic>
 800216c:	4603      	mov	r3, r0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e013      	b.n	800219a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	2b00      	cmp	r3, #0
 8002176:	d110      	bne.n	800219a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	b29a      	uxth	r2, r3
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fe5c 	bl	8002e48 <xTaskCreate>
 8002190:	4603      	mov	r3, r0
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <osThreadNew+0x146>
          hTask = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800219a:	697b      	ldr	r3, [r7, #20]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3738      	adds	r7, #56	; 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200000e4 	.word	0x200000e4

080021a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021b0:	f3ef 8305 	mrs	r3, IPSR
 80021b4:	613b      	str	r3, [r7, #16]
  return(result);
 80021b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10f      	bne.n	80021dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021bc:	f3ef 8310 	mrs	r3, PRIMASK
 80021c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <osDelay+0x34>
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <osDelay+0x58>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d109      	bne.n	80021e4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021d0:	f3ef 8311 	mrs	r3, BASEPRI
 80021d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <osDelay+0x3c>
    stat = osErrorISR;
 80021dc:	f06f 0305 	mvn.w	r3, #5
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e007      	b.n	80021f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 ff66 	bl	80030c0 <vTaskDelay>
    }
  }

  return (stat);
 80021f4:	697b      	ldr	r3, [r7, #20]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200000e4 	.word	0x200000e4

08002204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a06      	ldr	r2, [pc, #24]	; (800222c <vApplicationGetIdleTaskMemory+0x28>)
 8002214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <vApplicationGetIdleTaskMemory+0x2c>)
 800221a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	200000e8 	.word	0x200000e8
 8002230:	20000144 	.word	0x20000144

08002234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <vApplicationGetTimerTaskMemory+0x2c>)
 8002244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <vApplicationGetTimerTaskMemory+0x30>)
 800224a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002252:	601a      	str	r2, [r3, #0]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000344 	.word	0x20000344
 8002264:	200003a0 	.word	0x200003a0

08002268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f103 0208 	add.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f103 0208 	add.w	r2, r3, #8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0208 	add.w	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d103      	bne.n	8002324 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e00c      	b.n	800233e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3308      	adds	r3, #8
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e002      	b.n	8002332 <vListInsert+0x2e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	d2f6      	bcs.n	800232c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	601a      	str	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6892      	ldr	r2, [r2, #8]
 800238a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6852      	ldr	r2, [r2, #4]
 8002394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d103      	bne.n	80023a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
	...

080023c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023f2:	f002 f803 	bl	80043fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	441a      	add	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	3b01      	subs	r3, #1
 8002424:	68f9      	ldr	r1, [r7, #12]
 8002426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	441a      	add	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	22ff      	movs	r2, #255	; 0xff
 8002436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d114      	bne.n	8002472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01a      	beq.n	8002486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3310      	adds	r3, #16
 8002454:	4618      	mov	r0, r3
 8002456:	f001 f8f1 	bl	800363c <xTaskRemoveFromEventList>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d012      	beq.n	8002486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <xQueueGenericReset+0xcc>)
 8002462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	e009      	b.n	8002486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3310      	adds	r3, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fef6 	bl	8002268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3324      	adds	r3, #36	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fef1 	bl	8002268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002486:	f001 ffe9 	bl	800445c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	e000ed04 	.word	0xe000ed04

08002498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024be:	bf00      	nop
 80024c0:	e7fe      	b.n	80024c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024da:	bf00      	nop
 80024dc:	e7fe      	b.n	80024dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <xQueueGenericCreateStatic+0x52>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <xQueueGenericCreateStatic+0x56>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <xQueueGenericCreateStatic+0x58>
 80024ee:	2300      	movs	r3, #0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	623b      	str	r3, [r7, #32]
}
 8002506:	bf00      	nop
 8002508:	e7fe      	b.n	8002508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <xQueueGenericCreateStatic+0x7e>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <xQueueGenericCreateStatic+0x82>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <xQueueGenericCreateStatic+0x84>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	61fb      	str	r3, [r7, #28]
}
 8002532:	bf00      	nop
 8002534:	e7fe      	b.n	8002534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002536:	2350      	movs	r3, #80	; 0x50
 8002538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b50      	cmp	r3, #80	; 0x50
 800253e:	d00a      	beq.n	8002556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	61bb      	str	r3, [r7, #24]
}
 8002552:	bf00      	nop
 8002554:	e7fe      	b.n	8002554 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002568:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f805 	bl	8002586 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800257e:	4618      	mov	r0, r3
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e002      	b.n	80025a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025b4:	2101      	movs	r1, #1
 80025b6:	69b8      	ldr	r0, [r7, #24]
 80025b8:	f7ff ff06 	bl	80023c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	; 0x38
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025da:	2300      	movs	r3, #0
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <xQueueGenericSend+0x32>
	__asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <xQueueGenericSend+0x40>
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <xQueueGenericSend+0x44>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <xQueueGenericSend+0x46>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <xQueueGenericSend+0x60>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002628:	bf00      	nop
 800262a:	e7fe      	b.n	800262a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d103      	bne.n	800263a <xQueueGenericSend+0x6e>
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <xQueueGenericSend+0x72>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericSend+0x74>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <xQueueGenericSend+0x8e>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	623b      	str	r3, [r7, #32]
}
 8002656:	bf00      	nop
 8002658:	e7fe      	b.n	8002658 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800265a:	f001 f9e9 	bl	8003a30 <xTaskGetSchedulerState>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <xQueueGenericSend+0x9e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <xQueueGenericSend+0xa2>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <xQueueGenericSend+0xa4>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xQueueGenericSend+0xbe>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	61fb      	str	r3, [r7, #28]
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800268a:	f001 feb7 	bl	80043fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <xQueueGenericSend+0xd4>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d129      	bne.n	80026f4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a6:	f000 fa07 	bl	8002ab8 <prvCopyDataToQueue>
 80026aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d010      	beq.n	80026d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	3324      	adds	r3, #36	; 0x24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 ffbf 	bl	800363c <xTaskRemoveFromEventList>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <xQueueGenericSend+0x1f8>)
 80026c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	e00a      	b.n	80026ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <xQueueGenericSend+0x1f8>)
 80026de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026ec:	f001 feb6 	bl	800445c <vPortExitCritical>
				return pdPASS;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e063      	b.n	80027bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026fa:	f001 feaf 	bl	800445c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	e05c      	b.n	80027bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fff9 	bl	8003704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002712:	2301      	movs	r3, #1
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002716:	f001 fea1 	bl	800445c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800271a:	f000 fd6b 	bl	80031f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800271e:	f001 fe6d 	bl	80043fc <vPortEnterCritical>
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002728:	b25b      	sxtb	r3, r3
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d103      	bne.n	8002738 <xQueueGenericSend+0x16c>
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273e:	b25b      	sxtb	r3, r3
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d103      	bne.n	800274e <xQueueGenericSend+0x182>
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274e:	f001 fe85 	bl	800445c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002752:	1d3a      	adds	r2, r7, #4
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f000 ffe8 	bl	8003730 <xTaskCheckForTimeOut>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d124      	bne.n	80027b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002768:	f000 fa9e 	bl	8002ca8 <prvIsQueueFull>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d018      	beq.n	80027a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	3310      	adds	r3, #16
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 ff0e 	bl	800359c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002782:	f000 fa29 	bl	8002bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002786:	f000 fd43 	bl	8003210 <xTaskResumeAll>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f47f af7c 	bne.w	800268a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <xQueueGenericSend+0x1f8>)
 8002794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	e772      	b.n	800268a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027a6:	f000 fa17 	bl	8002bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027aa:	f000 fd31 	bl	8003210 <xTaskResumeAll>
 80027ae:	e76c      	b.n	800268a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b2:	f000 fa11 	bl	8002bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027b6:	f000 fd2b 	bl	8003210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027ba:	2300      	movs	r3, #0
		}
	}
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3738      	adds	r7, #56	; 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027f2:	bf00      	nop
 80027f4:	e7fe      	b.n	80027f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d103      	bne.n	8002804 <xQueueGenericSendFromISR+0x3c>
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <xQueueGenericSendFromISR+0x40>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <xQueueGenericSendFromISR+0x42>
 8002808:	2300      	movs	r3, #0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	623b      	str	r3, [r7, #32]
}
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d103      	bne.n	8002832 <xQueueGenericSendFromISR+0x6a>
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <xQueueGenericSendFromISR+0x6e>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <xQueueGenericSendFromISR+0x70>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	61fb      	str	r3, [r7, #28]
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002852:	f001 fe95 	bl	8004580 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002856:	f3ef 8211 	mrs	r2, BASEPRI
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	61ba      	str	r2, [r7, #24]
 800286c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800286e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	429a      	cmp	r2, r3
 800287c:	d302      	bcc.n	8002884 <xQueueGenericSendFromISR+0xbc>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d12c      	bne.n	80028de <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002894:	f000 f910 	bl	8002ab8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002898:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d112      	bne.n	80028c8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	3324      	adds	r3, #36	; 0x24
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fec4 	bl	800363c <xTaskRemoveFromEventList>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00e      	beq.n	80028d8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e007      	b.n	80028d8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028cc:	3301      	adds	r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	b25a      	sxtb	r2, r3
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028d8:	2301      	movs	r3, #1
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80028dc:	e001      	b.n	80028e2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
 80028e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3738      	adds	r7, #56	; 0x38
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <xQueueReceive+0x30>
	__asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	623b      	str	r3, [r7, #32]
}
 8002924:	bf00      	nop
 8002926:	e7fe      	b.n	8002926 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <xQueueReceive+0x3e>
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <xQueueReceive+0x42>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <xQueueReceive+0x44>
 800293a:	2300      	movs	r3, #0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueReceive+0x5e>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	61fb      	str	r3, [r7, #28]
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002956:	f001 f86b 	bl	8003a30 <xTaskGetSchedulerState>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <xQueueReceive+0x6e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <xQueueReceive+0x72>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <xQueueReceive+0x74>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <xQueueReceive+0x8e>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	61bb      	str	r3, [r7, #24]
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002986:	f001 fd39 	bl	80043fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01f      	beq.n	80029d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800299a:	f000 f8f7 	bl	8002b8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00f      	beq.n	80029ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	3310      	adds	r3, #16
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fe42 	bl	800363c <xTaskRemoveFromEventList>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <xQueueReceive+0x1bc>)
 80029c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029ce:	f001 fd45 	bl	800445c <vPortExitCritical>
				return pdPASS;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e069      	b.n	8002aaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029dc:	f001 fd3e 	bl	800445c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e062      	b.n	8002aaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fe88 	bl	8003704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029f8:	f001 fd30 	bl	800445c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029fc:	f000 fbfa 	bl	80031f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a00:	f001 fcfc 	bl	80043fc <vPortEnterCritical>
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d103      	bne.n	8002a1a <xQueueReceive+0x122>
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d103      	bne.n	8002a30 <xQueueReceive+0x138>
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a30:	f001 fd14 	bl	800445c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a34:	1d3a      	adds	r2, r7, #4
 8002a36:	f107 0310 	add.w	r3, r7, #16
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fe77 	bl	8003730 <xTaskCheckForTimeOut>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d123      	bne.n	8002a90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f917 	bl	8002c7c <prvIsQueueEmpty>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d017      	beq.n	8002a84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	3324      	adds	r3, #36	; 0x24
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd9d 	bl	800359c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a64:	f000 f8b8 	bl	8002bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a68:	f000 fbd2 	bl	8003210 <xTaskResumeAll>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d189      	bne.n	8002986 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <xQueueReceive+0x1bc>)
 8002a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	e780      	b.n	8002986 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a86:	f000 f8a7 	bl	8002bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a8a:	f000 fbc1 	bl	8003210 <xTaskResumeAll>
 8002a8e:	e77a      	b.n	8002986 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a92:	f000 f8a1 	bl	8002bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a96:	f000 fbbb 	bl	8003210 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9c:	f000 f8ee 	bl	8002c7c <prvIsQueueEmpty>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f43f af6f 	beq.w	8002986 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002aa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3730      	adds	r7, #48	; 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000ed04 	.word	0xe000ed04

08002ab8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d14d      	bne.n	8002b7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 ffc2 	bl	8003a6c <xTaskPriorityDisinherit>
 8002ae8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	e043      	b.n	8002b7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d119      	bne.n	8002b2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6898      	ldr	r0, [r3, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	461a      	mov	r2, r3
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	f003 ffd6 	bl	8006ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	441a      	add	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d32b      	bcc.n	8002b7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	e026      	b.n	8002b7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68d8      	ldr	r0, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	461a      	mov	r2, r3
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	f003 ffbc 	bl	8006ab4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	425b      	negs	r3, r3
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	425b      	negs	r3, r3
 8002b62:	441a      	add	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d105      	bne.n	8002b7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	441a      	add	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d303      	bcc.n	8002bc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68d9      	ldr	r1, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6838      	ldr	r0, [r7, #0]
 8002bcc:	f003 ff72 	bl	8006ab4 <memcpy>
	}
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002be0:	f001 fc0c 	bl	80043fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bec:	e011      	b.n	8002c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3324      	adds	r3, #36	; 0x24
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd1e 	bl	800363c <xTaskRemoveFromEventList>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c06:	f000 fdf5 	bl	80037f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	dce9      	bgt.n	8002bee <prvUnlockQueue+0x16>
 8002c1a:	e000      	b.n	8002c1e <prvUnlockQueue+0x46>
					break;
 8002c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	22ff      	movs	r2, #255	; 0xff
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c26:	f001 fc19 	bl	800445c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c2a:	f001 fbe7 	bl	80043fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c36:	e011      	b.n	8002c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3310      	adds	r3, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fcf9 	bl	800363c <xTaskRemoveFromEventList>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c50:	f000 fdd0 	bl	80037f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	dce9      	bgt.n	8002c38 <prvUnlockQueue+0x60>
 8002c64:	e000      	b.n	8002c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c70:	f001 fbf4 	bl	800445c <vPortExitCritical>
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c84:	f001 fbba 	bl	80043fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e001      	b.n	8002c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c9a:	f001 fbdf 	bl	800445c <vPortExitCritical>

	return xReturn;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cb0:	f001 fba4 	bl	80043fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d102      	bne.n	8002cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e001      	b.n	8002cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cca:	f001 fbc7 	bl	800445c <vPortExitCritical>

	return xReturn;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e014      	b.n	8002d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <vQueueAddToRegistry+0x4c>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cf4:	490b      	ldr	r1, [pc, #44]	; (8002d24 <vQueueAddToRegistry+0x4c>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <vQueueAddToRegistry+0x4c>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d0a:	e006      	b.n	8002d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d9e7      	bls.n	8002ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	200007a0 	.word	0x200007a0

08002d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d38:	f001 fb60 	bl	80043fc <vPortEnterCritical>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d103      	bne.n	8002d52 <vQueueWaitForMessageRestricted+0x2a>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d58:	b25b      	sxtb	r3, r3
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d103      	bne.n	8002d68 <vQueueWaitForMessageRestricted+0x40>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d68:	f001 fb78 	bl	800445c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3324      	adds	r3, #36	; 0x24
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fc31 	bl	80035e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff28 	bl	8002bd8 <prvUnlockQueue>
	}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af04      	add	r7, sp, #16
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xTaskCreateStatic+0x2a>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	623b      	str	r3, [r7, #32]
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61fb      	str	r3, [r7, #28]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dd6:	235c      	movs	r3, #92	; 0x5c
 8002dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8002dde:	d00a      	beq.n	8002df6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61bb      	str	r3, [r7, #24]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01e      	beq.n	8002e3a <xTaskCreateStatic+0xaa>
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01b      	beq.n	8002e3a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e14:	2300      	movs	r3, #0
 8002e16:	9303      	str	r3, [sp, #12]
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	9302      	str	r3, [sp, #8]
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f850 	bl	8002ed2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e34:	f000 f8d4 	bl	8002fe0 <prvAddNewTaskToReadyList>
 8002e38:	e001      	b.n	8002e3e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e3e:	697b      	ldr	r3, [r7, #20]
	}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 fbcd 	bl	80045fc <pvPortMalloc>
 8002e62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00e      	beq.n	8002e88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e6a:	205c      	movs	r0, #92	; 0x5c
 8002e6c:	f001 fbc6 	bl	80045fc <pvPortMalloc>
 8002e70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7e:	e005      	b.n	8002e8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e80:	6978      	ldr	r0, [r7, #20]
 8002e82:	f001 fc7f 	bl	8004784 <vPortFree>
 8002e86:	e001      	b.n	8002e8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9303      	str	r3, [sp, #12]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f80e 	bl	8002ed2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eb6:	69f8      	ldr	r0, [r7, #28]
 8002eb8:	f000 f892 	bl	8002fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e002      	b.n	8002ec8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	461a      	mov	r2, r3
 8002eea:	21a5      	movs	r1, #165	; 0xa5
 8002eec:	f003 fdf0 	bl	8006ad0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002efa:	3b01      	subs	r3, #1
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f023 0307 	bic.w	r3, r3, #7
 8002f08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	617b      	str	r3, [r7, #20]
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e012      	b.n	8002f56 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	7819      	ldrb	r1, [r3, #0]
 8002f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3334      	adds	r3, #52	; 0x34
 8002f40:	460a      	mov	r2, r1
 8002f42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d006      	beq.n	8002f5e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3301      	adds	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d9e9      	bls.n	8002f30 <prvInitialiseNewTask+0x5e>
 8002f5c:	e000      	b.n	8002f60 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002f5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	2b37      	cmp	r3, #55	; 0x37
 8002f6c:	d901      	bls.n	8002f72 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f6e:	2337      	movs	r3, #55	; 0x37
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2200      	movs	r2, #0
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	3304      	adds	r3, #4
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f98c 	bl	80022a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	3318      	adds	r3, #24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f987 	bl	80022a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	69b8      	ldr	r0, [r7, #24]
 8002fc2:	f001 f927 	bl	8004214 <pxPortInitialiseStack>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fd8:	bf00      	nop
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fe8:	f001 fa08 	bl	80043fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <prvAddNewTaskToReadyList+0xc4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <prvAddNewTaskToReadyList+0xc4>)
 8002ff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003004:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <prvAddNewTaskToReadyList+0xc4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d110      	bne.n	800302e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800300c:	f000 fc16 	bl	800383c <prvInitialiseTaskLists>
 8003010:	e00d      	b.n	800302e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <prvAddNewTaskToReadyList+0xcc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	429a      	cmp	r2, r3
 8003026:	d802      	bhi.n	800302e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <prvAddNewTaskToReadyList+0xd0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <prvAddNewTaskToReadyList+0xd0>)
 8003036:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <prvAddNewTaskToReadyList+0xd0>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <prvAddNewTaskToReadyList+0xd4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d903      	bls.n	8003054 <prvAddNewTaskToReadyList+0x74>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <prvAddNewTaskToReadyList+0xd4>)
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <prvAddNewTaskToReadyList+0xd8>)
 8003062:	441a      	add	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7ff f927 	bl	80022be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003070:	f001 f9f4 	bl	800445c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <prvAddNewTaskToReadyList+0xcc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00e      	beq.n	800309a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	429a      	cmp	r2, r3
 8003088:	d207      	bcs.n	800309a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <prvAddNewTaskToReadyList+0xdc>)
 800308c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000cb4 	.word	0x20000cb4
 80030a8:	200007e0 	.word	0x200007e0
 80030ac:	20000cc0 	.word	0x20000cc0
 80030b0:	20000cd0 	.word	0x20000cd0
 80030b4:	20000cbc 	.word	0x20000cbc
 80030b8:	200007e4 	.word	0x200007e4
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <vTaskDelay+0x60>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <vTaskDelay+0x30>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	60bb      	str	r3, [r7, #8]
}
 80030ec:	bf00      	nop
 80030ee:	e7fe      	b.n	80030ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030f0:	f000 f880 	bl	80031f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030f4:	2100      	movs	r1, #0
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fd26 	bl	8003b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030fc:	f000 f888 	bl	8003210 <xTaskResumeAll>
 8003100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <vTaskDelay+0x64>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000cdc 	.word	0x20000cdc
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003136:	463a      	mov	r2, r7
 8003138:	1d39      	adds	r1, r7, #4
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff f860 	bl	8002204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003144:	6839      	ldr	r1, [r7, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2300      	movs	r3, #0
 8003154:	460a      	mov	r2, r1
 8003156:	4921      	ldr	r1, [pc, #132]	; (80031dc <vTaskStartScheduler+0xb4>)
 8003158:	4821      	ldr	r0, [pc, #132]	; (80031e0 <vTaskStartScheduler+0xb8>)
 800315a:	f7ff fe19 	bl	8002d90 <xTaskCreateStatic>
 800315e:	4603      	mov	r3, r0
 8003160:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <vTaskStartScheduler+0xbc>)
 8003162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <vTaskStartScheduler+0xbc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e001      	b.n	8003176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d102      	bne.n	8003182 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800317c:	f000 fd38 	bl	8003bf0 <xTimerCreateTimerTask>
 8003180:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d116      	bne.n	80031b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	613b      	str	r3, [r7, #16]
}
 800319a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <vTaskStartScheduler+0xc0>)
 800319e:	f04f 32ff 	mov.w	r2, #4294967295
 80031a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <vTaskStartScheduler+0xc4>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <vTaskStartScheduler+0xc8>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031b0:	f001 f8b2 	bl	8004318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031b4:	e00e      	b.n	80031d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d10a      	bne.n	80031d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	60fb      	str	r3, [r7, #12]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <vTaskStartScheduler+0xaa>
}
 80031d4:	bf00      	nop
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	08007a2c 	.word	0x08007a2c
 80031e0:	0800380d 	.word	0x0800380d
 80031e4:	20000cd8 	.word	0x20000cd8
 80031e8:	20000cd4 	.word	0x20000cd4
 80031ec:	20000cc0 	.word	0x20000cc0
 80031f0:	20000cb8 	.word	0x20000cb8

080031f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <vTaskSuspendAll+0x18>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a03      	ldr	r2, [pc, #12]	; (800320c <vTaskSuspendAll+0x18>)
 8003200:	6013      	str	r3, [r2, #0]
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000cdc 	.word	0x20000cdc

08003210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800321e:	4b42      	ldr	r3, [pc, #264]	; (8003328 <xTaskResumeAll+0x118>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <xTaskResumeAll+0x2c>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	603b      	str	r3, [r7, #0]
}
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800323c:	f001 f8de 	bl	80043fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003240:	4b39      	ldr	r3, [pc, #228]	; (8003328 <xTaskResumeAll+0x118>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3b01      	subs	r3, #1
 8003246:	4a38      	ldr	r2, [pc, #224]	; (8003328 <xTaskResumeAll+0x118>)
 8003248:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800324a:	4b37      	ldr	r3, [pc, #220]	; (8003328 <xTaskResumeAll+0x118>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d162      	bne.n	8003318 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <xTaskResumeAll+0x11c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d05e      	beq.n	8003318 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800325a:	e02f      	b.n	80032bc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <xTaskResumeAll+0x120>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3318      	adds	r3, #24
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f883 	bl	8002374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3304      	adds	r3, #4
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff f87e 	bl	8002374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <xTaskResumeAll+0x124>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d903      	bls.n	800328c <xTaskResumeAll+0x7c>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <xTaskResumeAll+0x124>)
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <xTaskResumeAll+0x128>)
 800329a:	441a      	add	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f7ff f80b 	bl	80022be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <xTaskResumeAll+0x12c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <xTaskResumeAll+0x130>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032bc:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <xTaskResumeAll+0x120>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1cb      	bne.n	800325c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032ca:	f000 fb8d 	bl	80039e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <xTaskResumeAll+0x134>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032da:	f000 f845 	bl	8003368 <xTaskIncrementTick>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <xTaskResumeAll+0x130>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f1      	bne.n	80032da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <xTaskResumeAll+0x134>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <xTaskResumeAll+0x130>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <xTaskResumeAll+0x138>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003318:	f001 f8a0 	bl	800445c <vPortExitCritical>

	return xAlreadyYielded;
 800331c:	68bb      	ldr	r3, [r7, #8]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000cdc 	.word	0x20000cdc
 800332c:	20000cb4 	.word	0x20000cb4
 8003330:	20000c74 	.word	0x20000c74
 8003334:	20000cbc 	.word	0x20000cbc
 8003338:	200007e4 	.word	0x200007e4
 800333c:	200007e0 	.word	0x200007e0
 8003340:	20000cc8 	.word	0x20000cc8
 8003344:	20000cc4 	.word	0x20000cc4
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <xTaskGetTickCount+0x18>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	20000cb8 	.word	0x20000cb8

08003368 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003372:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <xTaskIncrementTick+0x150>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 808e 	bne.w	8003498 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800337c:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <xTaskIncrementTick+0x154>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003384:	4a4d      	ldr	r2, [pc, #308]	; (80034bc <xTaskIncrementTick+0x154>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d120      	bne.n	80033d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <xTaskIncrementTick+0x158>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	603b      	str	r3, [r7, #0]
}
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <xTaskIncrementTick+0x46>
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <xTaskIncrementTick+0x158>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <xTaskIncrementTick+0x15c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a41      	ldr	r2, [pc, #260]	; (80034c0 <xTaskIncrementTick+0x158>)
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4a41      	ldr	r2, [pc, #260]	; (80034c4 <xTaskIncrementTick+0x15c>)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <xTaskIncrementTick+0x160>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	4a3f      	ldr	r2, [pc, #252]	; (80034c8 <xTaskIncrementTick+0x160>)
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	f000 fb0b 	bl	80039e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033d2:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <xTaskIncrementTick+0x164>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d34e      	bcc.n	800347a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033dc:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <xTaskIncrementTick+0x158>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <xTaskIncrementTick+0x82>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xTaskIncrementTick+0x84>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <xTaskIncrementTick+0x164>)
 80033f2:	f04f 32ff 	mov.w	r2, #4294967295
 80033f6:	601a      	str	r2, [r3, #0]
					break;
 80033f8:	e03f      	b.n	800347a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033fa:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <xTaskIncrementTick+0x158>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d203      	bcs.n	800341a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003412:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <xTaskIncrementTick+0x164>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6013      	str	r3, [r2, #0]
						break;
 8003418:	e02f      	b.n	800347a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3304      	adds	r3, #4
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ffa8 	bl	8002374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d004      	beq.n	8003436 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3318      	adds	r3, #24
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe ff9f 	bl	8002374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <xTaskIncrementTick+0x168>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d903      	bls.n	800344a <xTaskIncrementTick+0xe2>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <xTaskIncrementTick+0x168>)
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <xTaskIncrementTick+0x16c>)
 8003458:	441a      	add	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	3304      	adds	r3, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f7fe ff2c 	bl	80022be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <xTaskIncrementTick+0x170>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	429a      	cmp	r2, r3
 8003472:	d3b3      	bcc.n	80033dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003474:	2301      	movs	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003478:	e7b0      	b.n	80033dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <xTaskIncrementTick+0x170>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	4914      	ldr	r1, [pc, #80]	; (80034d4 <xTaskIncrementTick+0x16c>)
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d907      	bls.n	80034a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e004      	b.n	80034a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <xTaskIncrementTick+0x174>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	4a0f      	ldr	r2, [pc, #60]	; (80034dc <xTaskIncrementTick+0x174>)
 80034a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <xTaskIncrementTick+0x178>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80034ae:	697b      	ldr	r3, [r7, #20]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000cdc 	.word	0x20000cdc
 80034bc:	20000cb8 	.word	0x20000cb8
 80034c0:	20000c6c 	.word	0x20000c6c
 80034c4:	20000c70 	.word	0x20000c70
 80034c8:	20000ccc 	.word	0x20000ccc
 80034cc:	20000cd4 	.word	0x20000cd4
 80034d0:	20000cbc 	.word	0x20000cbc
 80034d4:	200007e4 	.word	0x200007e4
 80034d8:	200007e0 	.word	0x200007e0
 80034dc:	20000cc4 	.word	0x20000cc4
 80034e0:	20000cc8 	.word	0x20000cc8

080034e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034ea:	4b27      	ldr	r3, [pc, #156]	; (8003588 <vTaskSwitchContext+0xa4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <vTaskSwitchContext+0xa8>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034f8:	e041      	b.n	800357e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <vTaskSwitchContext+0xa8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <vTaskSwitchContext+0xac>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e010      	b.n	800352a <vTaskSwitchContext+0x46>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <vTaskSwitchContext+0x40>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	607b      	str	r3, [r7, #4]
}
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <vTaskSwitchContext+0x3e>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3b01      	subs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	491a      	ldr	r1, [pc, #104]	; (8003594 <vTaskSwitchContext+0xb0>)
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0e4      	beq.n	8003508 <vTaskSwitchContext+0x24>
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4a12      	ldr	r2, [pc, #72]	; (8003594 <vTaskSwitchContext+0xb0>)
 800354a:	4413      	add	r3, r2
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	3308      	adds	r3, #8
 8003560:	429a      	cmp	r2, r3
 8003562:	d104      	bne.n	800356e <vTaskSwitchContext+0x8a>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a08      	ldr	r2, [pc, #32]	; (8003598 <vTaskSwitchContext+0xb4>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4a05      	ldr	r2, [pc, #20]	; (8003590 <vTaskSwitchContext+0xac>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6013      	str	r3, [r2, #0]
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000cdc 	.word	0x20000cdc
 800358c:	20000cc8 	.word	0x20000cc8
 8003590:	20000cbc 	.word	0x20000cbc
 8003594:	200007e4 	.word	0x200007e4
 8003598:	200007e0 	.word	0x200007e0

0800359c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
}
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <vTaskPlaceOnEventList+0x44>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3318      	adds	r3, #24
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe fe9a 	bl	8002304 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035d0:	2101      	movs	r1, #1
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	f000 fab8 	bl	8003b48 <prvAddCurrentTaskToDelayedList>
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	200007e0 	.word	0x200007e0

080035e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	617b      	str	r3, [r7, #20]
}
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <vTaskPlaceOnEventListRestricted+0x54>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3318      	adds	r3, #24
 8003612:	4619      	mov	r1, r3
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7fe fe52 	bl	80022be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68b8      	ldr	r0, [r7, #8]
 800362a:	f000 fa8d 	bl	8003b48 <prvAddCurrentTaskToDelayedList>
	}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200007e0 	.word	0x200007e0

0800363c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	60fb      	str	r3, [r7, #12]
}
 8003664:	bf00      	nop
 8003666:	e7fe      	b.n	8003666 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	3318      	adds	r3, #24
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fe81 	bl	8002374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <xTaskRemoveFromEventList+0xb0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11d      	bne.n	80036b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fe78 	bl	8002374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <xTaskRemoveFromEventList+0xb4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d903      	bls.n	8003698 <xTaskRemoveFromEventList+0x5c>
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <xTaskRemoveFromEventList+0xb4>)
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <xTaskRemoveFromEventList+0xb8>)
 80036a6:	441a      	add	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f7fe fe05 	bl	80022be <vListInsertEnd>
 80036b4:	e005      	b.n	80036c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3318      	adds	r3, #24
 80036ba:	4619      	mov	r1, r3
 80036bc:	480e      	ldr	r0, [pc, #56]	; (80036f8 <xTaskRemoveFromEventList+0xbc>)
 80036be:	f7fe fdfe 	bl	80022be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <xTaskRemoveFromEventList+0xc0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d905      	bls.n	80036dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <xTaskRemoveFromEventList+0xc4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e001      	b.n	80036e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80036e0:	697b      	ldr	r3, [r7, #20]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000cdc 	.word	0x20000cdc
 80036f0:	20000cbc 	.word	0x20000cbc
 80036f4:	200007e4 	.word	0x200007e4
 80036f8:	20000c74 	.word	0x20000c74
 80036fc:	200007e0 	.word	0x200007e0
 8003700:	20000cc8 	.word	0x20000cc8

08003704 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <vTaskInternalSetTimeOutState+0x24>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <vTaskInternalSetTimeOutState+0x28>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000ccc 	.word	0x20000ccc
 800372c:	20000cb8 	.word	0x20000cb8

08003730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	613b      	str	r3, [r7, #16]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	60fb      	str	r3, [r7, #12]
}
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003772:	f000 fe43 	bl	80043fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <xTaskCheckForTimeOut+0xbc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d102      	bne.n	8003796 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e023      	b.n	80037de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <xTaskCheckForTimeOut+0xc0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d007      	beq.n	80037b2 <xTaskCheckForTimeOut+0x82>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d302      	bcc.n	80037b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e015      	b.n	80037de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d20b      	bcs.n	80037d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff9b 	bl	8003704 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e004      	b.n	80037de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037da:	2301      	movs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037de:	f000 fe3d 	bl	800445c <vPortExitCritical>

	return xReturn;
 80037e2:	69fb      	ldr	r3, [r7, #28]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000cb8 	.word	0x20000cb8
 80037f0:	20000ccc 	.word	0x20000ccc

080037f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <vTaskMissedYield+0x14>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000cc8 	.word	0x20000cc8

0800380c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003814:	f000 f852 	bl	80038bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <prvIdleTask+0x28>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d9f9      	bls.n	8003814 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <prvIdleTask+0x2c>)
 8003822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003830:	e7f0      	b.n	8003814 <prvIdleTask+0x8>
 8003832:	bf00      	nop
 8003834:	200007e4 	.word	0x200007e4
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	e00c      	b.n	8003862 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <prvInitialiseTaskLists+0x60>)
 8003854:	4413      	add	r3, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fd06 	bl	8002268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3301      	adds	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b37      	cmp	r3, #55	; 0x37
 8003866:	d9ef      	bls.n	8003848 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003868:	480d      	ldr	r0, [pc, #52]	; (80038a0 <prvInitialiseTaskLists+0x64>)
 800386a:	f7fe fcfd 	bl	8002268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800386e:	480d      	ldr	r0, [pc, #52]	; (80038a4 <prvInitialiseTaskLists+0x68>)
 8003870:	f7fe fcfa 	bl	8002268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <prvInitialiseTaskLists+0x6c>)
 8003876:	f7fe fcf7 	bl	8002268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800387a:	480c      	ldr	r0, [pc, #48]	; (80038ac <prvInitialiseTaskLists+0x70>)
 800387c:	f7fe fcf4 	bl	8002268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003880:	480b      	ldr	r0, [pc, #44]	; (80038b0 <prvInitialiseTaskLists+0x74>)
 8003882:	f7fe fcf1 	bl	8002268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <prvInitialiseTaskLists+0x78>)
 8003888:	4a05      	ldr	r2, [pc, #20]	; (80038a0 <prvInitialiseTaskLists+0x64>)
 800388a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <prvInitialiseTaskLists+0x7c>)
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <prvInitialiseTaskLists+0x68>)
 8003890:	601a      	str	r2, [r3, #0]
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200007e4 	.word	0x200007e4
 80038a0:	20000c44 	.word	0x20000c44
 80038a4:	20000c58 	.word	0x20000c58
 80038a8:	20000c74 	.word	0x20000c74
 80038ac:	20000c88 	.word	0x20000c88
 80038b0:	20000ca0 	.word	0x20000ca0
 80038b4:	20000c6c 	.word	0x20000c6c
 80038b8:	20000c70 	.word	0x20000c70

080038bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c2:	e019      	b.n	80038f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038c4:	f000 fd9a 	bl	80043fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <prvCheckTasksWaitingTermination+0x50>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe fd4d 	bl	8002374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038da:	4b0d      	ldr	r3, [pc, #52]	; (8003910 <prvCheckTasksWaitingTermination+0x54>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <prvCheckTasksWaitingTermination+0x54>)
 80038e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <prvCheckTasksWaitingTermination+0x58>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <prvCheckTasksWaitingTermination+0x58>)
 80038ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038ee:	f000 fdb5 	bl	800445c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f848 	bl	8003988 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <prvCheckTasksWaitingTermination+0x58>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e1      	bne.n	80038c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000c88 	.word	0x20000c88
 8003910:	20000cb4 	.word	0x20000cb4
 8003914:	20000c9c 	.word	0x20000c9c

08003918 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003924:	e005      	b.n	8003932 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3301      	adds	r3, #1
 800392a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3301      	adds	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2ba5      	cmp	r3, #165	; 0xa5
 8003938:	d0f5      	beq.n	8003926 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	b29b      	uxth	r3, r3
	}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
	...

08003950 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <uxTaskGetStackHighWaterMark+0x14>
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <uxTaskGetStackHighWaterMark+0x34>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e000      	b.n	8003966 <uxTaskGetStackHighWaterMark+0x16>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800396e:	6938      	ldr	r0, [r7, #16]
 8003970:	f7ff ffd2 	bl	8003918 <prvTaskCheckFreeStackSpace>
 8003974:	4603      	mov	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8003978:	68fb      	ldr	r3, [r7, #12]
	}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200007e0 	.word	0x200007e0

08003988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fef0 	bl	8004784 <vPortFree>
				vPortFree( pxTCB );
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 feed 	bl	8004784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039aa:	e018      	b.n	80039de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d103      	bne.n	80039be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fee4 	bl	8004784 <vPortFree>
	}
 80039bc:	e00f      	b.n	80039de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d00a      	beq.n	80039de <prvDeleteTCB+0x56>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	60fb      	str	r3, [r7, #12]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <prvDeleteTCB+0x54>
	}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <prvResetNextTaskUnblockTime+0x40>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <prvResetNextTaskUnblockTime+0x14>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <prvResetNextTaskUnblockTime+0x16>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <prvResetNextTaskUnblockTime+0x44>)
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a0a:	e008      	b.n	8003a1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <prvResetNextTaskUnblockTime+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <prvResetNextTaskUnblockTime+0x44>)
 8003a1c:	6013      	str	r3, [r2, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	20000c6c 	.word	0x20000c6c
 8003a2c:	20000cd4 	.word	0x20000cd4

08003a30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <xTaskGetSchedulerState+0x34>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	e008      	b.n	8003a56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <xTaskGetSchedulerState+0x38>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	e001      	b.n	8003a56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a56:	687b      	ldr	r3, [r7, #4]
	}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000cc0 	.word	0x20000cc0
 8003a68:	20000cdc 	.word	0x20000cdc

08003a6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d056      	beq.n	8003b30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <xTaskPriorityDisinherit+0xd0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d00a      	beq.n	8003aa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60fb      	str	r3, [r7, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60bb      	str	r3, [r7, #8]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac4:	1e5a      	subs	r2, r3, #1
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d02c      	beq.n	8003b30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d128      	bne.n	8003b30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fc46 	bl	8002374 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <xTaskPriorityDisinherit+0xd4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d903      	bls.n	8003b10 <xTaskPriorityDisinherit+0xa4>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <xTaskPriorityDisinherit+0xd4>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <xTaskPriorityDisinherit+0xd8>)
 8003b1e:	441a      	add	r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe fbc9 	bl	80022be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b30:	697b      	ldr	r3, [r7, #20]
	}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200007e0 	.word	0x200007e0
 8003b40:	20000cbc 	.word	0x20000cbc
 8003b44:	200007e4 	.word	0x200007e4

08003b48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b52:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b58:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fc08 	bl	8002374 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d10a      	bne.n	8003b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b72:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4819      	ldr	r0, [pc, #100]	; (8003be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b7c:	f7fe fb9f 	bl	80022be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b80:	e026      	b.n	8003bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b8a:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d209      	bcs.n	8003bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7fe fbac 	bl	8002304 <vListInsert>
}
 8003bac:	e010      	b.n	8003bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f7fe fba2 	bl	8002304 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d202      	bcs.n	8003bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000cb8 	.word	0x20000cb8
 8003bdc:	200007e0 	.word	0x200007e0
 8003be0:	20000ca0 	.word	0x20000ca0
 8003be4:	20000c70 	.word	0x20000c70
 8003be8:	20000c6c 	.word	0x20000c6c
 8003bec:	20000cd4 	.word	0x20000cd4

08003bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003bfa:	f000 facb 	bl	8004194 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <xTimerCreateTimerTask+0x80>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d021      	beq.n	8003c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c0e:	1d3a      	adds	r2, r7, #4
 8003c10:	f107 0108 	add.w	r1, r7, #8
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fb0b 	bl	8002234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	9202      	str	r2, [sp, #8]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	2302      	movs	r3, #2
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	460a      	mov	r2, r1
 8003c30:	4910      	ldr	r1, [pc, #64]	; (8003c74 <xTimerCreateTimerTask+0x84>)
 8003c32:	4811      	ldr	r0, [pc, #68]	; (8003c78 <xTimerCreateTimerTask+0x88>)
 8003c34:	f7ff f8ac 	bl	8002d90 <xTaskCreateStatic>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <xTimerCreateTimerTask+0x8c>)
 8003c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <xTimerCreateTimerTask+0x8c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c46:	2301      	movs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	613b      	str	r3, [r7, #16]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c66:	697b      	ldr	r3, [r7, #20]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000d10 	.word	0x20000d10
 8003c74:	08007a34 	.word	0x08007a34
 8003c78:	08003d9d 	.word	0x08003d9d
 8003c7c:	20000d14 	.word	0x20000d14

08003c80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xTimerGenericCommand+0x2e>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	623b      	str	r3, [r7, #32]
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <xTimerGenericCommand+0x98>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02a      	beq.n	8003d0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	dc18      	bgt.n	8003cfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cc8:	f7ff feb2 	bl	8003a30 <xTaskGetSchedulerState>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d109      	bne.n	8003ce6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <xTimerGenericCommand+0x98>)
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f107 0110 	add.w	r1, r7, #16
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cde:	f7fe fc75 	bl	80025cc <xQueueGenericSend>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ce4:	e012      	b.n	8003d0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <xTimerGenericCommand+0x98>)
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	f107 0110 	add.w	r1, r7, #16
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f7fe fc6b 	bl	80025cc <xQueueGenericSend>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8003cf8:	e008      	b.n	8003d0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <xTimerGenericCommand+0x98>)
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f107 0110 	add.w	r1, r7, #16
 8003d02:	2300      	movs	r3, #0
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	f7fe fd5f 	bl	80027c8 <xQueueGenericSendFromISR>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000d10 	.word	0x20000d10

08003d1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <prvProcessExpiredTimer+0x7c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fb1d 	bl	8002374 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d122      	bne.n	8003d88 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	18d1      	adds	r1, r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	6978      	ldr	r0, [r7, #20]
 8003d50:	f000 f8c8 	bl	8003ee4 <prvInsertTimerInActiveList>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d016      	beq.n	8003d88 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	2100      	movs	r1, #0
 8003d64:	6978      	ldr	r0, [r7, #20]
 8003d66:	f7ff ff8b 	bl	8003c80 <xTimerGenericCommand>
 8003d6a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60fb      	str	r3, [r7, #12]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	6978      	ldr	r0, [r7, #20]
 8003d8e:	4798      	blx	r3
}
 8003d90:	bf00      	nop
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000d08 	.word	0x20000d08

08003d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003da4:	f107 0308 	add.w	r3, r7, #8
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f857 	bl	8003e5c <prvGetNextExpireTime>
 8003dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4619      	mov	r1, r3
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f803 	bl	8003dc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003dba:	f000 f8d5 	bl	8003f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dbe:	e7f1      	b.n	8003da4 <prvTimerTask+0x8>

08003dc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003dca:	f7ff fa13 	bl	80031f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f866 	bl	8003ea4 <prvSampleTimeNow>
 8003dd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d130      	bne.n	8003e42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <prvProcessTimerOrBlockTask+0x3c>
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d806      	bhi.n	8003dfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003dee:	f7ff fa0f 	bl	8003210 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff91 	bl	8003d1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003dfa:	e024      	b.n	8003e46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <prvProcessTimerOrBlockTask+0x90>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <prvProcessTimerOrBlockTask+0x94>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	f7fe ff81 	bl	8002d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e26:	f7ff f9f3 	bl	8003210 <xTaskResumeAll>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <prvProcessTimerOrBlockTask+0x98>)
 8003e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	f3bf 8f6f 	isb	sy
}
 8003e40:	e001      	b.n	8003e46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e42:	f7ff f9e5 	bl	8003210 <xTaskResumeAll>
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000d0c 	.word	0x20000d0c
 8003e54:	20000d10 	.word	0x20000d10
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <prvGetNextExpireTime+0x44>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <prvGetNextExpireTime+0x44>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e001      	b.n	8003e92 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000d08 	.word	0x20000d08

08003ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003eac:	f7ff fa4e 	bl	800334c <xTaskGetTickCount>
 8003eb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <prvSampleTimeNow+0x3c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d205      	bcs.n	8003ec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ebc:	f000 f908 	bl	80040d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e002      	b.n	8003ece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <prvSampleTimeNow+0x3c>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000d18 	.word	0x20000d18

08003ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d812      	bhi.n	8003f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	e01b      	b.n	8003f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f1e:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <prvInsertTimerInActiveList+0x7c>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f7fe f9eb 	bl	8002304 <vListInsert>
 8003f2e:	e012      	b.n	8003f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d206      	bcs.n	8003f46 <prvInsertTimerInActiveList+0x62>
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e007      	b.n	8003f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f46:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <prvInsertTimerInActiveList+0x80>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f7fe f9d7 	bl	8002304 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000d0c 	.word	0x20000d0c
 8003f64:	20000d08 	.word	0x20000d08

08003f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08e      	sub	sp, #56	; 0x38
 8003f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f6e:	e09d      	b.n	80040ac <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da18      	bge.n	8003fa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	3304      	adds	r3, #4
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	61fb      	str	r3, [r7, #28]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9e:	6850      	ldr	r0, [r2, #4]
 8003fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa2:	6892      	ldr	r2, [r2, #8]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db7d      	blt.n	80040aa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe f9d8 	bl	8002374 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff ff6c 	bl	8003ea4 <prvSampleTimeNow>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	d86b      	bhi.n	80040ac <prvProcessReceivedCommands+0x144>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <prvProcessReceivedCommands+0x74>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004005 	.word	0x08004005
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	08004005 	.word	0x08004005
 8003fe8:	080040ad 	.word	0x080040ad
 8003fec:	08004061 	.word	0x08004061
 8003ff0:	08004099 	.word	0x08004099
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004005 	.word	0x08004005
 8003ffc:	080040ad 	.word	0x080040ad
 8004000:	08004061 	.word	0x08004061
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	18d1      	adds	r1, r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004012:	f7ff ff67 	bl	8003ee4 <prvInsertTimerInActiveList>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d047      	beq.n	80040ac <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004022:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d13f      	bne.n	80040ac <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	441a      	add	r2, r3
 8004034:	2300      	movs	r3, #0
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2300      	movs	r3, #0
 800403a:	2100      	movs	r1, #0
 800403c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800403e:	f7ff fe1f 	bl	8003c80 <xTimerGenericCommand>
 8004042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d130      	bne.n	80040ac <prvProcessReceivedCommands+0x144>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	61bb      	str	r3, [r7, #24]
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	617b      	str	r3, [r7, #20]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	18d1      	adds	r1, r2, r3
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004092:	f7ff ff27 	bl	8003ee4 <prvInsertTimerInActiveList>
					break;
 8004096:	e009      	b.n	80040ac <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80040a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a4:	f000 fb6e 	bl	8004784 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040a8:	e000      	b.n	80040ac <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80040aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <prvProcessReceivedCommands+0x164>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	1d39      	adds	r1, r7, #4
 80040b2:	2200      	movs	r2, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fc1f 	bl	80028f8 <xQueueReceive>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f af57 	bne.w	8003f70 <prvProcessReceivedCommands+0x8>
	}
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000d10 	.word	0x20000d10

080040d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040d6:	e045      	b.n	8004164 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d8:	4b2c      	ldr	r3, [pc, #176]	; (800418c <prvSwitchTimerLists+0xbc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040e2:	4b2a      	ldr	r3, [pc, #168]	; (800418c <prvSwitchTimerLists+0xbc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe f93f 	bl	8002374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d12e      	bne.n	8004164 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d90e      	bls.n	8004136 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <prvSwitchTimerLists+0xbc>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f7fe f8e8 	bl	8002304 <vListInsert>
 8004134:	e016      	b.n	8004164 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004136:	2300      	movs	r3, #0
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2300      	movs	r3, #0
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	2100      	movs	r1, #0
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff fd9d 	bl	8003c80 <xTimerGenericCommand>
 8004146:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <prvSwitchTimerLists+0x94>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	603b      	str	r3, [r7, #0]
}
 8004160:	bf00      	nop
 8004162:	e7fe      	b.n	8004162 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <prvSwitchTimerLists+0xbc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1b4      	bne.n	80040d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <prvSwitchTimerLists+0xbc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <prvSwitchTimerLists+0xc0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <prvSwitchTimerLists+0xbc>)
 800417a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800417c:	4a04      	ldr	r2, [pc, #16]	; (8004190 <prvSwitchTimerLists+0xc0>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6013      	str	r3, [r2, #0]
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000d08 	.word	0x20000d08
 8004190:	20000d0c 	.word	0x20000d0c

08004194 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800419a:	f000 f92f 	bl	80043fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <prvCheckForValidListAndQueue+0x60>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d120      	bne.n	80041e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041a6:	4814      	ldr	r0, [pc, #80]	; (80041f8 <prvCheckForValidListAndQueue+0x64>)
 80041a8:	f7fe f85e 	bl	8002268 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <prvCheckForValidListAndQueue+0x68>)
 80041ae:	f7fe f85b 	bl	8002268 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <prvCheckForValidListAndQueue+0x6c>)
 80041b4:	4a10      	ldr	r2, [pc, #64]	; (80041f8 <prvCheckForValidListAndQueue+0x64>)
 80041b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <prvCheckForValidListAndQueue+0x70>)
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <prvCheckForValidListAndQueue+0x68>)
 80041bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041be:	2300      	movs	r3, #0
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <prvCheckForValidListAndQueue+0x74>)
 80041c4:	4a11      	ldr	r2, [pc, #68]	; (800420c <prvCheckForValidListAndQueue+0x78>)
 80041c6:	2110      	movs	r1, #16
 80041c8:	200a      	movs	r0, #10
 80041ca:	f7fe f965 	bl	8002498 <xQueueGenericCreateStatic>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <prvCheckForValidListAndQueue+0x60>)
 80041d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <prvCheckForValidListAndQueue+0x60>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <prvCheckForValidListAndQueue+0x60>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	490b      	ldr	r1, [pc, #44]	; (8004210 <prvCheckForValidListAndQueue+0x7c>)
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fd78 	bl	8002cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041e8:	f000 f938 	bl	800445c <vPortExitCritical>
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000d10 	.word	0x20000d10
 80041f8:	20000ce0 	.word	0x20000ce0
 80041fc:	20000cf4 	.word	0x20000cf4
 8004200:	20000d08 	.word	0x20000d08
 8004204:	20000d0c 	.word	0x20000d0c
 8004208:	20000dbc 	.word	0x20000dbc
 800420c:	20000d1c 	.word	0x20000d1c
 8004210:	08007a3c 	.word	0x08007a3c

08004214 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b04      	subs	r3, #4
 8004224:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800422c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b04      	subs	r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3b04      	subs	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <pxPortInitialiseStack+0x54>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3b14      	subs	r3, #20
 800424e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b20      	subs	r3, #32
 800425a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	0800426d 	.word	0x0800426d

0800426c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <prvTaskExitError+0x54>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d00a      	beq.n	8004296 <prvTaskExitError+0x2a>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <prvTaskExitError+0x28>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
}
 80042a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042aa:	bf00      	nop
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0fc      	beq.n	80042ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	2000000c 	.word	0x2000000c
	...

080042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <pxCurrentTCBConst2>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	6808      	ldr	r0, [r1, #0]
 80042d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042da:	f380 8809 	msr	PSP, r0
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80042ee:	4770      	bx	lr

080042f0 <pxCurrentTCBConst2>:
 80042f0:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042f8:	4806      	ldr	r0, [pc, #24]	; (8004314 <prvPortStartFirstTask+0x1c>)
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f380 8808 	msr	MSP, r0
 8004302:	b662      	cpsie	i
 8004304:	b661      	cpsie	f
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	df00      	svc	0
 8004310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004312:	bf00      	nop
 8004314:	e000ed08 	.word	0xe000ed08

08004318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800431e:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <xPortStartScheduler+0xd0>)
 8004320:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <xPortStartScheduler+0xd4>)
 8004344:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004346:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004348:	2207      	movs	r2, #7
 800434a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800434c:	e009      	b.n	8004362 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004356:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d0ef      	beq.n	800434e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	d00a      	beq.n	8004390 <xPortStartScheduler+0x78>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60bb      	str	r3, [r7, #8]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <xPortStartScheduler+0xd8>)
 8004398:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <xPortStartScheduler+0xd8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043a2:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <xPortStartScheduler+0xd8>)
 80043a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <xPortStartScheduler+0xdc>)
 80043c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043c6:	f000 f8b9 	bl	800453c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <xPortStartScheduler+0xe0>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043d0:	f7ff ff92 	bl	80042f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043d4:	f7ff f886 	bl	80034e4 <vTaskSwitchContext>
	prvTaskExitError();
 80043d8:	f7ff ff48 	bl	800426c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000e400 	.word	0xe000e400
 80043ec:	20000e0c 	.word	0x20000e0c
 80043f0:	20000e10 	.word	0x20000e10
 80043f4:	e000ed20 	.word	0xe000ed20
 80043f8:	2000000c 	.word	0x2000000c

080043fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
}
 8004414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <vPortEnterCritical+0x58>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <vPortEnterCritical+0x58>)
 800441e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <vPortEnterCritical+0x58>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d10f      	bne.n	8004448 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <vPortEnterCritical+0x5c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <vPortEnterCritical+0x4c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	603b      	str	r3, [r7, #0]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <vPortEnterCritical+0x4a>
	}
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	2000000c 	.word	0x2000000c
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <vPortExitCritical+0x4c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <vPortExitCritical+0x24>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	607b      	str	r3, [r7, #4]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <vPortExitCritical+0x4c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3b01      	subs	r3, #1
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <vPortExitCritical+0x4c>)
 8004488:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <vPortExitCritical+0x4c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <vPortExitCritical+0x42>
 8004492:	2300      	movs	r3, #0
 8004494:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f383 8811 	msr	BASEPRI, r3
}
 800449c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	00000000 	.word	0x00000000

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044ca:	f380 8811 	msr	BASEPRI, r0
 80044ce:	f7ff f809 	bl	80034e4 <vTaskSwitchContext>
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044e6:	f380 8809 	msr	PSP, r0
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	4770      	bx	lr

080044f0 <pxCurrentTCBConst>:
 80044f0:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
}
 8004510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004512:	f7fe ff29 	bl	8003368 <xTaskIncrementTick>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <SysTick_Handler+0x40>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f383 8811 	msr	BASEPRI, r3
}
 800452e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <vPortSetupTimerInterrupt+0x30>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <vPortSetupTimerInterrupt+0x34>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <vPortSetupTimerInterrupt+0x38>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a09      	ldr	r2, [pc, #36]	; (8004578 <vPortSetupTimerInterrupt+0x3c>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <vPortSetupTimerInterrupt+0x40>)
 800455a:	3b01      	subs	r3, #1
 800455c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800455e:	4b03      	ldr	r3, [pc, #12]	; (800456c <vPortSetupTimerInterrupt+0x30>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	e000e010 	.word	0xe000e010
 8004570:	e000e018 	.word	0xe000e018
 8004574:	20000000 	.word	0x20000000
 8004578:	10624dd3 	.word	0x10624dd3
 800457c:	e000e014 	.word	0xe000e014

08004580 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004586:	f3ef 8305 	mrs	r3, IPSR
 800458a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b0f      	cmp	r3, #15
 8004590:	d914      	bls.n	80045bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004592:	4a16      	ldr	r2, [pc, #88]	; (80045ec <vPortValidateInterruptPriority+0x6c>)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <vPortValidateInterruptPriority+0x70>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	7afa      	ldrb	r2, [r7, #11]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d20a      	bcs.n	80045bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	607b      	str	r3, [r7, #4]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <vPortValidateInterruptPriority+0x74>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <vPortValidateInterruptPriority+0x78>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d90a      	bls.n	80045e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	603b      	str	r3, [r7, #0]
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <vPortValidateInterruptPriority+0x60>
	}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr
 80045ec:	e000e3f0 	.word	0xe000e3f0
 80045f0:	20000e0c 	.word	0x20000e0c
 80045f4:	e000ed0c 	.word	0xe000ed0c
 80045f8:	20000e10 	.word	0x20000e10

080045fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004608:	f7fe fdf4 	bl	80031f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800460c:	4b58      	ldr	r3, [pc, #352]	; (8004770 <pvPortMalloc+0x174>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004614:	f000 f910 	bl	8004838 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004618:	4b56      	ldr	r3, [pc, #344]	; (8004774 <pvPortMalloc+0x178>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 808e 	bne.w	8004742 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01d      	beq.n	8004668 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800462c:	2208      	movs	r2, #8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	2b00      	cmp	r3, #0
 800463c:	d014      	beq.n	8004668 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f023 0307 	bic.w	r3, r3, #7
 8004644:	3308      	adds	r3, #8
 8004646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <pvPortMalloc+0x6c>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	617b      	str	r3, [r7, #20]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d069      	beq.n	8004742 <pvPortMalloc+0x146>
 800466e:	4b42      	ldr	r3, [pc, #264]	; (8004778 <pvPortMalloc+0x17c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d864      	bhi.n	8004742 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004678:	4b40      	ldr	r3, [pc, #256]	; (800477c <pvPortMalloc+0x180>)
 800467a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800467c:	4b3f      	ldr	r3, [pc, #252]	; (800477c <pvPortMalloc+0x180>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004682:	e004      	b.n	800468e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d903      	bls.n	80046a0 <pvPortMalloc+0xa4>
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f1      	bne.n	8004684 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046a0:	4b33      	ldr	r3, [pc, #204]	; (8004770 <pvPortMalloc+0x174>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d04b      	beq.n	8004742 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2208      	movs	r2, #8
 80046b0:	4413      	add	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	2308      	movs	r3, #8
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d91f      	bls.n	800470c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <pvPortMalloc+0xf8>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	613b      	str	r3, [r7, #16]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004706:	69b8      	ldr	r0, [r7, #24]
 8004708:	f000 f8f8 	bl	80048fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <pvPortMalloc+0x17c>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <pvPortMalloc+0x17c>)
 8004718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <pvPortMalloc+0x17c>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <pvPortMalloc+0x184>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d203      	bcs.n	800472e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <pvPortMalloc+0x17c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a15      	ldr	r2, [pc, #84]	; (8004780 <pvPortMalloc+0x184>)
 800472c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <pvPortMalloc+0x178>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	431a      	orrs	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004742:	f7fe fd65 	bl	8003210 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <pvPortMalloc+0x16a>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <pvPortMalloc+0x168>
	return pvReturn;
 8004766:	69fb      	ldr	r3, [r7, #28]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20001a1c 	.word	0x20001a1c
 8004774:	20001a28 	.word	0x20001a28
 8004778:	20001a20 	.word	0x20001a20
 800477c:	20001a14 	.word	0x20001a14
 8004780:	20001a24 	.word	0x20001a24

08004784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d048      	beq.n	8004828 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004796:	2308      	movs	r3, #8
 8004798:	425b      	negs	r3, r3
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4413      	add	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <vPortFree+0xac>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <vPortFree+0x44>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60fb      	str	r3, [r7, #12]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <vPortFree+0x62>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	60bb      	str	r3, [r7, #8]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <vPortFree+0xac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d019      	beq.n	8004828 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d115      	bne.n	8004828 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <vPortFree+0xac>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	43db      	mvns	r3, r3
 8004806:	401a      	ands	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800480c:	f7fe fcf2 	bl	80031f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <vPortFree+0xb0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4413      	add	r3, r2
 800481a:	4a06      	ldr	r2, [pc, #24]	; (8004834 <vPortFree+0xb0>)
 800481c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800481e:	6938      	ldr	r0, [r7, #16]
 8004820:	f000 f86c 	bl	80048fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004824:	f7fe fcf4 	bl	8003210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20001a28 	.word	0x20001a28
 8004834:	20001a20 	.word	0x20001a20

08004838 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800483e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004842:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <prvHeapInit+0xac>)
 8004846:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3307      	adds	r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <prvHeapInit+0xac>)
 8004868:	4413      	add	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <prvHeapInit+0xb0>)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004876:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <prvHeapInit+0xb0>)
 8004878:	2200      	movs	r2, #0
 800487a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4413      	add	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004884:	2208      	movs	r2, #8
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0307 	bic.w	r3, r3, #7
 8004892:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a15      	ldr	r2, [pc, #84]	; (80048ec <prvHeapInit+0xb4>)
 8004898:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800489a:	4b14      	ldr	r3, [pc, #80]	; (80048ec <prvHeapInit+0xb4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <prvHeapInit+0xb4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <prvHeapInit+0xb4>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <prvHeapInit+0xb8>)
 80048c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <prvHeapInit+0xbc>)
 80048ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <prvHeapInit+0xc0>)
 80048d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048d6:	601a      	str	r2, [r3, #0]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000e14 	.word	0x20000e14
 80048e8:	20001a14 	.word	0x20001a14
 80048ec:	20001a1c 	.word	0x20001a1c
 80048f0:	20001a24 	.word	0x20001a24
 80048f4:	20001a20 	.word	0x20001a20
 80048f8:	20001a28 	.word	0x20001a28

080048fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <prvInsertBlockIntoFreeList+0xa8>)
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e002      	b.n	8004910 <prvInsertBlockIntoFreeList+0x14>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d8f7      	bhi.n	800490a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4413      	add	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d108      	bne.n	800493e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	441a      	add	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d118      	bne.n	8004984 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <prvInsertBlockIntoFreeList+0xac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d00d      	beq.n	800497a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	441a      	add	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	e008      	b.n	800498c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <prvInsertBlockIntoFreeList+0xac>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e003      	b.n	800498c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d002      	beq.n	800499a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20001a14 	.word	0x20001a14
 80049a8:	20001a1c 	.word	0x20001a1c

080049ac <prvTraceItmWrite>:
	} \
}

/* This is assumed to execute from within the recorder, with interrupts disabled */
traceResult prvTraceItmWrite(void* ptrData, uint32_t size, int32_t* ptrBytesWritten)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
	uint32_t* ptr32 = (uint32_t*)ptrData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	617b      	str	r3, [r7, #20]

	TRC_ASSERT(size % 4 == 0);
	TRC_ASSERT(ptrBytesWritten != 0);

	*ptrBytesWritten = 0;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

	while (*ptrBytesWritten < (int32_t)size)
 80049c2:	e028      	b.n	8004a16 <prvTraceItmWrite+0x6a>
	{
		itm_write_32(*ptr32);
 80049c4:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <prvTraceItmWrite+0xc0>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01a      	beq.n	8004a06 <prvTraceItmWrite+0x5a>
 80049d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80049d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <prvTraceItmWrite+0x5a>
 80049e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80049e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <prvTraceItmWrite+0x5a>
 80049f0:	bf00      	nop
 80049f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0fa      	beq.n	80049f2 <prvTraceItmWrite+0x46>
 80049fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6093      	str	r3, [r2, #8]
		ptr32++;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	617b      	str	r3, [r7, #20]
		*ptrBytesWritten += 4;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	1d1a      	adds	r2, r3, #4
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	601a      	str	r2, [r3, #0]
	while (*ptrBytesWritten < (int32_t)size)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	dbd1      	blt.n	80049c4 <prvTraceItmWrite+0x18>
	}

	if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&					/* Trace enabled? */ \
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <prvTraceItmWrite+0xc0>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d019      	beq.n	8004a60 <prvTraceItmWrite+0xb4>
			(ITM->TCR & ITM_TCR_ITMENA_Msk) &&									/* ITM enabled? */ \
 8004a2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004a30:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004a34:	f003 0301 	and.w	r3, r3, #1
	if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&					/* Trace enabled? */ \
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d011      	beq.n	8004a60 <prvTraceItmWrite+0xb4>
			(ITM->TER & (1UL << (1))))								/* ITM port enabled? */ \
 8004a3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004a40:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004a44:	f003 0302 	and.w	r3, r3, #2
			(ITM->TCR & ITM_TCR_ITMENA_Msk) &&									/* ITM enabled? */ \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <prvTraceItmWrite+0xb4>
		{ \
			while (ITM->PORT[1].u32 == 0) { /* Do nothing */ }	/* Block until room in ITM FIFO - This stream port is always in "blocking mode", since intended for high-speed ITM! */ \
 8004a4c:	bf00      	nop
 8004a4e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0fa      	beq.n	8004a4e <prvTraceItmWrite+0xa2>
			ITM->PORT[1].u32 = 80;								/* Write the data */ \
 8004a58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004a5c:	2250      	movs	r2, #80	; 0x50
 8004a5e:	605a      	str	r2, [r3, #4]
		} \

	return TRC_SUCCESS;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	e000edf0 	.word	0xe000edf0

08004a70 <prvTraceItmRead>:

/* This reads "command" data from a RAM buffer, written by a host macro in the debugger */
traceResult prvTraceItmRead(void* ptrData, uint32_t uiSize, int32_t* piBytesRead)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
	int32_t i;
	uint8_t* bytesBuffer = (uint8_t*)ptrData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	613b      	str	r3, [r7, #16]

	TRC_ASSERT(piBytesRead != 0);
	
	/* Check if the debugger has updated tz_host_command_bytes_to_read */
	if (tz_host_command_bytes_to_read > 0)
 8004a80:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <prvTraceItmRead+0x68>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dd21      	ble.n	8004acc <prvTraceItmRead+0x5c>
	{
		if (tz_host_command_bytes_to_read != (int32_t)uiSize)
 8004a88:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <prvTraceItmRead+0x68>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d001      	beq.n	8004a96 <prvTraceItmRead+0x26>
		{
			/* Sanity check. */
			return TRC_FAIL;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e01b      	b.n	8004ace <prvTraceItmRead+0x5e>
		}
		
		*piBytesRead = (int32_t)tz_host_command_bytes_to_read;
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <prvTraceItmRead+0x68>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]

		/* Read the bytes */
		for (i = 0; i < tz_host_command_bytes_to_read; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e00b      	b.n	8004abc <prvTraceItmRead+0x4c>
		{
			bytesBuffer[i] = tz_host_command_data[i];
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	490c      	ldr	r1, [pc, #48]	; (8004adc <prvTraceItmRead+0x6c>)
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	440a      	add	r2, r1
 8004ab0:	7812      	ldrb	r2, [r2, #0]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < tz_host_command_bytes_to_read; i++)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <prvTraceItmRead+0x68>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	dbee      	blt.n	8004aa4 <prvTraceItmRead+0x34>
		}

		/* Reset */
		tz_host_command_bytes_to_read = 0;
 8004ac6:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <prvTraceItmRead+0x68>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
	}

	return TRC_SUCCESS;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	20001a30 	.word	0x20001a30
 8004adc:	20001a34 	.word	0x20001a34

08004ae0 <xTraceStreamPortInitialize>:

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortFile_t);

	TRC_ASSERT(pxBuffer != 0);

	pxStreamPortFile = (TraceStreamPortFile_t*)pxBuffer;
 8004ae8:	4a04      	ldr	r2, [pc, #16]	; (8004afc <xTraceStreamPortInitialize+0x1c>)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20001a2c 	.word	0x20001a2c

08004b00 <xTraceDiagnosticsInitialize>:
} TraceDiagnostics_t;

static TraceDiagnostics_t *pxDiagnostics;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsBuffer_t *pxBuffer)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceDiagnosticsBuffer_t, TraceDiagnostics_t);

	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxDiagnostics = (TraceDiagnostics_t*)pxBuffer;
 8004b08:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <xTraceDiagnosticsInitialize+0x44>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6013      	str	r3, [r2, #0]

	for (i = 0; i < TRC_DIAGNOSTICS_COUNT; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e008      	b.n	8004b26 <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <xTraceDiagnosticsInitialize+0x44>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < TRC_DIAGNOSTICS_COUNT; i++)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d9f3      	bls.n	8004b14 <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <xTraceDiagnosticsInitialize+0x48>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f043 0308 	orr.w	r3, r3, #8
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <xTraceDiagnosticsInitialize+0x48>)
 8004b36:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	20001a54 	.word	0x20001a54
 8004b48:	200038fc 	.word	0x200038fc

08004b4c <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <xTraceDiagnosticsAdd+0x30>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	79fa      	ldrb	r2, [r7, #7]
 8004b5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <xTraceDiagnosticsAdd+0x30>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	79fa      	ldrb	r2, [r7, #7]
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	4401      	add	r1, r0
 8004b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TRC_SUCCESS;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	20001a54 	.word	0x20001a54

08004b80 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
	return xTraceDiagnosticsAdd(xType, 1);
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ffdc 	bl	8004b4c <xTraceDiagnosticsAdd>
 8004b94:	4603      	mov	r3, r0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <xTraceDiagnosticsSetIfHigher+0x34>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	79fa      	ldrb	r2, [r7, #7]
 8004bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	dd05      	ble.n	8004bc8 <xTraceDiagnosticsSetIfHigher+0x28>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <xTraceDiagnosticsSetIfHigher+0x34>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	79fa      	ldrb	r2, [r7, #7]
 8004bc2:	6839      	ldr	r1, [r7, #0]
 8004bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return TRC_SUCCESS;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	20001a54 	.word	0x20001a54

08004bd8 <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS))
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <xTraceDiagnosticsCheckStatus+0x7c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <xTraceDiagnosticsCheckStatus+0x14>
	{
		return TRC_FAIL;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e030      	b.n	8004c4e <xTraceDiagnosticsCheckStatus+0x76>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dd06      	ble.n	8004c04 <xTraceDiagnosticsCheckStatus+0x2c>
	{
		xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 8004bf6:	2008      	movs	r0, #8
 8004bf8:	f000 f9c0 	bl	8004f7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 8004bfc:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	dd06      	ble.n	8004c1c <xTraceDiagnosticsCheckStatus+0x44>
	{
		xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 8004c0e:	2009      	movs	r0, #9
 8004c10:	f000 f9b4 	bl	8004f7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dd06      	ble.n	8004c34 <xTraceDiagnosticsCheckStatus+0x5c>
	{
		xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 8004c26:	200a      	movs	r0, #10
 8004c28:	f000 f9a8 	bl	8004f7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2200      	movs	r2, #0
 8004c32:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dd06      	ble.n	8004c4c <xTraceDiagnosticsCheckStatus+0x74>
	{
		xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 8004c3e:	200e      	movs	r0, #14
 8004c40:	f000 f99c 	bl	8004f7c <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <xTraceDiagnosticsCheckStatus+0x80>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200038fc 	.word	0x200038fc
 8004c58:	20001a54 	.word	0x20001a54

08004c5c <xTraceEntryTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable;
static TraceEntryIndexTable_t xIndexTable;

traceResult xTraceEntryTableInitialize(TraceEntryTableBuffer_t *pxBuffer)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != 0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = (TraceEntryTable_t*)pxBuffer;
 8004c64:	4a28      	ldr	r2, [pc, #160]	; (8004d08 <xTraceEntryTableInitialize+0xac>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6013      	str	r3, [r2, #0]

	pxEntryTable->uiSlots = TRC_ENTRY_TABLE_SLOTS;
 8004c6a:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <xTraceEntryTableInitialize+0xac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2232      	movs	r2, #50	; 0x32
 8004c70:	601a      	str	r2, [r3, #0]
	pxEntryTable->uiEntrySymbolLength = TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE;
 8004c72:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <xTraceEntryTableInitialize+0xac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2220      	movs	r2, #32
 8004c78:	605a      	str	r2, [r3, #4]
	pxEntryTable->uiEntryStateCount = TRC_ENTRY_TABLE_STATE_COUNT;
 8004c7a:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <xTraceEntryTableInitialize+0xac>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	609a      	str	r2, [r3, #8]

	for (i = 0; i < TRC_ENTRY_TABLE_SLOTS; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e02e      	b.n	8004ce6 <xTraceEntryTableInitialize+0x8a>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 8004c88:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <xTraceEntryTableInitialize+0xac>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2134      	movs	r1, #52	; 0x34
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	330c      	adds	r3, #12
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
		for (j = 0; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	e011      	b.n	8004cc6 <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = 0;
 8004ca2:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <xTraceEntryTableInitialize+0xac>)
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	609a      	str	r2, [r3, #8]
		for (j = 0; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d9ea      	bls.n	8004ca2 <xTraceEntryTableInitialize+0x46>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = 0;
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <xTraceEntryTableInitialize+0xac>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2134      	movs	r1, #52	; 0x34
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3320      	adds	r3, #32
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRC_ENTRY_TABLE_SLOTS; i++)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b31      	cmp	r3, #49	; 0x31
 8004cea:	d9cd      	bls.n	8004c88 <xTraceEntryTableInitialize+0x2c>
	}

	prvEntryIndexInitialize(&xIndexTable);
 8004cec:	4807      	ldr	r0, [pc, #28]	; (8004d0c <xTraceEntryTableInitialize+0xb0>)
 8004cee:	f000 f8d9 	bl	8004ea4 <prvEntryIndexInitialize>

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <xTraceEntryTableInitialize+0xb4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f043 0310 	orr.w	r3, r3, #16
 8004cfa:	4a05      	ldr	r2, [pc, #20]	; (8004d10 <xTraceEntryTableInitialize+0xb4>)
 8004cfc:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20001a58 	.word	0x20001a58
 8004d0c:	20001a5c 	.word	0x20001a5c
 8004d10:	200038fc 	.word	0x200038fc

08004d14 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY))
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <xTraceEntryCreate+0xb8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <xTraceEntryCreate+0x18>
	{
		return TRC_FAIL;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e04a      	b.n	8004dc2 <xTraceEntryCreate+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d30:	617b      	str	r3, [r7, #20]
  return(result);
 8004d32:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != 0);

	TRACE_ENTER_CRITICAL_SECTION();
 8004d34:	623b      	str	r3, [r7, #32]
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	bf00      	nop

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 8004d42:	f107 030b 	add.w	r3, r7, #11
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f8cc 	bl	8004ee4 <prvEntryIndexTake>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <xTraceEntryCreate+0x54>
	{
		xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7ff ff14 	bl	8004b80 <xTraceDiagnosticsIncrease>
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	bf00      	nop

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e02c      	b.n	8004dc2 <xTraceEntryCreate+0xae>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 8004d68:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <xTraceEntryCreate+0xbc>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	2334      	movs	r3, #52	; 0x34
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	3308      	adds	r3, #8
 8004d78:	4413      	add	r3, r2
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	601a      	str	r2, [r3, #0]

	for (i = 0; i < TRC_ENTRY_TABLE_STATE_COUNT; i++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	e008      	b.n	8004d9c <xTraceEntryCreate+0x88>
	{
		pxEntry->xStates[i] = 0;
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	605a      	str	r2, [r3, #4]
	for (i = 0; i < TRC_ENTRY_TABLE_STATE_COUNT; i++)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	3301      	adds	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d9f3      	bls.n	8004d8a <xTraceEntryCreate+0x76>
	}

	pxEntry->uiOptions = 0;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2200      	movs	r2, #0
 8004da6:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = 0;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2200      	movs	r2, #0
 8004dac:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f383 8810 	msr	PRIMASK, r3
}
 8004dbe:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	200038fc 	.word	0x200038fc
 8004dd0:	20001a58 	.word	0x20001a58

08004dd4 <xTraceEntrySetSymbol>:

	return TRC_FAIL;
}

traceResult xTraceEntrySetSymbol(TraceEntryHandle_t xEntryHandle, const char* szSymbol)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
	uint32_t i;

	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == 0)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <xTraceEntrySetSymbol+0x14>
	{
		szSymbol = "";
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <xTraceEntrySetSymbol+0x78>)
 8004de6:	603b      	str	r3, [r7, #0]

	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle));

	for (i = 0; i < (TRC_ENTRY_TABLE_SYMBOL_LENGTH); i++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e012      	b.n	8004e14 <xTraceEntrySetSymbol+0x40>
	{
		((TraceEntry_t*)xEntryHandle)->szSymbol[i] = szSymbol[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	7819      	ldrb	r1, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	460a      	mov	r2, r1
 8004e00:	701a      	strb	r2, [r3, #0]

		if (szSymbol[i] == 0)
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <xTraceEntrySetSymbol+0x48>
	for (i = 0; i < (TRC_ENTRY_TABLE_SYMBOL_LENGTH); i++)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b1f      	cmp	r3, #31
 8004e18:	d9e9      	bls.n	8004dee <xTraceEntrySetSymbol+0x1a>
 8004e1a:	e004      	b.n	8004e26 <xTraceEntrySetSymbol+0x52>
		{
			break;
 8004e1c:	bf00      	nop
		}
	}

	/* Check the length of "name", if longer than TRC_ENTRY_TABLE_SYMBOL_LENGTH */
	while ((szSymbol[i] != 0) && i < 128)
 8004e1e:	e002      	b.n	8004e26 <xTraceEntrySetSymbol+0x52>
	{
		i++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
	while ((szSymbol[i] != 0) && i < 128)
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <xTraceEntrySetSymbol+0x64>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b7f      	cmp	r3, #127	; 0x7f
 8004e36:	d9f3      	bls.n	8004e20 <xTraceEntrySetSymbol+0x4c>
	}

	/* Remember the longest symbol name */
	xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, i);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7ff feaf 	bl	8004ba0 <xTraceDiagnosticsSetIfHigher>

	return TRC_SUCCESS;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	08007a44 	.word	0x08007a44

08004e50 <xTraceEntryGetCount>:

traceResult xTraceEntryGetCount(uint32_t* puiCount)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	/* This should never fail */
	TRC_ASSERT(puiCount != 0);

	*puiCount = TRC_ENTRY_TABLE_SLOTS - GET_FREE_INDEX_COUNT();
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <xTraceEntryGetCount+0x20>)
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5c:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	20001a5c 	.word	0x20001a5c

08004e74 <xTraceEntryGetAtIndex>:

traceResult xTraceEntryGetAtIndex(uint32_t index, TraceEntryHandle_t* pxEntryHandle)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(index < TRC_ENTRY_TABLE_SLOTS);

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != 0);

	*pxEntryHandle = (TraceEntryHandle_t)((uint32_t)(pxEntryTable->axEntries) + (index * sizeof(TraceEntry_t)));
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <xTraceEntryGetAtIndex+0x2c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	4619      	mov	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2234      	movs	r2, #52	; 0x34
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	18ca      	adds	r2, r1, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	20001a58 	.word	0x20001a58

08004ea4 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

traceResult prvEntryIndexInitialize(TraceEntryIndexTable_t* pxIndexTable)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < TRC_ENTRY_TABLE_SLOTS; i++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e009      	b.n	8004ec6 <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	b2d9      	uxtb	r1, r3
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRC_ENTRY_TABLE_SLOTS; i++)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b31      	cmp	r3, #49	; 0x31
 8004eca:	d9f2      	bls.n	8004eb2 <prvEntryIndexInitialize+0xe>
	}

	xIndexTable.uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <prvEntryIndexInitialize+0x3c>)
 8004ece:	2232      	movs	r2, #50	; 0x32
 8004ed0:	635a      	str	r2, [r3, #52]	; 0x34

	return TRC_SUCCESS;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20001a5c 	.word	0x20001a5c

08004ee4 <prvEntryIndexTake>:

traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (xIndexTable.uiFreeIndexCount == 0)
 8004eec:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <prvEntryIndexTake+0x14>
	{
		return TRC_FAIL;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e016      	b.n	8004f26 <prvEntryIndexTake+0x42>
	}

	/* Always take the first item */
	xIndex = xIndexTable.axFreeIndexes[0];
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	73fb      	strb	r3, [r7, #15]
	xIndexTable.uiFreeIndexCount--;
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	3b01      	subs	r3, #1
 8004f04:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004f06:	6353      	str	r3, [r2, #52]	; 0x34

	/* Move the last item to the first slot, to avoid holes */
	xIndexTable.axFreeIndexes[0] = xIndexTable.axFreeIndexes[xIndexTable.uiFreeIndexCount];
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0c:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004f0e:	5cd2      	ldrb	r2, [r2, r3]
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004f12:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	xIndexTable.axFreeIndexes[xIndexTable.uiFreeIndexCount] = UINT16_MAX;
#else
	xIndexTable.axFreeIndexes[xIndexTable.uiFreeIndexCount] = UINT8_MAX;
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f18:	4a05      	ldr	r2, [pc, #20]	; (8004f30 <prvEntryIndexTake+0x4c>)
 8004f1a:	21ff      	movs	r1, #255	; 0xff
 8004f1c:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7bfa      	ldrb	r2, [r7, #15]
 8004f22:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	20001a5c 	.word	0x20001a5c

08004f34 <xTraceErrorInitialize>:
} TraceErrorInfo_t;

static TraceErrorInfo_t* pxErrorInfo;

traceResult xTraceErrorInitialize(TraceErrorBuffer_t* pxBuffer)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceErrorBuffer_t, TraceErrorInfo_t);

	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxErrorInfo = (TraceErrorInfo_t*)pxBuffer;
 8004f3c:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <xTraceErrorInitialize+0x40>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0;
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <xTraceErrorInitialize+0x40>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0;
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <xTraceErrorInitialize+0x40>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <xTraceErrorInitialize+0x40>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <xTraceErrorInitialize+0x44>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f043 0320 	orr.w	r3, r3, #32
 8004f62:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <xTraceErrorInitialize+0x44>)
 8004f64:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20001a94 	.word	0x20001a94
 8004f78:	200038fc 	.word	0x200038fc

08004f7c <xTraceWarning>:

/* Called on warnings, when the recording can continue. */
traceResult xTraceWarning(uint32_t uiErrorCode)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR))
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <xTraceWarning+0x58>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <xTraceWarning+0x18>
	{
		/* If not initialized */
		return TRC_FAIL;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e01b      	b.n	8004fcc <xTraceWarning+0x50>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0)
 8004f94:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <xTraceWarning+0x5c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	3a01      	subs	r2, #1
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <xTraceWarning+0x4e>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <xTraceWarning+0x5c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <xTraceWarning+0x5c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

		prvTraceErrorPrint(uiErrorCode);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f849 	bl	800505c <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	200038fc 	.word	0x200038fc
 8004fd8:	20001a94 	.word	0x20001a94

08004fdc <xTraceError>:

/* Called on critical errors in the recorder. Stops the recorder! */
traceResult xTraceError(uint32_t uiErrorCode)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR))
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <xTraceError+0x74>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <xTraceError+0x18>
	{
		return TRC_FAIL;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e029      	b.n	8005048 <xTraceError+0x6c>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 8004ff4:	4b17      	ldr	r3, [pc, #92]	; (8005054 <xTraceError+0x78>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d123      	bne.n	8005046 <xTraceError+0x6a>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <xTraceError+0x78>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3b01      	subs	r3, #1
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	4619      	mov	r1, r3
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <xTraceError+0x78>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <xTraceError+0x78>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f81b 	bl	800505c <prvTraceErrorPrint>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d103      	bne.n	8005034 <xTraceError+0x58>
		{
			xTraceDisable();
 800502c:	f001 f9c4 	bl	80063b8 <xTraceDisable>
			
			return TRC_FAIL;
 8005030:	2301      	movs	r3, #1
 8005032:	e009      	b.n	8005048 <xTraceError+0x6c>
		}
		
		xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <xTraceError+0x78>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4907      	ldr	r1, [pc, #28]	; (8005058 <xTraceError+0x7c>)
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fd77 	bl	8005b30 <xTracePrint>
		xTraceDisable();
 8005042:	f001 f9b9 	bl	80063b8 <xTraceDisable>
	}

	return TRC_SUCCESS;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	200038fc 	.word	0x200038fc
 8005054:	20001a94 	.word	0x20001a94
 8005058:	08007a48 	.word	0x08007a48

0800505c <prvTraceErrorPrint>:
	return TRC_SUCCESS;
}

/* Returns the error or warning, as a string, or NULL if none. */
traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	const char* szDesc;
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <prvTraceErrorPrint+0x80>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10b      	bne.n	8005086 <prvTraceErrorPrint+0x2a>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <prvTraceErrorPrint+0x80>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	4619      	mov	r1, r3
 8005076:	481a      	ldr	r0, [pc, #104]	; (80050e0 <prvTraceErrorPrint+0x84>)
 8005078:	f001 fbce 	bl	8006818 <xTraceStringRegister>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <prvTraceErrorPrint+0x2a>
		{
			return TRC_FAIL;
 8005082:	2301      	movs	r3, #1
 8005084:	e025      	b.n	80050d2 <prvTraceErrorPrint+0x76>
		}
	}

	prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 8005086:	f107 0314 	add.w	r3, r7, #20
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f82b 	bl	80050e8 <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d011      	beq.n	80050bc <prvTraceErrorPrint+0x60>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <prvTraceErrorPrint+0x64>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3b02      	subs	r3, #2
 80050a2:	2b0c      	cmp	r3, #12
 80050a4:	d80c      	bhi.n	80050c0 <prvTraceErrorPrint+0x64>
	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 80050a6:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <prvTraceErrorPrint+0x80>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fd3d 	bl	8005b30 <xTracePrint>
		break;
 80050b6:	bf00      	nop
		xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
		
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e00a      	b.n	80050d2 <prvTraceErrorPrint+0x76>
				return TRC_FAIL;
 80050bc:	2301      	movs	r3, #1
 80050be:	e008      	b.n	80050d2 <prvTraceErrorPrint+0x76>
		xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <prvTraceErrorPrint+0x80>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4906      	ldr	r1, [pc, #24]	; (80050e4 <prvTraceErrorPrint+0x88>)
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fd68 	bl	8005ba0 <xTracePrintF>
		return TRC_FAIL;
 80050d0:	2301      	movs	r3, #1
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20001a94 	.word	0x20001a94
 80050e0:	08007a70 	.word	0x08007a70
 80050e4:	08007a78 	.word	0x08007a78

080050e8 <prvTraceErrorGetDescription>:

/* Returns the error or warning, as a string, or NULL if none. */
traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b0e      	cmp	r3, #14
 80050f6:	d85b      	bhi.n	80051b0 <prvTraceErrorGetDescription+0xc8>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <prvTraceErrorGetDescription+0x18>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	0800513d 	.word	0x0800513d
 8005104:	080051a9 	.word	0x080051a9
 8005108:	08005181 	.word	0x08005181
 800510c:	08005189 	.word	0x08005189
 8005110:	08005191 	.word	0x08005191
 8005114:	08005199 	.word	0x08005199
 8005118:	080051a1 	.word	0x080051a1
 800511c:	08005179 	.word	0x08005179
 8005120:	08005141 	.word	0x08005141
 8005124:	08005149 	.word	0x08005149
 8005128:	08005151 	.word	0x08005151
 800512c:	08005159 	.word	0x08005159
 8005130:	08005161 	.word	0x08005161
 8005134:	08005169 	.word	0x08005169
 8005138:	08005171 	.word	0x08005171
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 800513c:	2301      	movs	r3, #1
 800513e:	e03c      	b.n	80051ba <prvTraceErrorGetDescription+0xd2>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There was not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by NoRoomForSymbol. Inspect this
		variable and increase TRC_CFG_ENTRY_TABLE_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_TABLE_SLOTS";
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <prvTraceErrorGetDescription+0xdc>)
 8005144:	601a      	str	r2, [r3, #0]
		break;
 8005146:	e037      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <prvTraceErrorGetDescription+0xe0>)
 800514c:	601a      	str	r2, [r3, #0]
		break;
 800514e:	e033      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <prvTraceErrorGetDescription+0xe4>)
 8005154:	601a      	str	r2, [r3, #0]
		break;
 8005156:	e02f      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <prvTraceErrorGetDescription+0xe8>)
 800515c:	601a      	str	r2, [r3, #0]
		break;
 800515e:	e02b      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <prvTraceErrorGetDescription+0xec>)
 8005164:	601a      	str	r2, [r3, #0]
		break;
 8005166:	e027      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <prvTraceErrorGetDescription+0xf0>)
 800516c:	601a      	str	r2, [r3, #0]
		break;
 800516e:	e023      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <prvTraceErrorGetDescription+0xf4>)
 8005174:	601a      	str	r2, [r3, #0]
		break;
 8005176:	e01f      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4a16      	ldr	r2, [pc, #88]	; (80051d4 <prvTraceErrorGetDescription+0xec>)
 800517c:	601a      	str	r2, [r3, #0]
		break;
 800517e:	e01b      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <prvTraceErrorGetDescription+0xf8>)
 8005184:	601a      	str	r2, [r3, #0]
		break;
 8005186:	e017      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <prvTraceErrorGetDescription+0xfc>)
 800518c:	601a      	str	r2, [r3, #0]
		break;
 800518e:	e013      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <prvTraceErrorGetDescription+0x100>)
 8005194:	601a      	str	r2, [r3, #0]
		break;
 8005196:	e00f      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4a14      	ldr	r2, [pc, #80]	; (80051ec <prvTraceErrorGetDescription+0x104>)
 800519c:	601a      	str	r2, [r3, #0]
		break;
 800519e:	e00b      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <prvTraceErrorGetDescription+0x108>)
 80051a4:	601a      	str	r2, [r3, #0]
		break;
 80051a6:	e007      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <prvTraceErrorGetDescription+0x10c>)
 80051ac:	601a      	str	r2, [r3, #0]
		break;
 80051ae:	e003      	b.n	80051b8 <prvTraceErrorGetDescription+0xd0>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4a11      	ldr	r2, [pc, #68]	; (80051f8 <prvTraceErrorGetDescription+0x110>)
 80051b4:	601a      	str	r2, [r3, #0]
		break;
 80051b6:	bf00      	nop
	}

	return TRC_SUCCESS;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	08007a94 	.word	0x08007a94
 80051c8:	08007ab8 	.word	0x08007ab8
 80051cc:	08007ae4 	.word	0x08007ae4
 80051d0:	08007af8 	.word	0x08007af8
 80051d4:	08007b24 	.word	0x08007b24
 80051d8:	08007b50 	.word	0x08007b50
 80051dc:	08007b6c 	.word	0x08007b6c
 80051e0:	08007b8c 	.word	0x08007b8c
 80051e4:	08007ba0 	.word	0x08007ba0
 80051e8:	08007bb8 	.word	0x08007bb8
 80051ec:	08007bcc 	.word	0x08007bcc
 80051f0:	08007be8 	.word	0x08007be8
 80051f4:	08007c00 	.word	0x08007c00
 80051f8:	08007a78 	.word	0x08007a78

080051fc <xTraceEventInitialize>:
int32_t DUMMY_iTraceBytesCommitted;

TRACE_ALLOC_CRITICAL_SECTION();

traceResult xTraceEventInitialize(TraceEventDataBuffer_t* pxBuffer)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceEventDataBuffer_t, TraceEventDataTable_t);

	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxTraceEventDataTable = (TraceEventDataTable_t*)pxBuffer;
 8005204:	4a24      	ldr	r2, [pc, #144]	; (8005298 <xTraceEventInitialize+0x9c>)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6013      	str	r3, [r2, #0]

	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e034      	b.n	800527a <xTraceEventInitialize+0x7e>
	{
		pxCoreEventData = &pxTraceEventDataTable->coreEventData[i];
 8005210:	4b21      	ldr	r3, [pc, #132]	; (8005298 <xTraceEventInitialize+0x9c>)
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	440b      	add	r3, r1
 8005220:	60fb      	str	r3, [r7, #12]

		pxCoreEventData->eventCounter = 0;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	66da      	str	r2, [r3, #108]	; 0x6c

		for (j = 0; j < (TRC_CFG_MAX_ISR_NESTING) + 1; j++)
 8005228:	2300      	movs	r3, #0
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	e01f      	b.n	800526e <xTraceEventInitialize+0x72>
		{
			RESET_EVENT_DATA(&pxCoreEventData->eventData[j]);
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4613      	mov	r3, r2
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	3304      	adds	r3, #4
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	3308      	adds	r3, #8
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
		for (j = 0; j < (TRC_CFG_MAX_ISR_NESTING) + 1; j++)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	3301      	adds	r3, #1
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b08      	cmp	r3, #8
 8005272:	d9dc      	bls.n	800522e <xTraceEventInitialize+0x32>
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3301      	adds	r3, #1
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0c7      	beq.n	8005210 <xTraceEventInitialize+0x14>
		}
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <xTraceEventInitialize+0xa0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <xTraceEventInitialize+0xa0>)
 800528a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	20001a98 	.word	0x20001a98
 800529c:	200038fc 	.word	0x200038fc

080052a0 <xTraceEventBeginRawOffline>:

traceResult xTraceEventBeginRawOffline(uint32_t uiSize, TraceEventHandle_t* pxEventHandle)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	TraceEventData_t* pxEventData;
	int32_t ISR_nesting;

	/* We need to check this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_EVENT))
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <xTraceEventBeginRawOffline+0x9c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <xTraceEventBeginRawOffline+0x1a>
	{
		return TRC_FAIL;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e03b      	b.n	8005332 <xTraceEventBeginRawOffline+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	60fb      	str	r3, [r7, #12]
  return(result);
 80052c0:	68fb      	ldr	r3, [r7, #12]
	}

	/* This should never fail */
	TRC_ASSERT(pxEventHandle != 0);

	TRACE_ENTER_CRITICAL_SECTION();
 80052c2:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <xTraceEventBeginRawOffline+0xa0>)
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	2301      	movs	r3, #1
 80052c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f383 8810 	msr	PRIMASK, r3
}
 80052d0:	bf00      	nop

	xTraceISRGetCurrentNesting(&ISR_nesting);
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <xTraceEventBeginRawOffline+0xa4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	60bb      	str	r3, [r7, #8]

	/* We add 1 since xTraceISRGetCurrentNesting(...) returns -1 if no ISR is active */
	pxEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventData[ISR_nesting + 1];
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <xTraceEventBeginRawOffline+0xa8>)
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	4613      	mov	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	617b      	str	r3, [r7, #20]

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob == 0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	VERIFY_EVENT_SIZE(uiSize);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d907      	bls.n	8005304 <xTraceEventBeginRawOffline+0x64>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3b40      	subs	r3, #64	; 0x40
 80052f8:	4619      	mov	r1, r3
 80052fa:	2002      	movs	r0, #2
 80052fc:	f7ff fc50 	bl	8004ba0 <xTraceDiagnosticsSetIfHigher>
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	607b      	str	r3, [r7, #4]

	pxEventData->size = ((uiSize + (sizeof(uint32_t) - 1)) / sizeof(uint32_t)) * sizeof(uint32_t);	/* 4-byte align */
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3303      	adds	r3, #3
 8005308:	f023 0203 	bic.w	r2, r3, #3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	605a      	str	r2, [r3, #4]

	pxEventData->offset = 0;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]

	/* This can fail and we should handle it */
	if (xTraceStreamPortAllocate(pxEventData->size, &pxEventData->pvBlob) == TRC_FAIL)
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <xTraceEventBeginRawOffline+0xac>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <xTraceEventBeginRawOffline+0xa4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	3301      	adds	r3, #1
 8005322:	019b      	lsls	r3, r3, #6
 8005324:	441a      	add	r2, r3
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	601a      	str	r2, [r3, #0]
	{
		TRACE_EXIT_CRITICAL_SECTION();
		return TRC_FAIL;
	}

	*pxEventHandle = (TraceEventHandle_t)pxEventData;
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200038fc 	.word	0x200038fc
 8005340:	20001a9c 	.word	0x20001a9c
 8005344:	20001aa0 	.word	0x20001aa0
 8005348:	20001a98 	.word	0x20001a98
 800534c:	20002b10 	.word	0x20002b10

08005350 <xTraceEventBeginRawOfflineBlocking>:

traceResult xTraceEventBeginRawOfflineBlocking(uint32_t uiSize, TraceEventHandle_t* pxEventHandle)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
	TraceEventData_t* pxEventData;
	int32_t ISR_nesting;
	uint32_t uiAttempts = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]

	/* We need to check this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_EVENT))
 800535e:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <xTraceEventBeginRawOfflineBlocking+0xa0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <xTraceEventBeginRawOfflineBlocking+0x1e>
	{
		return TRC_FAIL;
 800536a:	2301      	movs	r3, #1
 800536c:	e03c      	b.n	80053e8 <xTraceEventBeginRawOfflineBlocking+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8310 	mrs	r3, PRIMASK
 8005372:	613b      	str	r3, [r7, #16]
  return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
	}

	/* This should never fail */
	TRC_ASSERT(pxEventHandle != 0);

	TRACE_ENTER_CRITICAL_SECTION();
 8005376:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <xTraceEventBeginRawOfflineBlocking+0xa4>)
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	2301      	movs	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	bf00      	nop

	xTraceGetCurrentISRNesting(&ISR_nesting);
 8005386:	4b1c      	ldr	r3, [pc, #112]	; (80053f8 <xTraceEventBeginRawOfflineBlocking+0xa8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	60fb      	str	r3, [r7, #12]

	/* We add 1 since xTraceISRGetCurrentNesting(...) returns -1 if no ISR is active */
	pxEventData = &pxTraceEventDataTable->coreEventData[TRC_CFG_GET_CURRENT_CORE()].eventData[ISR_nesting + 1];
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <xTraceEventBeginRawOfflineBlocking+0xac>)
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	61bb      	str	r3, [r7, #24]

	/* This should never fail */
	TRC_ASSERT_CUSTOM_ON_FAIL(pxEventData->pvBlob == 0, TRACE_EXIT_CRITICAL_SECTION(); return TRC_FAIL; );

	VERIFY_EVENT_SIZE(uiSize);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d907      	bls.n	80053b8 <xTraceEventBeginRawOfflineBlocking+0x68>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3b40      	subs	r3, #64	; 0x40
 80053ac:	4619      	mov	r1, r3
 80053ae:	2002      	movs	r0, #2
 80053b0:	f7ff fbf6 	bl	8004ba0 <xTraceDiagnosticsSetIfHigher>
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	607b      	str	r3, [r7, #4]

	pxEventData->size = ((uiSize + (sizeof(uint32_t) - 1)) / sizeof(uint32_t)) * sizeof(uint32_t);	/* 4-byte align */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3303      	adds	r3, #3
 80053bc:	f023 0203 	bic.w	r2, r3, #3
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	605a      	str	r2, [r3, #4]

	pxEventData->offset = 0;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2200      	movs	r2, #0
 80053c8:	609a      	str	r2, [r3, #8]

	/* This can fail and we should handle it */
	while (xTraceStreamPortAllocate(pxEventData->size, &pxEventData->pvBlob) != TRC_SUCCESS)
 80053ca:	bf00      	nop
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <xTraceEventBeginRawOfflineBlocking+0xb0>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <xTraceEventBeginRawOfflineBlocking+0xa8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	3301      	adds	r3, #1
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	441a      	add	r2, r3
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	601a      	str	r2, [r3, #0]
	{
		uiAttempts++;
	}

	*pxEventHandle = (TraceEventHandle_t)pxEventData;
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	200038fc 	.word	0x200038fc
 80053f4:	20001a9c 	.word	0x20001a9c
 80053f8:	20001aa0 	.word	0x20001aa0
 80053fc:	20001a98 	.word	0x20001a98
 8005400:	20002b10 	.word	0x20002b10

08005404 <xTraceEventEndOffline>:

traceResult xTraceEventEndOffline(TraceEventHandle_t xEventHandle)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(xEventHandle != 0);

	/* This should never fail */
	TRC_ASSERT(((TraceEventData_t*)xEventHandle)->pvBlob != 0);

	xTraceStreamPortCommit(((TraceEventData_t*)xEventHandle)->pvBlob, ((TraceEventData_t*)xEventHandle)->size, &iBytesCommitted);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f107 0208 	add.w	r2, r7, #8
 8005418:	4619      	mov	r1, r3
 800541a:	f7ff fac7 	bl	80049ac <prvTraceItmWrite>

	RESET_EVENT_DATA((TraceEventData_t*)xEventHandle);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	609a      	str	r2, [r3, #8]

	TRACE_EXIT_CRITICAL_SECTION();
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <xTraceEventEndOffline+0x44>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f383 8810 	msr	PRIMASK, r3
}
 800543c:	bf00      	nop

	return TRC_SUCCESS;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20001a9c 	.word	0x20001a9c

0800544c <xTraceEventEndOfflineBlocking>:

traceResult xTraceEventEndOfflineBlocking(TraceEventHandle_t xEventHandle)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	TraceEventData_t* pxEventData = (TraceEventData_t*)xEventHandle;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	617b      	str	r3, [r7, #20]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_EVENT));

	/* This should never fail */
	TRC_ASSERT(pxEventData != 0);

	while (pxEventData->size > 0)
 8005458:	e016      	b.n	8005488 <xTraceEventEndOfflineBlocking+0x3c>
	{
		iBytesCommitted = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
		xTraceStreamPortCommit(pxEventData->pvBlob, pxEventData->size, &iBytesCommitted);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f107 020c 	add.w	r2, r7, #12
 800546a:	4619      	mov	r1, r3
 800546c:	f7ff fa9e 	bl	80049ac <prvTraceItmWrite>

		pxEventData->size -= iBytesCommitted;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	1a9a      	subs	r2, r3, r2
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	605a      	str	r2, [r3, #4]
		pxEventData->pvBlob = ((uint8_t*)pxEventData->pvBlob) + iBytesCommitted;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	441a      	add	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	601a      	str	r2, [r3, #0]
	while (pxEventData->size > 0)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e4      	bne.n	800545a <xTraceEventEndOfflineBlocking+0xe>
	}

	RESET_EVENT_DATA(pxEventData);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]

	TRACE_EXIT_CRITICAL_SECTION();
 80054a2:	4b06      	ldr	r3, [pc, #24]	; (80054bc <xTraceEventEndOfflineBlocking+0x70>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f383 8810 	msr	PRIMASK, r3
}
 80054ae:	bf00      	nop

	return TRC_SUCCESS;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20001a9c 	.word	0x20001a9c

080054c0 <xTraceEventAddData>:

traceResult xTraceEventAddData(TraceEventHandle_t xEventHandle, void* pvData, uint32_t uiSize)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
	TRC_ASSERT(pvData != 0);

	/* This should never fail */
	TRC_ASSERT(((TraceEventData_t*)xEventHandle)->offset + uiSize <= ((TraceEventData_t*)xEventHandle)->size);

	for (i = 0; i < uiSize; i++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e011      	b.n	80054f6 <xTraceEventAddData+0x36>
	{
		TRC_EVENT_ADD_8(xEventHandle, ((uint8_t*)pvData)[i]);
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	441a      	add	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6819      	ldr	r1, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	440b      	add	r3, r1
 80054e2:	7812      	ldrb	r2, [r2, #0]
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3201      	adds	r2, #1
 80054ee:	609a      	str	r2, [r3, #8]
	for (i = 0; i < uiSize; i++)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d3e9      	bcc.n	80054d2 <xTraceEventAddData+0x12>
	}

	return TRC_SUCCESS;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
	...

0800550c <xTraceHardwarePortInitCortexM>:
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK

void xTraceHardwarePortInitCortexM()
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <xTraceHardwarePortInitCortexM+0x54>)
 8005512:	4a14      	ldr	r2, [pc, #80]	; (8005564 <xTraceHardwarePortInitCortexM+0x58>)
 8005514:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <xTraceHardwarePortInitCortexM+0x5c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a13      	ldr	r2, [pc, #76]	; (8005568 <xTraceHardwarePortInitCortexM+0x5c>)
 800551c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005520:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <xTraceHardwarePortInitCortexM+0x5c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_NOT_SUPPORTED);
 800552a:	2004      	movs	r0, #4
 800552c:	f7ff fd56 	bl	8004fdc <xTraceError>
			break;
 8005530:	e013      	b.n	800555a <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8005532:	4b0e      	ldr	r3, [pc, #56]	; (800556c <xTraceHardwarePortInitCortexM+0x60>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 800553e:	2005      	movs	r0, #5
 8005540:	f7ff fd4c 	bl	8004fdc <xTraceError>
			break;
 8005544:	e009      	b.n	800555a <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <xTraceHardwarePortInitCortexM+0x64>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 800554c:	4b07      	ldr	r3, [pc, #28]	; (800556c <xTraceHardwarePortInitCortexM+0x60>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a06      	ldr	r2, [pc, #24]	; (800556c <xTraceHardwarePortInitCortexM+0x60>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6013      	str	r3, [r2, #0]

	} while (0);	/* breaks above jump here */
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	e0001fb0 	.word	0xe0001fb0
 8005564:	c5acce55 	.word	0xc5acce55
 8005568:	e000edfc 	.word	0xe000edfc
 800556c:	e0001000 	.word	0xe0001000
 8005570:	e0001004 	.word	0xe0001004

08005574 <xTraceHeapCreate>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

#if (TRC_USE_HEAPS == 1)

traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	; 0x30
 8005578:	af04      	add	r7, sp, #16
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	617b      	str	r3, [r7, #20]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	61bb      	str	r3, [r7, #24]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	61fb      	str	r3, [r7, #28]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, 0, szName, 3, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2303      	movs	r3, #3
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	2100      	movs	r1, #0
 80055a4:	20f2      	movs	r0, #242	; 0xf2
 80055a6:	f000 f8bd 	bl	8005724 <xTraceObjectRegisterInternal>
 80055aa:	4603      	mov	r3, r0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <xTraceISRInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRInfo_t* pxTraceISRInfo;

traceResult xTraceISRInitialize(TraceISRInfoBuffer_t *pxBuffer)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceISRInfoBuffer_t, TraceISRInfo_t);

	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxTraceISRInfo = (TraceISRInfo_t*)pxBuffer;
 80055bc:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <xTraceISRInitialize+0x74>)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6013      	str	r3, [r2, #0]

	for (uiCoreIndex = 0; uiCoreIndex < (TRC_CFG_CORE_COUNT); uiCoreIndex++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e020      	b.n	800560a <xTraceISRInitialize+0x56>
	{
		TraceISRCoreInfo_t* pxCoreInfo = &pxTraceISRInfo->coreInfos[uiCoreIndex];
 80055c8:	4b17      	ldr	r3, [pc, #92]	; (8005628 <xTraceISRInitialize+0x74>)
 80055ca:	6819      	ldr	r1, [r3, #0]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0; uiStackIndex < (TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	e007      	b.n	80055f0 <xTraceISRInitialize+0x3c>
		{
			pxCoreInfo->handleStack[uiStackIndex] = 0;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	2100      	movs	r1, #0
 80055e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uiStackIndex = 0; uiStackIndex < (TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	3301      	adds	r3, #1
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b07      	cmp	r3, #7
 80055f4:	d9f4      	bls.n	80055e0 <xTraceISRInitialize+0x2c>
		}
		
		pxCoreInfo->stackIndex = -1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295
 80055fc:	621a      	str	r2, [r3, #32]
		pxCoreInfo->isPendingContextSwitch = 0;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	625a      	str	r2, [r3, #36]	; 0x24
	for (uiCoreIndex = 0; uiCoreIndex < (TRC_CFG_CORE_COUNT); uiCoreIndex++)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	3301      	adds	r3, #1
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0db      	beq.n	80055c8 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <xTraceISRInitialize+0x78>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <xTraceISRInitialize+0x78>)
 800561a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20001aa0 	.word	0x20001aa0
 800562c:	200038fc 	.word	0x200038fc

08005630 <xTraceKernelPortGetUnusedStack>:
#endif

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)

traceResult xTraceKernelPortGetUnusedStack(void* pvTask, TraceUnsignedBaseType_t* puxUnusedStack)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
	*puxUnusedStack = uxTaskGetStackHighWaterMark(pvTask);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fe f988 	bl	8003950 <uxTaskGetStackHighWaterMark>
 8005640:	4602      	mov	r2, r0
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 800565e:	2301      	movs	r3, #1
 8005660:	e00b      	b.n	800567a <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 8005662:	4a08      	ldr	r2, [pc, #32]	; (8005684 <xTraceKernelPortInitialize+0x34>)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6013      	str	r3, [r2, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <xTraceKernelPortInitialize+0x34>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 8005670:	4b04      	ldr	r3, [pc, #16]	; (8005684 <xTraceKernelPortInitialize+0x34>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	20002b00 	.word	0x20002b00

08005688 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b085      	sub	sp, #20
 800568c:	af04      	add	r7, sp, #16
	if (pxKernelPortData->xSystemHeapHandle == 0)
 800568e:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <xTraceKernelPortEnable+0x70>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <xTraceKernelPortEnable+0x24>
	{
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 8005698:	4b17      	ldr	r3, [pc, #92]	; (80056f8 <xTraceKernelPortEnable+0x70>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056a2:	2200      	movs	r2, #0
 80056a4:	2100      	movs	r1, #0
 80056a6:	4815      	ldr	r0, [pc, #84]	; (80056fc <xTraceKernelPortEnable+0x74>)
 80056a8:	f7ff ff64 	bl	8005574 <xTraceHeapCreate>
	}
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <xTraceKernelPortEnable+0x70>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d11a      	bne.n	80056ec <xTraceKernelPortEnable+0x64>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <xTraceKernelPortEnable+0x70>)
 80056b8:	681c      	ldr	r4, [r3, #0]
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <xTraceKernelPortEnable+0x78>)
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	4b11      	ldr	r3, [pc, #68]	; (8005704 <xTraceKernelPortEnable+0x7c>)
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	2301      	movs	r3, #1
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	2300      	movs	r3, #0
 80056c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056cc:	490e      	ldr	r1, [pc, #56]	; (8005708 <xTraceKernelPortEnable+0x80>)
 80056ce:	480f      	ldr	r0, [pc, #60]	; (800570c <xTraceKernelPortEnable+0x84>)
 80056d0:	f7fd fb5e 	bl	8002d90 <xTaskCreateStatic>
 80056d4:	4603      	mov	r3, r0
 80056d6:	6063      	str	r3, [r4, #4]
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <xTraceKernelPortEnable+0x70>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <xTraceKernelPortEnable+0x64>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 80056e2:	2006      	movs	r0, #6
 80056e4:	f7ff fc7a 	bl	8004fdc <xTraceError>

			return TRC_FAIL;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <xTraceKernelPortEnable+0x66>
		}
	}
	
	return TRC_SUCCESS;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3704      	adds	r7, #4
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd90      	pop	{r4, r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20002b00 	.word	0x20002b00
 80056fc:	08007c10 	.word	0x08007c10
 8005700:	20002aa4 	.word	0x20002aa4
 8005704:	20001aa4 	.word	0x20001aa4
 8005708:	08007c1c 	.word	0x08007c1c
 800570c:	08005711 	.word	0x08005711

08005710 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 8005718:	f000 fe56 	bl	80063c8 <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 800571c:	2002      	movs	r0, #2
 800571e:	f7fd fccf 	bl	80030c0 <vTaskDelay>
		xTraceTzCtrl();
 8005722:	e7f9      	b.n	8005718 <TzCtrl+0x8>

08005724 <xTraceObjectRegisterInternal>:
#endif

traceResult prvTraceObjectSendNameEvent(void* pvObject, const char* szName);

traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08e      	sub	sp, #56	; 0x38
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	TraceEventHandle_t xEventHandle = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	TRC_ASSERT(pxObjectHandle != 0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
 8005740:	2301      	movs	r3, #1
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	bf00      	nop

	if (pvObject != 0)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <xTraceObjectRegisterInternal+0x60>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 8005752:	f107 0318 	add.w	r3, r7, #24
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fadc 	bl	8004d14 <xTraceEntryCreate>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <xTraceObjectRegisterInternal+0x4a>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	461a      	mov	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	e000      	b.n	8005770 <xTraceObjectRegisterInternal+0x4c>
 800576e:	2301      	movs	r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01a      	beq.n	80057aa <xTraceObjectRegisterInternal+0x86>
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 8005780:	2301      	movs	r3, #1
 8005782:	e0d1      	b.n	8005928 <xTraceObjectRegisterInternal+0x204>
		}
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8005784:	f107 0318 	add.w	r3, r7, #24
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fac3 	bl	8004d14 <xTraceEntryCreate>
 800578e:	4603      	mov	r3, r0
 8005790:	2b01      	cmp	r3, #1
 8005792:	d107      	bne.n	80057a4 <xTraceObjectRegisterInternal+0x80>
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f383 8810 	msr	PRIMASK, r3
}
 800579e:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0c1      	b.n	8005928 <xTraceObjectRegisterInternal+0x204>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvObject) == TRC_SUCCESS);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]
	}

	for (i = 0; i < uxStateCount; i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
 80057ae:	e00d      	b.n	80057cc <xTraceObjectRegisterInternal+0xa8>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, i, uxStates[i]) == TRC_SUCCESS);
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b6:	4413      	add	r3, r2
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4611      	mov	r1, r2
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	605a      	str	r2, [r3, #4]
	for (i = 0; i < uxStateCount; i++)
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	3301      	adds	r3, #1
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
 80057cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d3ed      	bcc.n	80057b0 <xTraceObjectRegisterInternal+0x8c>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, uxOptions) == TRC_SUCCESS);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	4619      	mov	r1, r3
 80057dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f383 8810 	msr	PRIMASK, r3
}
 80057f2:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	if (szName != 0 && szName[0] != 0)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <xTraceObjectRegisterInternal+0xe8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <xTraceObjectRegisterInternal+0xe8>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f89c 	bl	8005944 <xTraceObjectSetName>
	}

	/* Send the create event, if possible */
	/*We need to check this */
	if (xTraceEventBegin(uiEventCode, sizeof(void*) + uxStateCount * sizeof(TraceUnsignedBaseType_t), &xEventHandle) == TRC_SUCCESS)
 800580c:	4b48      	ldr	r3, [pc, #288]	; (8005930 <xTraceObjectRegisterInternal+0x20c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4b48      	ldr	r3, [pc, #288]	; (8005934 <xTraceObjectRegisterInternal+0x210>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4013      	ands	r3, r2
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d047      	beq.n	80058b0 <xTraceObjectRegisterInternal+0x18c>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	3303      	adds	r3, #3
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	f107 0214 	add.w	r2, r7, #20
 800582a:	4611      	mov	r1, r2
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fd37 	bl	80052a0 <xTraceEventBeginRawOffline>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d139      	bne.n	80058ac <xTraceObjectRegisterInternal+0x188>
 8005838:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <xTraceObjectRegisterInternal+0x214>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800583e:	3201      	adds	r2, #1
 8005840:	66da      	str	r2, [r3, #108]	; 0x6c
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	b21a      	sxth	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	3b08      	subs	r3, #8
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	b29b      	uxth	r3, r3
 8005850:	031b      	lsls	r3, r3, #12
 8005852:	b21b      	sxth	r3, r3
 8005854:	4313      	orrs	r3, r2
 8005856:	b21a      	sxth	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b292      	uxth	r2, r2
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	4b35      	ldr	r3, [pc, #212]	; (8005938 <xTraceObjectRegisterInternal+0x214>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	b292      	uxth	r2, r2
 800586c:	805a      	strh	r2, [r3, #2]
 800586e:	4a33      	ldr	r2, [pc, #204]	; (800593c <xTraceObjectRegisterInternal+0x218>)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	4b30      	ldr	r3, [pc, #192]	; (8005940 <xTraceObjectRegisterInternal+0x21c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	429a      	cmp	r2, r3
 8005886:	d204      	bcs.n	8005892 <xTraceObjectRegisterInternal+0x16e>
 8005888:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <xTraceObjectRegisterInternal+0x21c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	3201      	adds	r2, #1
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <xTraceObjectRegisterInternal+0x21c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6852      	ldr	r2, [r2, #4]
 800589c:	615a      	str	r2, [r3, #20]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	3308      	adds	r3, #8
 80058a6:	6093      	str	r3, [r2, #8]
 80058a8:	2301      	movs	r3, #1
 80058aa:	e002      	b.n	80058b2 <xTraceObjectRegisterInternal+0x18e>
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <xTraceObjectRegisterInternal+0x18e>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d037      	beq.n	8005926 <xTraceObjectRegisterInternal+0x202>
	{
		xTraceEventAddPointer(xEventHandle, pvObject);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	3304      	adds	r3, #4
 80058d0:	6093      	str	r3, [r2, #8]
		for (i = 0; i < uxStateCount; i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
 80058d6:	e014      	b.n	8005902 <xTraceObjectRegisterInternal+0x1de>
		{
			xTraceEventAddUnsignedBaseType(xEventHandle, uxStates[i]);
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058de:	441a      	add	r2, r3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 0303 	bic.w	r3, r3, #3
 80058ec:	440b      	add	r3, r1
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	3304      	adds	r3, #4
 80058fa:	6093      	str	r3, [r2, #8]
		for (i = 0; i < uxStateCount; i++)
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	3301      	adds	r3, #1
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
 8005902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d3e6      	bcc.n	80058d8 <xTraceObjectRegisterInternal+0x1b4>
		}
		xTraceEventEnd(xEventHandle);
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <xTraceObjectRegisterInternal+0x20c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <xTraceObjectRegisterInternal+0x210>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4013      	ands	r3, r2
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <xTraceObjectRegisterInternal+0x202>
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fd6f 	bl	8005404 <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3738      	adds	r7, #56	; 0x38
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000010 	.word	0x20000010
 8005934:	200038fc 	.word	0x200038fc
 8005938:	20001a98 	.word	0x20001a98
 800593c:	e0001004 	.word	0xe0001004
 8005940:	20003904 	.word	0x20003904

08005944 <xTraceObjectSetName>:

	return xTraceEntryDelete(xObjectHandle);
}

traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	void* pvObject;

	if (szName == 0)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <xTraceObjectSetName+0x14>
	{
		szName = "";
 8005954:	4b09      	ldr	r3, [pc, #36]	; (800597c <xTraceObjectSetName+0x38>)
 8005956:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 0)
	/* Send name event now since we don't do it on delete events */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(prvTraceObjectSendNameEvent(pvObject, szName) == TRC_SUCCESS);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f80c 	bl	8005980 <prvTraceObjectSendNameEvent>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName);
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fa32 	bl	8004dd4 <xTraceEntrySetSymbol>
 8005970:	4603      	mov	r3, r0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	08007c24 	.word	0x08007c24

08005980 <prvTraceObjectSendNameEvent>:

	return xResult;
}

traceResult prvTraceObjectSendNameEvent(void* pvObject, const char* szName)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, uiLength = 0, uiValue = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
	TraceEventHandle_t xEventHandle = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]

	for (i = 0; (szName[i] != 0) && (i < (TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {}
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	e002      	b.n	80059a6 <prvTraceObjectSendNameEvent+0x26>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	3301      	adds	r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <prvTraceObjectSendNameEvent+0x38>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b1f      	cmp	r3, #31
 80059b6:	d9f3      	bls.n	80059a0 <prvTraceObjectSendNameEvent+0x20>

	uiLength = i;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	613b      	str	r3, [r7, #16]

	if (xTraceEventBegin(PSF_EVENT_OBJ_NAME, sizeof(void*) + uiLength, &xEventHandle) == TRC_SUCCESS)
 80059bc:	4b47      	ldr	r3, [pc, #284]	; (8005adc <prvTraceObjectSendNameEvent+0x15c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <prvTraceObjectSendNameEvent+0x160>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4013      	ands	r3, r2
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d045      	beq.n	8005a5c <prvTraceObjectSendNameEvent+0xdc>
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	330c      	adds	r3, #12
 80059d4:	f107 0208 	add.w	r2, r7, #8
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff fc60 	bl	80052a0 <xTraceEventBeginRawOffline>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d138      	bne.n	8005a58 <prvTraceObjectSendNameEvent+0xd8>
 80059e6:	4b3f      	ldr	r3, [pc, #252]	; (8005ae4 <prvTraceObjectSendNameEvent+0x164>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80059ec:	3201      	adds	r2, #1
 80059ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	3b08      	subs	r3, #8
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	031b      	lsls	r3, r3, #12
 80059fc:	b21b      	sxth	r3, r3
 80059fe:	f043 0303 	orr.w	r3, r3, #3
 8005a02:	b21a      	sxth	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	4b35      	ldr	r3, [pc, #212]	; (8005ae4 <prvTraceObjectSendNameEvent+0x164>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	b292      	uxth	r2, r2
 8005a18:	805a      	strh	r2, [r3, #2]
 8005a1a:	4a33      	ldr	r2, [pc, #204]	; (8005ae8 <prvTraceObjectSendNameEvent+0x168>)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	4b30      	ldr	r3, [pc, #192]	; (8005aec <prvTraceObjectSendNameEvent+0x16c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d204      	bcs.n	8005a3e <prvTraceObjectSendNameEvent+0xbe>
 8005a34:	4b2d      	ldr	r3, [pc, #180]	; (8005aec <prvTraceObjectSendNameEvent+0x16c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	3201      	adds	r2, #1
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b2a      	ldr	r3, [pc, #168]	; (8005aec <prvTraceObjectSendNameEvent+0x16c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6852      	ldr	r2, [r2, #4]
 8005a48:	615a      	str	r2, [r3, #20]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	3308      	adds	r3, #8
 8005a52:	6093      	str	r3, [r2, #8]
 8005a54:	2301      	movs	r3, #1
 8005a56:	e002      	b.n	8005a5e <prvTraceObjectSendNameEvent+0xde>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <prvTraceObjectSendNameEvent+0xde>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d036      	beq.n	8005ad0 <prvTraceObjectSendNameEvent+0x150>
	{
		xTraceEventAddPointer(xEventHandle, pvObject);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	6093      	str	r3, [r2, #8]
		xTraceEventAddData(xEventHandle, (void*)szName, uiLength);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fd1b 	bl	80054c0 <xTraceEventAddData>

		/* Check if we can truncate */
		xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	60fb      	str	r3, [r7, #12]
		if (uiValue > 0)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <prvTraceObjectSendNameEvent+0x134>
		{
			xTraceEventAdd8(xEventHandle, 0);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	6093      	str	r3, [r2, #8]
		}

		xTraceEventEnd(xEventHandle);
 8005ab4:	4b09      	ldr	r3, [pc, #36]	; (8005adc <prvTraceObjectSendNameEvent+0x15c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <prvTraceObjectSendNameEvent+0x160>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <prvTraceObjectSendNameEvent+0x150>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fc9a 	bl	8005404 <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000010 	.word	0x20000010
 8005ae0:	200038fc 	.word	0x200038fc
 8005ae4:	20001a98 	.word	0x20001a98
 8005ae8:	e0001004 	.word	0xe0001004
 8005aec:	20003904 	.word	0x20003904

08005af0 <xTracePrintInitialize>:
} TracePrintInfo_t;

static TracePrintInfo_t *pxPrintInfo;

traceResult xTracePrintInitialize(TracePrintBuffer_t *pxBuffer)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TracePrintBuffer_t, TracePrintInfo_t);
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxPrintInfo = (TracePrintInfo_t*)pxBuffer;
 8005af8:	4a0b      	ldr	r2, [pc, #44]	; (8005b28 <xTracePrintInitialize+0x38>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6013      	str	r3, [r2, #0]
	pxPrintInfo->defaultChannel = 0;
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <xTracePrintInitialize+0x38>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
	pxPrintInfo->consoleChannel = 0;
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <xTracePrintInitialize+0x38>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <xTracePrintInitialize+0x3c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b16:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <xTracePrintInitialize+0x3c>)
 8005b18:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20002b04 	.word	0x20002b04
 8005b2c:	200038fc 	.word	0x200038fc

08005b30 <xTracePrint>:
 *	 ...
 *	 xTracePrint(xChannel, "Hello World!");
 *
 ******************************************************************************/
traceResult xTracePrint(TraceStringHandle_t xChannel, const char* szString)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	uint32_t uiLength = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
	uint32_t i = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
	
	/* We need to check this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT))
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <xTracePrint+0x68>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xTracePrint+0x22>
	{
		return TRC_FAIL;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e01d      	b.n	8005b8e <xTracePrint+0x5e>
	}

	if (szString == 0)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <xTracePrint+0x34>
	{
		szString = "";
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <xTracePrint+0x6c>)
 8005b5a:	603b      	str	r3, [r7, #0]
	}
	
	while ((szString[i] != 0) && (i < 128))
 8005b5c:	e002      	b.n	8005b64 <xTracePrint+0x34>
	{
		i++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
	while ((szString[i] != 0) && (i < 128))
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <xTracePrint+0x46>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b7f      	cmp	r3, #127	; 0x7f
 8005b74:	d9f3      	bls.n	8005b5e <xTracePrint+0x2e>
	}

	uiLength = i + 1; /* Null termination */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60bb      	str	r3, [r7, #8]

	return prvTraceVPrintF(xChannel, szString, uiLength, 0, (va_list*)0);
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f880 	bl	8005c8c <prvTraceVPrintF>
 8005b8c:	4603      	mov	r3, r0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200038fc 	.word	0x200038fc
 8005b9c:	08007c28 	.word	0x08007c28

08005ba0 <xTracePrintF>:
 * one data argument, the maximum string length is 48 chars. If this is exceeded
 * the string is truncated (4 bytes at a time).
 *
 ******************************************************************************/
traceResult xTracePrintF(TraceStringHandle_t xChannel, const char* szFormat, ...)
{
 8005ba0:	b40e      	push	{r1, r2, r3}
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
	traceResult xResult;
	va_list xVL;

	/* We need to check this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT))
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <xTracePrintF+0x3c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <xTracePrintF+0x1a>
	{
		return TRC_FAIL;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e009      	b.n	8005bce <xTracePrintF+0x2e>
	}

	va_start(xVL, szFormat);
 8005bba:	f107 0320 	add.w	r3, r7, #32
 8005bbe:	60bb      	str	r3, [r7, #8]
	xResult = xTraceVPrintF(xChannel, szFormat, xVL);
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	69f9      	ldr	r1, [r7, #28]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f80b 	bl	8005be0 <xTraceVPrintF>
 8005bca:	60f8      	str	r0, [r7, #12]
	va_end(xVL);

	return xResult;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd8:	b003      	add	sp, #12
 8005bda:	4770      	bx	lr
 8005bdc:	200038fc 	.word	0x200038fc

08005be0 <xTraceVPrintF>:
 * xTracePrintF variant that accepts a va_list.
 * See xTraceVPrintF documentation for further details.
 *
 ******************************************************************************/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list xVL)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61fb      	str	r3, [r7, #28]
	uint32_t uiArgs = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61bb      	str	r3, [r7, #24]
	uint32_t uiLength;

	/* We need to check this */
	if (!xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT))
 8005bf4:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <xTraceVPrintF+0xa4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <xTraceVPrintF+0x24>
	{
		return TRC_FAIL;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e03b      	b.n	8005c7c <xTraceVPrintF+0x9c>
	}

	if (szFormat == 0)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <xTraceVPrintF+0x2e>
	{
		szFormat = "";
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <xTraceVPrintF+0xa8>)
 8005c0c:	60bb      	str	r3, [r7, #8]
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0; (szFormat[i] != 0) && (i < 128); i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e01e      	b.n	8005c52 <xTraceVPrintF+0x72>
	{
		if (szFormat[i] == '%')
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b25      	cmp	r3, #37	; 0x25
 8005c1e:	d115      	bne.n	8005c4c <xTraceVPrintF+0x6c>
		{
			if (szFormat[i + 1] == 0)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	3301      	adds	r3, #1
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	4413      	add	r3, r2
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <xTraceVPrintF+0x6a>
			{
				/* Found end of string, let for loop detect it */
				continue;
			}

			if (szFormat[i + 1] != '%')
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3301      	adds	r3, #1
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4413      	add	r3, r2
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b25      	cmp	r3, #37	; 0x25
 8005c3a:	d002      	beq.n	8005c42 <xTraceVPrintF+0x62>
			{
				uiArgs++;        /* Found an argument */
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
			}

			i++;      /* Move past format specifier or non-argument '%' */
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e000      	b.n	8005c4c <xTraceVPrintF+0x6c>
				continue;
 8005c4a:	bf00      	nop
	for (i = 0; (szFormat[i] != 0) && (i < 128); i++)
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <xTraceVPrintF+0x84>
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b7f      	cmp	r3, #127	; 0x7f
 8005c62:	d9d7      	bls.n	8005c14 <xTraceVPrintF+0x34>
		}
	}

	uiLength = i + 1; /* Null termination */
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]

	return prvTraceVPrintF(xChannel, szFormat, uiLength, uiArgs, &xVL);
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f809 	bl	8005c8c <prvTraceVPrintF>
 8005c7a:	4603      	mov	r3, r0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	200038fc 	.word	0x200038fc
 8005c88:	08007c28 	.word	0x08007c28

08005c8c <prvTraceVPrintF>:

static traceResult prvTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list *pxVL)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	TraceEventHandle_t xEventHandle = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61bb      	str	r3, [r7, #24]
	uint32_t i, uiRemaining;
	uint32_t uiValue;
	uint32_t uiEventCode = PSF_EVENT_USER_EVENT + 1 + uiArgs; /* Add channel (1) */
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3391      	adds	r3, #145	; 0x91
 8005ca2:	623b      	str	r3, [r7, #32]
	uint32_t uiSize = sizeof(void*) + uiArgs * sizeof(TraceUnsignedBaseType_t) + uiLength; /* Add channel (sizeof(void*)) */
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	61fb      	str	r3, [r7, #28]

	if (xChannel == 0)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d113      	bne.n	8005cde <prvTraceVPrintF+0x52>
	{
		if (pxPrintInfo->defaultChannel == 0)
 8005cb6:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <prvTraceVPrintF+0x1cc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <prvTraceVPrintF+0x4a>
		{
			/* Channel is not present */
			if (xTraceStringRegister("Default", &pxPrintInfo->defaultChannel) == TRC_FAIL)
 8005cc0:	4b65      	ldr	r3, [pc, #404]	; (8005e58 <prvTraceVPrintF+0x1cc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4865      	ldr	r0, [pc, #404]	; (8005e5c <prvTraceVPrintF+0x1d0>)
 8005cc8:	f000 fda6 	bl	8006818 <xTraceStringRegister>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <prvTraceVPrintF+0x4a>
			{
				return TRC_FAIL;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e0bb      	b.n	8005e4e <prvTraceVPrintF+0x1c2>
			}
		}

		xChannel = pxPrintInfo->defaultChannel;
 8005cd6:	4b60      	ldr	r3, [pc, #384]	; (8005e58 <prvTraceVPrintF+0x1cc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
	}

	/* Added channel to uiEventCode and uiSize */
	if (xTraceEventBegin(uiEventCode, uiSize , &xEventHandle) == TRC_FAIL)
 8005cde:	4b60      	ldr	r3, [pc, #384]	; (8005e60 <prvTraceVPrintF+0x1d4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4b5f      	ldr	r3, [pc, #380]	; (8005e64 <prvTraceVPrintF+0x1d8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d046      	beq.n	8005d80 <prvTraceVPrintF+0xf4>
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	f107 0218 	add.w	r2, r7, #24
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff facf 	bl	80052a0 <xTraceEventBeginRawOffline>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d139      	bne.n	8005d7c <prvTraceVPrintF+0xf0>
 8005d08:	4b57      	ldr	r3, [pc, #348]	; (8005e68 <prvTraceVPrintF+0x1dc>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d0e:	3201      	adds	r2, #1
 8005d10:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	b21a      	sxth	r2, r3
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	3b08      	subs	r3, #8
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b21a      	sxth	r2, r3
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	b292      	uxth	r2, r2
 8005d2e:	801a      	strh	r2, [r3, #0]
 8005d30:	4b4d      	ldr	r3, [pc, #308]	; (8005e68 <prvTraceVPrintF+0x1dc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	805a      	strh	r2, [r3, #2]
 8005d3e:	4a4b      	ldr	r2, [pc, #300]	; (8005e6c <prvTraceVPrintF+0x1e0>)
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4b48      	ldr	r3, [pc, #288]	; (8005e70 <prvTraceVPrintF+0x1e4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d204      	bcs.n	8005d62 <prvTraceVPrintF+0xd6>
 8005d58:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <prvTraceVPrintF+0x1e4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	3201      	adds	r2, #1
 8005d60:	60da      	str	r2, [r3, #12]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b42      	ldr	r3, [pc, #264]	; (8005e70 <prvTraceVPrintF+0x1e4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6852      	ldr	r2, [r2, #4]
 8005d6c:	615a      	str	r2, [r3, #20]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	3308      	adds	r3, #8
 8005d76:	6093      	str	r3, [r2, #8]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e002      	b.n	8005d82 <prvTraceVPrintF+0xf6>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <prvTraceVPrintF+0xf6>
 8005d80:	2301      	movs	r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <prvTraceVPrintF+0xfe>
	{
		return TRC_FAIL;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e061      	b.n	8005e4e <prvTraceVPrintF+0x1c2>
	}

	/* Add xChannel */
	xTraceEventAddPointer(xEventHandle, (void*)xChannel);
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f023 0303 	bic.w	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	3304      	adds	r3, #4
 8005da4:	6093      	str	r3, [r2, #8]

	/* Add all arguments */
	for (i = 0; i < uiArgs; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
 8005daa:	e015      	b.n	8005dd8 <prvTraceVPrintF+0x14c>
	{
		xTraceEventAddUnsignedBaseType(xEventHandle, va_arg(*pxVL, TraceUnsignedBaseType_t));
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f023 0303 	bic.w	r3, r3, #3
 8005db8:	441a      	add	r2, r3
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	1d18      	adds	r0, r3, #4
 8005dc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dc2:	6008      	str	r0, [r1, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	6093      	str	r3, [r2, #8]
	for (i = 0; i < uiArgs; i++)
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3e5      	bcc.n	8005dac <prvTraceVPrintF+0x120>
	}

	xTraceEventPayloadRemaining(xEventHandle, &uiRemaining);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	617b      	str	r3, [r7, #20]
	if (uiRemaining < uiLength)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d902      	bls.n	8005dfa <prvTraceVPrintF+0x16e>
	{
		uiLength = uiRemaining - 1; /* Make room for null termination */
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
	}

	/* Add format string */
	xTraceEventAddData(xEventHandle, (void*)szFormat, uiLength);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fb5d 	bl	80054c0 <xTraceEventAddData>

	/* Check if we can truncate */
	xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	613b      	str	r3, [r7, #16]
	if (uiValue > 0)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <prvTraceVPrintF+0x1a4>
	{
		xTraceEventAdd8(xEventHandle, 0);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4413      	add	r3, r2
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	6093      	str	r3, [r2, #8]
	}

	xTraceEventEnd(xEventHandle);
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <prvTraceVPrintF+0x1d4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <prvTraceVPrintF+0x1d8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <prvTraceVPrintF+0x1c0>
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fadc 	bl	8005404 <xTraceEventEndOffline>

	return TRC_SUCCESS;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3728      	adds	r7, #40	; 0x28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20002b04 	.word	0x20002b04
 8005e5c:	08007c3c 	.word	0x08007c3c
 8005e60:	20000010 	.word	0x20000010
 8005e64:	200038fc 	.word	0x200038fc
 8005e68:	20001a98 	.word	0x20001a98
 8005e6c:	e0001004 	.word	0xe0001004
 8005e70:	20003904 	.word	0x20003904

08005e74 <xTraceStackMonitorInitialize>:
} TraceStackMonitor_t;

static TraceStackMonitor_t* pxStackMonitor;

traceResult xTraceStackMonitorInitialize(TraceStackMonitorBuffer_t *pxBuffer)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStackMonitorBuffer_t, TraceStackMonitor_t);
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxStackMonitor = (TraceStackMonitor_t*)pxBuffer;
 8005e7c:	4a10      	ldr	r2, [pc, #64]	; (8005ec0 <xTraceStackMonitorInitialize+0x4c>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6013      	str	r3, [r2, #0]

	pxStackMonitor->uiEntryCount = 0;
 8005e82:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <xTraceStackMonitorInitialize+0x4c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2200      	movs	r2, #0
 8005e88:	651a      	str	r2, [r3, #80]	; 0x50

	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	e008      	b.n	8005ea2 <xTraceStackMonitorInitialize+0x2e>
	{
		pxStackMonitor->xEntries[i].pvTask = 0;
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <xTraceStackMonitorInitialize+0x4c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	2100      	movs	r1, #0
 8005e98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	for (i = 0; i < (TRC_CFG_STACK_MONITOR_MAX_TASKS); i++)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b09      	cmp	r3, #9
 8005ea6:	d9f3      	bls.n	8005e90 <xTraceStackMonitorInitialize+0x1c>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR);
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <xTraceStackMonitorInitialize+0x50>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb0:	4a04      	ldr	r2, [pc, #16]	; (8005ec4 <xTraceStackMonitorInitialize+0x50>)
 8005eb2:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	20002b08 	.word	0x20002b08
 8005ec4:	200038fc 	.word	0x200038fc

08005ec8 <xTraceStackMonitorReport>:

	return TRC_SUCCESS;
}

traceResult xTraceStackMonitorReport(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxLowWaterMark;
	TraceEventHandle_t xEventHandle = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed6:	613b      	str	r3, [r7, #16]
  return(result);
 8005ed8:	693b      	ldr	r3, [r7, #16]
	TRACE_ALLOC_CRITICAL_SECTION();

	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_STACK_MONITOR));
	
	TRACE_ENTER_CRITICAL_SECTION();
 8005eda:	623b      	str	r3, [r7, #32]
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f383 8810 	msr	PRIMASK, r3
}
 8005ee6:	bf00      	nop

	/* Never report more than there are entries */
	uiToReport = TRC_CFG_STACK_MONITOR_MAX_REPORTS <= pxStackMonitor->uiEntryCount ? TRC_CFG_STACK_MONITOR_MAX_REPORTS : pxStackMonitor->uiEntryCount;
 8005ee8:	4b61      	ldr	r3, [pc, #388]	; (8006070 <xTraceStackMonitorReport+0x1a8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	bf14      	ite	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	2300      	moveq	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < uiToReport; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
 8005efe:	e0a7      	b.n	8006050 <xTraceStackMonitorReport+0x188>
	{
		/* If uiCurrentIndex is too large, reset it */
		uiCurrentIndex = uiCurrentIndex < pxStackMonitor->uiEntryCount ? uiCurrentIndex : 0;
 8005f00:	4b5b      	ldr	r3, [pc, #364]	; (8006070 <xTraceStackMonitorReport+0x1a8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f06:	4b5b      	ldr	r3, [pc, #364]	; (8006074 <xTraceStackMonitorReport+0x1ac>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d902      	bls.n	8005f14 <xTraceStackMonitorReport+0x4c>
 8005f0e:	4b59      	ldr	r3, [pc, #356]	; (8006074 <xTraceStackMonitorReport+0x1ac>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	e000      	b.n	8005f16 <xTraceStackMonitorReport+0x4e>
 8005f14:	2300      	movs	r3, #0
 8005f16:	4a57      	ldr	r2, [pc, #348]	; (8006074 <xTraceStackMonitorReport+0x1ac>)
 8005f18:	6013      	str	r3, [r2, #0]
		
		pxStackMonitorEntry = &pxStackMonitor->xEntries[uiCurrentIndex];
 8005f1a:	4b55      	ldr	r3, [pc, #340]	; (8006070 <xTraceStackMonitorReport+0x1a8>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b55      	ldr	r3, [pc, #340]	; (8006074 <xTraceStackMonitorReport+0x1ac>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4413      	add	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]

		xTraceKernelPortGetUnusedStack(pxStackMonitorEntry->pvTask, &uxLowWaterMark);
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f107 0208 	add.w	r2, r7, #8
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fb7c 	bl	8005630 <xTraceKernelPortGetUnusedStack>

		if (uxLowWaterMark < pxStackMonitorEntry->uxPreviousLowWaterMark)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d902      	bls.n	8005f48 <xTraceStackMonitorReport+0x80>
		{
			pxStackMonitorEntry->uxPreviousLowWaterMark = uxLowWaterMark;
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	605a      	str	r2, [r3, #4]
		}

		if (xTraceEventBegin(PSF_EVENT_UNUSED_STACK, sizeof(void*) + sizeof(uint32_t), &xEventHandle) == TRC_SUCCESS)
 8005f48:	4b4b      	ldr	r3, [pc, #300]	; (8006078 <xTraceStackMonitorReport+0x1b0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	4b4b      	ldr	r3, [pc, #300]	; (800607c <xTraceStackMonitorReport+0x1b4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4013      	ands	r3, r2
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d042      	beq.n	8005fe2 <xTraceStackMonitorReport+0x11a>
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	4619      	mov	r1, r3
 8005f60:	2010      	movs	r0, #16
 8005f62:	f7ff f99d 	bl	80052a0 <xTraceEventBeginRawOffline>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d138      	bne.n	8005fde <xTraceStackMonitorReport+0x116>
 8005f6c:	4b44      	ldr	r3, [pc, #272]	; (8006080 <xTraceStackMonitorReport+0x1b8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f72:	3201      	adds	r2, #1
 8005f74:	66da      	str	r2, [r3, #108]	; 0x6c
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	3b08      	subs	r3, #8
 8005f7c:	089b      	lsrs	r3, r3, #2
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	b21b      	sxth	r3, r3
 8005f84:	f043 03eb 	orr.w	r3, r3, #235	; 0xeb
 8005f88:	b21a      	sxth	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	b292      	uxth	r2, r2
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <xTraceStackMonitorReport+0x1b8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	805a      	strh	r2, [r3, #2]
 8005fa0:	4a38      	ldr	r2, [pc, #224]	; (8006084 <xTraceStackMonitorReport+0x1bc>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4b35      	ldr	r3, [pc, #212]	; (8006088 <xTraceStackMonitorReport+0x1c0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d204      	bcs.n	8005fc4 <xTraceStackMonitorReport+0xfc>
 8005fba:	4b33      	ldr	r3, [pc, #204]	; (8006088 <xTraceStackMonitorReport+0x1c0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	3201      	adds	r2, #1
 8005fc2:	60da      	str	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <xTraceStackMonitorReport+0x1c0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6852      	ldr	r2, [r2, #4]
 8005fce:	615a      	str	r2, [r3, #20]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	6093      	str	r3, [r2, #8]
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e002      	b.n	8005fe4 <xTraceStackMonitorReport+0x11c>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e000      	b.n	8005fe4 <xTraceStackMonitorReport+0x11c>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d02b      	beq.n	8006040 <xTraceStackMonitorReport+0x178>
		{
			xTraceEventAddPointer(xEventHandle, pxStackMonitorEntry->pvTask);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f023 0303 	bic.w	r3, r3, #3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	6093      	str	r3, [r2, #8]
			xTraceEventAdd32(xEventHandle, (uint32_t)pxStackMonitorEntry->uxPreviousLowWaterMark);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f023 0303 	bic.w	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	6852      	ldr	r2, [r2, #4]
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	6093      	str	r3, [r2, #8]
			xTraceEventEnd(xEventHandle);
 8006024:	4b14      	ldr	r3, [pc, #80]	; (8006078 <xTraceStackMonitorReport+0x1b0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	4b14      	ldr	r3, [pc, #80]	; (800607c <xTraceStackMonitorReport+0x1b4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4013      	ands	r3, r2
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <xTraceStackMonitorReport+0x178>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff f9e2 	bl	8005404 <xTraceEventEndOffline>
		}

		uiCurrentIndex++;
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <xTraceStackMonitorReport+0x1ac>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	4a0b      	ldr	r2, [pc, #44]	; (8006074 <xTraceStackMonitorReport+0x1ac>)
 8006048:	6013      	str	r3, [r2, #0]
	for (i = 0; i < uiToReport; i++)
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	3301      	adds	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
 8006050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	429a      	cmp	r2, r3
 8006056:	f4ff af53 	bcc.w	8005f00 <xTraceStackMonitorReport+0x38>
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f383 8810 	msr	PRIMASK, r3
}
 8006064:	bf00      	nop
	}

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3728      	adds	r7, #40	; 0x28
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20002b08 	.word	0x20002b08
 8006074:	20002b0c 	.word	0x20002b0c
 8006078:	20000010 	.word	0x20000010
 800607c:	200038fc 	.word	0x200038fc
 8006080:	20001a98 	.word	0x20001a98
 8006084:	e0001004 	.word	0xe0001004
 8006088:	20003904 	.word	0x20003904

0800608c <xTraceStaticBufferInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferBuffer_t *pxBuffer)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceStaticBufferBuffer_t, TraceStaticBufferTable_t);
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxTraceStaticBufferTable = (TraceStaticBufferTable_t*)pxBuffer;
 8006094:	4a07      	ldr	r2, [pc, #28]	; (80060b4 <xTraceStaticBufferInitialize+0x28>)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6013      	str	r3, [r2, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <xTraceStaticBufferInitialize+0x2c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a2:	4a05      	ldr	r2, [pc, #20]	; (80060b8 <xTraceStaticBufferInitialize+0x2c>)
 80060a4:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20002b10 	.word	0x20002b10
 80060b8:	200038fc 	.word	0x200038fc

080060bc <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceRecorderDataBuffer_t, TraceRecorderData_t);
	
	if (RecorderInitialized != 0)
 80060c0:	4b5a      	ldr	r3, [pc, #360]	; (800622c <xTraceInitialize+0x170>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <xTraceInitialize+0x10>
	{
		return TRC_SUCCESS;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e0ac      	b.n	8006226 <xTraceInitialize+0x16a>
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0;
 80060cc:	4b58      	ldr	r3, [pc, #352]	; (8006230 <xTraceInitialize+0x174>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0;
 80060d4:	4b56      	ldr	r3, [pc, #344]	; (8006230 <xTraceInitialize+0x174>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	605a      	str	r2, [r3, #4]
	pxTraceRecorderData->uiTraceSystemState = TRC_STATE_IN_STARTUP;
 80060dc:	4b54      	ldr	r3, [pc, #336]	; (8006230 <xTraceInitialize+0x174>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	609a      	str	r2, [r3, #8]

#if (TRC_EXTERNAL_BUFFERS == 0)
	if (xTraceHeaderInitialize(&pxTraceRecorderData->xHeaderBuffer) == TRC_FAIL)
 80060e4:	4b52      	ldr	r3, [pc, #328]	; (8006230 <xTraceInitialize+0x174>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3310      	adds	r3, #16
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f8a2 	bl	8006234 <xTraceHeaderInitialize>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <xTraceInitialize+0x3e>
	{
		return TRC_FAIL;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e095      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	if (xTraceEntryTableInitialize(&pxTraceRecorderData->xEntryTableBuffer) == TRC_FAIL)
 80060fa:	4b4d      	ldr	r3, [pc, #308]	; (8006230 <xTraceInitialize+0x174>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3330      	adds	r3, #48	; 0x30
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fdab 	bl	8004c5c <xTraceEntryTableInitialize>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <xTraceInitialize+0x54>
	{
		return TRC_FAIL;
 800610c:	2301      	movs	r3, #1
 800610e:	e08a      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	if (xTraceTimestampInitialize(&pxTraceRecorderData->xTimestampBuffer) == TRC_FAIL)
 8006110:	4b47      	ldr	r3, [pc, #284]	; (8006230 <xTraceInitialize+0x174>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fc6d 	bl	80069f8 <xTraceTimestampInitialize>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <xTraceInitialize+0x6c>
	{
		return TRC_FAIL;
 8006124:	2301      	movs	r3, #1
 8006126:	e07e      	b.n	8006226 <xTraceInitialize+0x16a>
	}
#endif

	if (xTraceStackMonitorInitialize(&pxTraceRecorderData->xStackMonitorBuffer) == TRC_FAIL)
 8006128:	4b41      	ldr	r3, [pc, #260]	; (8006230 <xTraceInitialize+0x174>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f603 537c 	addw	r3, r3, #3452	; 0xd7c
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fe9f 	bl	8005e74 <xTraceStackMonitorInitialize>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <xTraceInitialize+0x84>
	{
		return TRC_FAIL;
 800613c:	2301      	movs	r3, #1
 800613e:	e072      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 8006140:	4b3b      	ldr	r3, [pc, #236]	; (8006230 <xTraceInitialize+0x174>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fcc9 	bl	8004ae0 <xTraceStreamPortInitialize>
 800614e:	4603      	mov	r3, r0
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <xTraceInitialize+0x9c>
	{
		return TRC_FAIL;
 8006154:	2301      	movs	r3, #1
 8006156:	e066      	b.n	8006226 <xTraceInitialize+0x16a>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 8006158:	4b35      	ldr	r3, [pc, #212]	; (8006230 <xTraceInitialize+0x174>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fccd 	bl	8004b00 <xTraceDiagnosticsInitialize>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <xTraceInitialize+0xb4>
	{
		return TRC_FAIL;
 800616c:	2301      	movs	r3, #1
 800616e:	e05a      	b.n	8006226 <xTraceInitialize+0x16a>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 8006170:	4b2f      	ldr	r3, [pc, #188]	; (8006230 <xTraceInitialize+0x174>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff ff87 	bl	800608c <xTraceStaticBufferInitialize>
 800617e:	4603      	mov	r3, r0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <xTraceInitialize+0xcc>
	{
		return TRC_FAIL;
 8006184:	2301      	movs	r3, #1
 8006186:	e04e      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 8006188:	4b29      	ldr	r3, [pc, #164]	; (8006230 <xTraceInitialize+0x174>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f603 43c4 	addw	r3, r3, #3268	; 0xcc4
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff f833 	bl	80051fc <xTraceEventInitialize>
 8006196:	4603      	mov	r3, r0
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <xTraceInitialize+0xe4>
	{
		return TRC_FAIL;
 800619c:	2301      	movs	r3, #1
 800619e:	e042      	b.n	8006226 <xTraceInitialize+0x16a>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 80061a0:	4b23      	ldr	r3, [pc, #140]	; (8006230 <xTraceInitialize+0x174>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f603 5334 	addw	r3, r3, #3380	; 0xd34
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fca1 	bl	8005af0 <xTracePrintInitialize>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <xTraceInitialize+0xfc>
	{
		return TRC_FAIL;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e036      	b.n	8006226 <xTraceInitialize+0x16a>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <xTraceInitialize+0x174>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f603 533c 	addw	r3, r3, #3388	; 0xd3c
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe feb7 	bl	8004f34 <xTraceErrorInitialize>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <xTraceInitialize+0x114>
	{
		return TRC_FAIL;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e02a      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRInfoBuffer) == TRC_FAIL)
 80061d0:	4b17      	ldr	r3, [pc, #92]	; (8006230 <xTraceInitialize+0x174>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff f9eb 	bl	80055b4 <xTraceISRInitialize>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <xTraceInitialize+0x12c>
	{
		return TRC_FAIL;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e01e      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 80061e8:	4b11      	ldr	r3, [pc, #68]	; (8006230 <xTraceInitialize+0x174>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f603 5378 	addw	r3, r3, #3448	; 0xd78
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fbdb 	bl	80069ac <xTraceTaskInitialize>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <xTraceInitialize+0x144>
	{
		return TRC_FAIL;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e012      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <xTraceInitialize+0x174>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f503 6357 	add.w	r3, r3, #3440	; 0xd70
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fa21 	bl	8005650 <xTraceKernelPortInitialize>
 800620e:	4603      	mov	r3, r0
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <xTraceInitialize+0x15c>
	{
		return TRC_FAIL;
 8006214:	2301      	movs	r3, #1
 8006216:	e006      	b.n	8006226 <xTraceInitialize+0x16a>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 8006218:	4b04      	ldr	r3, [pc, #16]	; (800622c <xTraceInitialize+0x170>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	4a02      	ldr	r2, [pc, #8]	; (800622c <xTraceInitialize+0x170>)
 8006222:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200038fc 	.word	0x200038fc
 8006230:	20000010 	.word	0x20000010

08006234 <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	char* platform_cfg = TRC_PLATFORM_CFG;
 800623c:	4b2b      	ldr	r3, [pc, #172]	; (80062ec <xTraceHeaderInitialize+0xb8>)
 800623e:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == 0)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 8006246:	2301      	movs	r3, #1
 8006248:	e04a      	b.n	80062e0 <xTraceHeaderInitialize+0xac>
	}

	pxHeader = (TraceHeader_t*)pxBuffer;
 800624a:	4a29      	ldr	r2, [pc, #164]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6013      	str	r3, [r2, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a27      	ldr	r2, [pc, #156]	; (80062f4 <xTraceHeaderInitialize+0xc0>)
 8006256:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	220a      	movs	r2, #10
 800625e:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 8006260:	4b23      	ldr	r3, [pc, #140]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8006268:	80da      	strh	r2, [r3, #6]

	for (i = 0; i < TRC_PLATFORM_CFG_LENGTH; i++)
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e013      	b.n	8006298 <xTraceHeaderInitialize+0x64>
	{
		pxHeader->platformCfg[i] = platform_cfg[i];
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	7819      	ldrb	r1, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	3314      	adds	r3, #20
 8006282:	460a      	mov	r2, r1
 8006284:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == 0)
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d006      	beq.n	80062a0 <xTraceHeaderInitialize+0x6c>
	for (i = 0; i < TRC_PLATFORM_CFG_LENGTH; i++)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b07      	cmp	r3, #7
 800629c:	d9e8      	bls.n	8006270 <xTraceHeaderInitialize+0x3c>
 800629e:	e000      	b.n	80062a2 <xTraceHeaderInitialize+0x6e>
		{
			break;
 80062a0:	bf00      	nop
		}
	}
	pxHeader->uiPlatformCfgPatch = TRC_PLATFORM_CFG_PATCH;
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	839a      	strh	r2, [r3, #28]
	pxHeader->uiPlatformCfgMinor = TRC_PLATFORM_CFG_MINOR;
 80062aa:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	779a      	strb	r2, [r3, #30]
	pxHeader->uiPlatformCfgMajor = TRC_PLATFORM_CFG_MAJOR;
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2201      	movs	r2, #1
 80062b8:	77da      	strb	r2, [r3, #31]
	pxHeader->uiNumCores = TRC_CFG_CORE_COUNT;
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	60da      	str	r2, [r3, #12]
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = ((TRC_IRQ_PRIORITY_ORDER) << 0);
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= ((TRC_CFG_TEST_MODE) << 2);
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <xTraceHeaderInitialize+0xbc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6892      	ldr	r2, [r2, #8]
 80062dc:	609a      	str	r2, [r3, #8]

	return TRC_SUCCESS;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	08007c44 	.word	0x08007c44
 80062f0:	200038f8 	.word	0x200038f8
 80062f4:	50534600 	.word	0x50534600

080062f8 <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand;
	int32_t iBytes = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

	if (xTraceInitialize() == TRC_FAIL)
 8006304:	f7ff feda 	bl	80060bc <xTraceInitialize>
 8006308:	4603      	mov	r3, r0
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <xTraceEnable+0x1a>
	{
		return TRC_FAIL;
 800630e:	2301      	movs	r3, #1
 8006310:	e04c      	b.n	80063ac <xTraceEnable+0xb4>
	}

	xTraceStreamPortOnEnable(uiStartOption);

	if (xTraceKernelPortEnable() == TRC_FAIL)
 8006312:	f7ff f9b9 	bl	8005688 <xTraceKernelPortEnable>
 8006316:	4603      	mov	r3, r0
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <xTraceEnable+0x28>
	{
		return TRC_FAIL;
 800631c:	2301      	movs	r3, #1
 800631e:	e045      	b.n	80063ac <xTraceEnable+0xb4>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d12d      	bne.n	8006382 <xTraceEnable+0x8a>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 800632a:	f107 020c 	add.w	r2, r7, #12
 800632e:	f107 0310 	add.w	r3, r7, #16
 8006332:	2108      	movs	r1, #8
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fb9b 	bl	8004a70 <prvTraceItmRead>
 800633a:	4603      	mov	r3, r0
 800633c:	2b01      	cmp	r3, #1
 800633e:	d102      	bne.n	8006346 <xTraceEnable+0x4e>
			{
				xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 8006340:	200b      	movs	r0, #11
 8006342:	f7fe fe1b 	bl	8004f7c <xTraceWarning>
			}

			if (iBytes == sizeof(TraceCommand_t))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d114      	bne.n	8006376 <xTraceEnable+0x7e>
			{
				if (prvIsValidCommand(&xCommand))
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fa09 	bl	8006768 <prvIsValidCommand>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00c      	beq.n	8006376 <xTraceEnable+0x7e>
				{
					if (xCommand.cmdCode == CMD_SET_ACTIVE && xCommand.param1 == 1)
 800635c:	7c3b      	ldrb	r3, [r7, #16]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d104      	bne.n	800636c <xTraceEnable+0x74>
 8006362:	7c7b      	ldrb	r3, [r7, #17]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <xTraceEnable+0x74>
					{
						/* On start, init and reset the timestamping */
						TRC_PORT_SPECIFIC_INIT();
 8006368:	f7ff f8d0 	bl	800550c <xTraceHardwarePortInitCortexM>
					}

					prvProcessCommand(&xCommand);
 800636c:	f107 0310 	add.w	r3, r7, #16
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fa39 	bl	80067e8 <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0);
 8006376:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <xTraceEnable+0xbc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0d2      	beq.n	8006326 <xTraceEnable+0x2e>
 8006380:	e013      	b.n	80063aa <xTraceEnable+0xb2>
	}
	else if (uiStartOption == TRC_START)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d10b      	bne.n	80063a0 <xTraceEnable+0xa8>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		TRC_PORT_SPECIFIC_INIT();
 8006388:	f7ff f8c0 	bl	800550c <xTraceHardwarePortInitCortexM>

		xCommand.cmdCode = CMD_SET_ACTIVE;
 800638c:	2301      	movs	r3, #1
 800638e:	743b      	strb	r3, [r7, #16]
		xCommand.param1 = 1;
 8006390:	2301      	movs	r3, #1
 8006392:	747b      	strb	r3, [r7, #17]
		prvProcessCommand(&xCommand);
 8006394:	f107 0310 	add.w	r3, r7, #16
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fa25 	bl	80067e8 <prvProcessCommand>
 800639e:	e004      	b.n	80063aa <xTraceEnable+0xb2>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <xTraceEnable+0xb2>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
		TRC_PORT_SPECIFIC_INIT();
 80063a6:	f7ff f8b1 	bl	800550c <xTraceHardwarePortInitCortexM>
	}

	return TRC_SUCCESS;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20000010 	.word	0x20000010

080063b8 <xTraceDisable>:

traceResult xTraceDisable(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 80063bc:	f000 f894 	bl	80064e8 <prvSetRecorderDisabled>

	xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand;
	int32_t iBytes = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
	
	do
	{
		/* Listen for new commands */
		iBytes = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iBytes) == TRC_FAIL)
 80063d6:	1d3a      	adds	r2, r7, #4
 80063d8:	f107 0308 	add.w	r3, r7, #8
 80063dc:	2108      	movs	r1, #8
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fb46 	bl	8004a70 <prvTraceItmRead>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d103      	bne.n	80063f2 <xTraceTzCtrl+0x2a>
		{
			/* The connection has failed, stop tracing */
			xTraceDisable();
 80063ea:	f7ff ffe5 	bl	80063b8 <xTraceDisable>

			return TRC_FAIL;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e021      	b.n	8006436 <xTraceTzCtrl+0x6e>
		}

		if (iBytes == sizeof(TraceCommand_t))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d10c      	bne.n	8006412 <xTraceTzCtrl+0x4a>
		{
			if (prvIsValidCommand(&xCommand))
 80063f8:	f107 0308 	add.w	r3, r7, #8
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 f9b3 	bl	8006768 <prvIsValidCommand>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <xTraceTzCtrl+0x4a>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 8006408:	f107 0308 	add.w	r3, r7, #8
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f9eb 	bl	80067e8 <prvProcessCommand>
#endif

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iBytes != 0);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1dc      	bne.n	80063d2 <xTraceTzCtrl+0xa>

	if (xTraceIsRecorderEnabled())
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <xTraceTzCtrl+0x78>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <xTraceTzCtrl+0x7c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4013      	ands	r3, r2
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <xTraceTzCtrl+0x6c>
	{
		xTraceDiagnosticsCheckStatus();
 800642c:	f7fe fbd4 	bl	8004bd8 <xTraceDiagnosticsCheckStatus>
		xTraceStackMonitorReport();
 8006430:	f7ff fd4a 	bl	8005ec8 <xTraceStackMonitorReport>
	}

	return TRC_SUCCESS;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000010 	.word	0x20000010
 8006444:	200038fc 	.word	0x200038fc

08006448 <prvSetRecorderEnabled>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/
/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
	uint32_t timestampFrequency = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	607b      	str	r3, [r7, #4]
	uint32_t timestampPeriod = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1)
 8006456:	4b21      	ldr	r3, [pc, #132]	; (80064dc <prvSetRecorderEnabled+0x94>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d038      	beq.n	80064d2 <prvSetRecorderEnabled+0x8a>
	{
		return;
	}

	xTraceTimestampGetFrequency(&timestampFrequency);
 8006460:	4b1f      	ldr	r3, [pc, #124]	; (80064e0 <prvSetRecorderEnabled+0x98>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (timestampFrequency == 0)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <prvSetRecorderEnabled+0x30>
	{
		xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 800646e:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <prvSetRecorderEnabled+0x98>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <prvSetRecorderEnabled+0x9c>)
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	605a      	str	r2, [r3, #4]
	}

	xTraceTimestampGetPeriod(&timestampPeriod);
 8006478:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <prvSetRecorderEnabled+0x98>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (timestampPeriod == 0)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <prvSetRecorderEnabled+0x46>
	{
		xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 8006486:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <prvSetRecorderEnabled+0x98>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2200      	movs	r2, #0
 800648c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800648e:	f3ef 8310 	mrs	r3, PRIMASK
 8006492:	60bb      	str	r3, [r7, #8]
  return(result);
 8006494:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	2301      	movs	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	bf00      	nop
	/* If the internal event buffer is used, we must clear it */
	xTraceInternalEventBufferClear();
	
	xTraceStreamPortOnTraceBegin();

	prvTraceStoreHeader();
 80064a4:	f000 f844 	bl	8006530 <prvTraceStoreHeader>
	prvTraceStoreTimestampInfo();
 80064a8:	f000 f85e 	bl	8006568 <prvTraceStoreTimestampInfo>
	prvTraceStoreEntryTable();
 80064ac:	f000 f882 	bl	80065b4 <prvTraceStoreEntryTable>
	prvTraceStoreStartEvent();
 80064b0:	f000 f8f0 	bl	8006694 <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 80064b4:	4b09      	ldr	r3, [pc, #36]	; (80064dc <prvSetRecorderEnabled+0x94>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	3201      	adds	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1;
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <prvSetRecorderEnabled+0x94>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2201      	movs	r2, #1
 80064c4:	605a      	str	r2, [r3, #4]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f383 8810 	msr	PRIMASK, r3
}
 80064d0:	e000      	b.n	80064d4 <prvSetRecorderEnabled+0x8c>
		return;
 80064d2:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();
}
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000010 	.word	0x20000010
 80064e0:	20003904 	.word	0x20003904
 80064e4:	20000000 	.word	0x20000000

080064e8 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0)
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <prvSetRecorderDisabled+0x44>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d014      	beq.n	8006522 <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f8:	f3ef 8310 	mrs	r3, PRIMASK
 80064fc:	603b      	str	r3, [r7, #0]
  return(result);
 80064fe:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	2301      	movs	r3, #1
 8006504:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f383 8810 	msr	PRIMASK, r3
}
 800650c:	bf00      	nop
	
	pxTraceRecorderData->uiRecorderEnabled = 0;
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <prvSetRecorderDisabled+0x44>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f383 8810 	msr	PRIMASK, r3
}
 8006520:	e000      	b.n	8006524 <prvSetRecorderDisabled+0x3c>
		return;
 8006522:	bf00      	nop

	xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr
 800652c:	20000010 	.word	0x20000010

08006530 <prvTraceStoreHeader>:

#if (TRC_EXTERNAL_BUFFERS == 0)
/* Stores the header information on Start */
static void prvTraceStoreHeader(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
	TraceEventHandle_t xEventHandle;

	if (xTraceEventBeginRawOfflineBlocking(sizeof(TraceHeader_t), &xEventHandle) == TRC_SUCCESS)
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	4619      	mov	r1, r3
 800653a:	2020      	movs	r0, #32
 800653c:	f7fe ff08 	bl	8005350 <xTraceEventBeginRawOfflineBlocking>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <prvTraceStoreHeader+0x2c>
	{
		xTraceEventAddData(xEventHandle, pxHeader, sizeof(TraceHeader_t));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a06      	ldr	r2, [pc, #24]	; (8006564 <prvTraceStoreHeader+0x34>)
 800654a:	6811      	ldr	r1, [r2, #0]
 800654c:	2220      	movs	r2, #32
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe ffb6 	bl	80054c0 <xTraceEventAddData>
		xTraceEventEndOfflineBlocking(xEventHandle);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe ff78 	bl	800544c <xTraceEventEndOfflineBlocking>
	}
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	200038f8 	.word	0x200038f8

08006568 <prvTraceStoreTimestampInfo>:

/* Store the Timestamp */
static void prvTraceStoreTimestampInfo(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	TraceEventHandle_t xEventHandle;
	uint32_t timestampFrequency = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	603b      	str	r3, [r7, #0]

	xTraceTimestampGetFrequency(&timestampFrequency);
 8006572:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <prvTraceStoreTimestampInfo+0x44>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	603b      	str	r3, [r7, #0]

	if (xTraceEventBeginRawOfflineBlocking(sizeof(TraceTimestampBuffer_t), &xEventHandle) == TRC_SUCCESS)
 800657a:	1d3b      	adds	r3, r7, #4
 800657c:	4619      	mov	r1, r3
 800657e:	201c      	movs	r0, #28
 8006580:	f7fe fee6 	bl	8005350 <xTraceEventBeginRawOfflineBlocking>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10c      	bne.n	80065a4 <prvTraceStoreTimestampInfo+0x3c>
	{
		xTraceEventAddData(xEventHandle, &pxTraceRecorderData->xTimestampBuffer, sizeof(TraceTimestampBuffer_t));
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4b08      	ldr	r3, [pc, #32]	; (80065b0 <prvTraceStoreTimestampInfo+0x48>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f603 2364 	addw	r3, r3, #2660	; 0xa64
 8006594:	221c      	movs	r2, #28
 8006596:	4619      	mov	r1, r3
 8006598:	f7fe ff92 	bl	80054c0 <xTraceEventAddData>
		xTraceEventEndOfflineBlocking(xEventHandle);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe ff54 	bl	800544c <xTraceEventEndOfflineBlocking>
	}
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20003904 	.word	0x20003904
 80065b0:	20000010 	.word	0x20000010

080065b4 <prvTraceStoreEntryTable>:

/* Stores the entry table on Start */
static void prvTraceStoreEntryTable(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]
	TraceEventHandle_t xEventHandle;
	TraceEntryHandle_t xEntryHandle;
	uint32_t uiEntryCount;
	void *pvEntryAddress;

	xTraceEntryGetCount(&uiEntryCount);
 80065be:	f107 0308 	add.w	r3, r7, #8
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fc44 	bl	8004e50 <xTraceEntryGetCount>
	
	if (xTraceEventBeginRawOfflineBlocking(sizeof(uint32_t) + sizeof(uint32_t) + sizeof(uint32_t), &xEventHandle) == TRC_SUCCESS)
 80065c8:	f107 0310 	add.w	r3, r7, #16
 80065cc:	4619      	mov	r1, r3
 80065ce:	200c      	movs	r0, #12
 80065d0:	f7fe febe 	bl	8005350 <xTraceEventBeginRawOfflineBlocking>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d12d      	bne.n	8006636 <prvTraceStoreEntryTable+0x82>
	{
		xTraceEventAdd32(xEventHandle, uiEntryCount);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	4413      	add	r3, r2
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	3304      	adds	r3, #4
 80065f4:	6093      	str	r3, [r2, #8]
		xTraceEventAdd32(xEventHandle, TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	4413      	add	r3, r2
 8006604:	2220      	movs	r2, #32
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	3304      	adds	r3, #4
 8006610:	6093      	str	r3, [r2, #8]
		xTraceEventAdd32(xEventHandle, TRC_ENTRY_TABLE_STATE_COUNT);
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f023 0303 	bic.w	r3, r3, #3
 800661e:	4413      	add	r3, r2
 8006620:	2203      	movs	r2, #3
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	3304      	adds	r3, #4
 800662c:	6093      	str	r3, [r2, #8]
		xTraceEventEndOfflineBlocking(xEventHandle);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe ff0b 	bl	800544c <xTraceEventEndOfflineBlocking>
	}
	
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e022      	b.n	8006682 <prvTraceStoreEntryTable+0xce>
	{
		xTraceEntryGetAtIndex(i, &xEntryHandle);
 800663c:	f107 030c 	add.w	r3, r7, #12
 8006640:	4619      	mov	r1, r3
 8006642:	6978      	ldr	r0, [r7, #20]
 8006644:	f7fe fc16 	bl	8004e74 <xTraceEntryGetAtIndex>
		xTraceEntryGetAddress(xEntryHandle, &pvEntryAddress);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	607b      	str	r3, [r7, #4]
		/* We only send used entry slots */
		if (pvEntryAddress != 0)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d013      	beq.n	800667c <prvTraceStoreEntryTable+0xc8>
		{
			/* Send entry */
			if (xTraceEventBeginRawOfflineBlocking(sizeof(TraceEntry_t), &xEventHandle) == TRC_SUCCESS)
 8006654:	f107 0310 	add.w	r3, r7, #16
 8006658:	4619      	mov	r1, r3
 800665a:	2034      	movs	r0, #52	; 0x34
 800665c:	f7fe fe78 	bl	8005350 <xTraceEventBeginRawOfflineBlocking>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <prvTraceStoreEntryTable+0xc8>
			{
				xTraceEventAddData(xEventHandle, (void*)xEntryHandle, sizeof(TraceEntry_t));
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4611      	mov	r1, r2
 800666c:	2234      	movs	r2, #52	; 0x34
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe ff26 	bl	80054c0 <xTraceEventAddData>
				xTraceEventEndOfflineBlocking(xEventHandle);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fee8 	bl	800544c <xTraceEventEndOfflineBlocking>
	for (i = 0; i < (TRC_ENTRY_TABLE_SLOTS); i++)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	3301      	adds	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b31      	cmp	r3, #49	; 0x31
 8006686:	d9d9      	bls.n	800663c <prvTraceStoreEntryTable+0x88>
			}
		}
	}
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <prvTraceStoreStartEvent>:
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent()
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
	TraceEventHandle_t xEventHandle;
	void* pvCurrentTask;

	xTraceTaskGetCurrent(&pvCurrentTask);
 800669a:	4b2f      	ldr	r3, [pc, #188]	; (8006758 <prvTraceStoreStartEvent+0xc4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	603b      	str	r3, [r7, #0]

	if (xTraceEventBeginOffline(PSF_EVENT_TRACE_START, sizeof(uint32_t), &xEventHandle) == TRC_SUCCESS)
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	200c      	movs	r0, #12
 80066a8:	f7fe fdfa 	bl	80052a0 <xTraceEventBeginRawOffline>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d138      	bne.n	8006724 <prvTraceStoreStartEvent+0x90>
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <prvTraceStoreStartEvent+0xc8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80066b8:	3201      	adds	r2, #1
 80066ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	3b08      	subs	r3, #8
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	031b      	lsls	r3, r3, #12
 80066c8:	b21b      	sxth	r3, r3
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	b21a      	sxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	b292      	uxth	r2, r2
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	4b20      	ldr	r3, [pc, #128]	; (800675c <prvTraceStoreStartEvent+0xc8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	b292      	uxth	r2, r2
 80066e4:	805a      	strh	r2, [r3, #2]
 80066e6:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <prvTraceStoreStartEvent+0xcc>)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	605a      	str	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <prvTraceStoreStartEvent+0xd0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d204      	bcs.n	800670a <prvTraceStoreStartEvent+0x76>
 8006700:	4b18      	ldr	r3, [pc, #96]	; (8006764 <prvTraceStoreStartEvent+0xd0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	3201      	adds	r2, #1
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <prvTraceStoreStartEvent+0xd0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6852      	ldr	r2, [r2, #4]
 8006714:	615a      	str	r2, [r3, #20]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	3308      	adds	r3, #8
 800671e:	6093      	str	r3, [r2, #8]
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <prvTraceStoreStartEvent+0x92>
 8006724:	2300      	movs	r3, #0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d012      	beq.n	8006750 <prvTraceStoreStartEvent+0xbc>
	{
		xTraceEventAdd32(xEventHandle, (uint32_t)pvCurrentTask);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f023 0303 	bic.w	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	460a      	mov	r2, r1
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	6093      	str	r3, [r2, #8]
		xTraceEventEndOffline(xEventHandle);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fe5a 	bl	8005404 <xTraceEventEndOffline>
	}
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20003900 	.word	0x20003900
 800675c:	20001a98 	.word	0x20001a98
 8006760:	e0001004 	.word	0xe0001004
 8006764:	20003904 	.word	0x20003904

08006768 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int prvIsValidCommand(TraceCommand_t* cmd)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	b29a      	uxth	r2, r3
												cmd->param1 +
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	b29b      	uxth	r3, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 800677c:	4413      	add	r3, r2
 800677e:	b29a      	uxth	r2, r3
												cmd->param2 +
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	789b      	ldrb	r3, [r3, #2]
 8006784:	b29b      	uxth	r3, r3
												cmd->param1 +
 8006786:	4413      	add	r3, r2
 8006788:	b29a      	uxth	r2, r3
												cmd->param3 +
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	78db      	ldrb	r3, [r3, #3]
 800678e:	b29b      	uxth	r3, r3
												cmd->param2 +
 8006790:	4413      	add	r3, r2
 8006792:	b29a      	uxth	r2, r3
												cmd->param4 +
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	791b      	ldrb	r3, [r3, #4]
 8006798:	b29b      	uxth	r3, r3
												cmd->param3 +
 800679a:	4413      	add	r3, r2
 800679c:	b29a      	uxth	r2, r3
												cmd->param5));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	795b      	ldrb	r3, [r3, #5]
 80067a2:	b29b      	uxth	r3, r3
												cmd->param4 +
 80067a4:	4413      	add	r3, r2
 80067a6:	b29b      	uxth	r3, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 80067a8:	43db      	mvns	r3, r3
 80067aa:	81fb      	strh	r3, [r7, #14]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	79da      	ldrb	r2, [r3, #7]
 80067b0:	89fb      	ldrh	r3, [r7, #14]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d001      	beq.n	80067c0 <prvIsValidCommand+0x58>
		return 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	e00e      	b.n	80067de <prvIsValidCommand+0x76>

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	799a      	ldrb	r2, [r3, #6]
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d001      	beq.n	80067d0 <prvIsValidCommand+0x68>
		return 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e006      	b.n	80067de <prvIsValidCommand+0x76>

	if (cmd->cmdCode > CMD_LAST_COMMAND)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d901      	bls.n	80067dc <prvIsValidCommand+0x74>
		return 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	e000      	b.n	80067de <prvIsValidCommand+0x76>

	return 1;
 80067dc:	2301      	movs	r3, #1
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(TraceCommand_t* cmd)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d109      	bne.n	800680c <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d102      	bne.n	8006806 <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 8006800:	f7ff fe22 	bl	8006448 <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 8006804:	e003      	b.n	800680e <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 8006806:	f7ff fe6f 	bl	80064e8 <prvSetRecorderDisabled>
		  	break;
 800680a:	e000      	b.n	800680e <prvProcessCommand+0x26>
		default:
		  	break;
 800680c:	bf00      	nop
	}
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <xTraceStringRegister>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1)

#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	TraceEventHandle_t xEventHandle = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
	uint32_t i = 0, uiLength = 0, uiValue = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
	
	/* This should never fail */
	TRC_ASSERT(pString != 0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 8006832:	f107 0314 	add.w	r3, r7, #20
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fa6c 	bl	8004d14 <xTraceEntryCreate>
 800683c:	4603      	mov	r3, r0
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <xTraceStringRegister+0x2e>
	{
		return TRC_FAIL;
 8006842:	2301      	movs	r3, #1
 8006844:	e0a4      	b.n	8006990 <xTraceStringRegister+0x178>
	}

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString) == TRC_SUCCESS);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fac2 	bl	8004dd4 <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	601a      	str	r2, [r3, #0]

	for (i = 0; (szString[i] != 0) && (i < (TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {}
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	e002      	b.n	8006862 <xTraceStringRegister+0x4a>
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3301      	adds	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <xTraceStringRegister+0x5c>
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	2b1f      	cmp	r3, #31
 8006872:	d9f3      	bls.n	800685c <xTraceStringRegister+0x44>

	uiLength = i;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	61bb      	str	r3, [r7, #24]

	/* We need to check this */
	if (xTraceEventBegin(PSF_EVENT_OBJ_NAME, sizeof(void*) + uiLength, &xEventHandle) == TRC_SUCCESS)
 8006878:	4b47      	ldr	r3, [pc, #284]	; (8006998 <xTraceStringRegister+0x180>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	4b47      	ldr	r3, [pc, #284]	; (800699c <xTraceStringRegister+0x184>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4013      	ands	r3, r2
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d045      	beq.n	8006918 <xTraceStringRegister+0x100>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	330c      	adds	r3, #12
 8006890:	f107 0210 	add.w	r2, r7, #16
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fd02 	bl	80052a0 <xTraceEventBeginRawOffline>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d138      	bne.n	8006914 <xTraceStringRegister+0xfc>
 80068a2:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <xTraceStringRegister+0x188>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80068a8:	3201      	adds	r2, #1
 80068aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	3b08      	subs	r3, #8
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	031b      	lsls	r3, r3, #12
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	f043 0303 	orr.w	r3, r3, #3
 80068be:	b21a      	sxth	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	b292      	uxth	r2, r2
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	4b35      	ldr	r3, [pc, #212]	; (80069a0 <xTraceStringRegister+0x188>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	b292      	uxth	r2, r2
 80068d4:	805a      	strh	r2, [r3, #2]
 80068d6:	4a33      	ldr	r2, [pc, #204]	; (80069a4 <xTraceStringRegister+0x18c>)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	605a      	str	r2, [r3, #4]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4b30      	ldr	r3, [pc, #192]	; (80069a8 <xTraceStringRegister+0x190>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d204      	bcs.n	80068fa <xTraceStringRegister+0xe2>
 80068f0:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <xTraceStringRegister+0x190>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	3201      	adds	r2, #1
 80068f8:	60da      	str	r2, [r3, #12]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b2a      	ldr	r3, [pc, #168]	; (80069a8 <xTraceStringRegister+0x190>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6852      	ldr	r2, [r2, #4]
 8006904:	615a      	str	r2, [r3, #20]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	3308      	adds	r3, #8
 800690e:	6093      	str	r3, [r2, #8]
 8006910:	2301      	movs	r3, #1
 8006912:	e002      	b.n	800691a <xTraceStringRegister+0x102>
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <xTraceStringRegister+0x102>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d037      	beq.n	800698e <xTraceStringRegister+0x176>
	{
		xTraceEventAddPointer(xEventHandle, (void*)xEntryHandle);
 800691e:	6979      	ldr	r1, [r7, #20]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f023 0303 	bic.w	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	460a      	mov	r2, r1
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	3304      	adds	r3, #4
 800693a:	6093      	str	r3, [r2, #8]
		xTraceEventAddData(xEventHandle, (void*)szString, uiLength);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fdbc 	bl	80054c0 <xTraceEventAddData>

		/* Check if we can truncate */
		xTraceEventPayloadRemaining(xEventHandle, &uiValue);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	60fb      	str	r3, [r7, #12]
		if (uiValue > 0)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <xTraceStringRegister+0x15a>
		{
			xTraceEventAdd8(xEventHandle, 0);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	4413      	add	r3, r2
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	3301      	adds	r3, #1
 8006970:	6093      	str	r3, [r2, #8]
		}
		
		xTraceEventEnd(xEventHandle);
 8006972:	4b09      	ldr	r3, [pc, #36]	; (8006998 <xTraceStringRegister+0x180>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	4b08      	ldr	r3, [pc, #32]	; (800699c <xTraceStringRegister+0x184>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4013      	ands	r3, r2
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <xTraceStringRegister+0x176>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe fd3b 	bl	8005404 <xTraceEventEndOffline>
	}

	return TRC_SUCCESS;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000010 	.word	0x20000010
 800699c:	200038fc 	.word	0x200038fc
 80069a0:	20001a98 	.word	0x20001a98
 80069a4:	e0001004 	.word	0xe0001004
 80069a8:	20003904 	.word	0x20003904

080069ac <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_UNUSED_STACK	1

TraceTaskInfo_t* pxTraceTaskInfo;

traceResult xTraceTaskInitialize(TraceTaskInfoBuffer_t *pxBuffer)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceTaskInfoBuffer_t, TraceTaskInfo_t);

	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxTraceTaskInfo = (TraceTaskInfo_t*)pxBuffer;
 80069b4:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <xTraceTaskInitialize+0x44>)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6013      	str	r3, [r2, #0]

	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e008      	b.n	80069d2 <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskInfo->coreTasks[i] = TRACE_HANDLE_NO_TASK;
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <xTraceTaskInitialize+0x44>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	2102      	movs	r1, #2
 80069c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0f3      	beq.n	80069c0 <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <xTraceTaskInitialize+0x48>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069e0:	4a04      	ldr	r2, [pc, #16]	; (80069f4 <xTraceTaskInitialize+0x48>)
 80069e2:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr
 80069f0:	20003900 	.word	0x20003900
 80069f4:	200038fc 	.word	0x200038fc

080069f8 <xTraceTimestampInitialize>:
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestamp_t *pxTraceTimestamp;

traceResult xTraceTimestampInitialize(TraceTimestampBuffer_t *pxBuffer)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceTimestampBuffer_t, TraceTimestamp_t);

	/* This should never fail */
	TRC_ASSERT(pxBuffer != 0);

	pxTraceTimestamp = (TraceTimestamp_t*)pxBuffer;
 8006a00:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6013      	str	r3, [r2, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0;
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	605a      	str	r2, [r3, #4]
	pxTraceTimestamp->period = 0;
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	609a      	str	r2, [r3, #8]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a1e:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0;
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2200      	movs	r2, #0
 8006a26:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0;
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 8006a30:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0;
 8006a38:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <xTraceTimestampInitialize+0x60>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	615a      	str	r2, [r3, #20]
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1;
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 8006a40:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <xTraceTimestampInitialize+0x64>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a48:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <xTraceTimestampInitialize+0x64>)
 8006a4a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr
 8006a58:	20003904 	.word	0x20003904
 8006a5c:	200038fc 	.word	0x200038fc

08006a60 <__errno>:
 8006a60:	4b01      	ldr	r3, [pc, #4]	; (8006a68 <__errno+0x8>)
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000014 	.word	0x20000014

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	2600      	movs	r6, #0
 8006a70:	4d0c      	ldr	r5, [pc, #48]	; (8006aa4 <__libc_init_array+0x38>)
 8006a72:	4c0d      	ldr	r4, [pc, #52]	; (8006aa8 <__libc_init_array+0x3c>)
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	f000 ffc4 	bl	8007a08 <_init>
 8006a80:	2600      	movs	r6, #0
 8006a82:	4d0a      	ldr	r5, [pc, #40]	; (8006aac <__libc_init_array+0x40>)
 8006a84:	4c0a      	ldr	r4, [pc, #40]	; (8006ab0 <__libc_init_array+0x44>)
 8006a86:	1b64      	subs	r4, r4, r5
 8006a88:	10a4      	asrs	r4, r4, #2
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	08007d38 	.word	0x08007d38
 8006aa8:	08007d38 	.word	0x08007d38
 8006aac:	08007d38 	.word	0x08007d38
 8006ab0:	08007d3c 	.word	0x08007d3c

08006ab4 <memcpy>:
 8006ab4:	440a      	add	r2, r1
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006abc:	d100      	bne.n	8006ac0 <memcpy+0xc>
 8006abe:	4770      	bx	lr
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006acc:	d1f9      	bne.n	8006ac2 <memcpy+0xe>
 8006ace:	bd10      	pop	{r4, pc}

08006ad0 <memset>:
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4402      	add	r2, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <iprintf>:
 8006ae0:	b40f      	push	{r0, r1, r2, r3}
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <iprintf+0x2c>)
 8006ae4:	b513      	push	{r0, r1, r4, lr}
 8006ae6:	681c      	ldr	r4, [r3, #0]
 8006ae8:	b124      	cbz	r4, 8006af4 <iprintf+0x14>
 8006aea:	69a3      	ldr	r3, [r4, #24]
 8006aec:	b913      	cbnz	r3, 8006af4 <iprintf+0x14>
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f866 	bl	8006bc0 <__sinit>
 8006af4:	ab05      	add	r3, sp, #20
 8006af6:	4620      	mov	r0, r4
 8006af8:	9a04      	ldr	r2, [sp, #16]
 8006afa:	68a1      	ldr	r1, [r4, #8]
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	f000 f9bb 	bl	8006e78 <_vfiprintf_r>
 8006b02:	b002      	add	sp, #8
 8006b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b08:	b004      	add	sp, #16
 8006b0a:	4770      	bx	lr
 8006b0c:	20000014 	.word	0x20000014

08006b10 <std>:
 8006b10:	2300      	movs	r3, #0
 8006b12:	b510      	push	{r4, lr}
 8006b14:	4604      	mov	r4, r0
 8006b16:	e9c0 3300 	strd	r3, r3, [r0]
 8006b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b1e:	6083      	str	r3, [r0, #8]
 8006b20:	8181      	strh	r1, [r0, #12]
 8006b22:	6643      	str	r3, [r0, #100]	; 0x64
 8006b24:	81c2      	strh	r2, [r0, #14]
 8006b26:	6183      	str	r3, [r0, #24]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	305c      	adds	r0, #92	; 0x5c
 8006b2e:	f7ff ffcf 	bl	8006ad0 <memset>
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std+0x38>)
 8006b34:	6224      	str	r4, [r4, #32]
 8006b36:	6263      	str	r3, [r4, #36]	; 0x24
 8006b38:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <std+0x3c>)
 8006b3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b3c:	4b04      	ldr	r3, [pc, #16]	; (8006b50 <std+0x40>)
 8006b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <std+0x44>)
 8006b42:	6323      	str	r3, [r4, #48]	; 0x30
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	bf00      	nop
 8006b48:	08007425 	.word	0x08007425
 8006b4c:	08007447 	.word	0x08007447
 8006b50:	0800747f 	.word	0x0800747f
 8006b54:	080074a3 	.word	0x080074a3

08006b58 <_cleanup_r>:
 8006b58:	4901      	ldr	r1, [pc, #4]	; (8006b60 <_cleanup_r+0x8>)
 8006b5a:	f000 b8af 	b.w	8006cbc <_fwalk_reent>
 8006b5e:	bf00      	nop
 8006b60:	08007775 	.word	0x08007775

08006b64 <__sfmoreglue>:
 8006b64:	2268      	movs	r2, #104	; 0x68
 8006b66:	b570      	push	{r4, r5, r6, lr}
 8006b68:	1e4d      	subs	r5, r1, #1
 8006b6a:	4355      	muls	r5, r2
 8006b6c:	460e      	mov	r6, r1
 8006b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b72:	f000 f8e5 	bl	8006d40 <_malloc_r>
 8006b76:	4604      	mov	r4, r0
 8006b78:	b140      	cbz	r0, 8006b8c <__sfmoreglue+0x28>
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b80:	300c      	adds	r0, #12
 8006b82:	60a0      	str	r0, [r4, #8]
 8006b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b88:	f7ff ffa2 	bl	8006ad0 <memset>
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}

08006b90 <__sfp_lock_acquire>:
 8006b90:	4801      	ldr	r0, [pc, #4]	; (8006b98 <__sfp_lock_acquire+0x8>)
 8006b92:	f000 b8b3 	b.w	8006cfc <__retarget_lock_acquire_recursive>
 8006b96:	bf00      	nop
 8006b98:	20003909 	.word	0x20003909

08006b9c <__sfp_lock_release>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <__sfp_lock_release+0x8>)
 8006b9e:	f000 b8ae 	b.w	8006cfe <__retarget_lock_release_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20003909 	.word	0x20003909

08006ba8 <__sinit_lock_acquire>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__sinit_lock_acquire+0x8>)
 8006baa:	f000 b8a7 	b.w	8006cfc <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	2000390a 	.word	0x2000390a

08006bb4 <__sinit_lock_release>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__sinit_lock_release+0x8>)
 8006bb6:	f000 b8a2 	b.w	8006cfe <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	2000390a 	.word	0x2000390a

08006bc0 <__sinit>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	f7ff fff0 	bl	8006ba8 <__sinit_lock_acquire>
 8006bc8:	69a3      	ldr	r3, [r4, #24]
 8006bca:	b11b      	cbz	r3, 8006bd4 <__sinit+0x14>
 8006bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd0:	f7ff bff0 	b.w	8006bb4 <__sinit_lock_release>
 8006bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8006bda:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <__sinit+0x68>)
 8006bdc:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <__sinit+0x6c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006be2:	42a3      	cmp	r3, r4
 8006be4:	bf08      	it	eq
 8006be6:	2301      	moveq	r3, #1
 8006be8:	4620      	mov	r0, r4
 8006bea:	bf08      	it	eq
 8006bec:	61a3      	streq	r3, [r4, #24]
 8006bee:	f000 f81f 	bl	8006c30 <__sfp>
 8006bf2:	6060      	str	r0, [r4, #4]
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 f81b 	bl	8006c30 <__sfp>
 8006bfa:	60a0      	str	r0, [r4, #8]
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 f817 	bl	8006c30 <__sfp>
 8006c02:	2200      	movs	r2, #0
 8006c04:	2104      	movs	r1, #4
 8006c06:	60e0      	str	r0, [r4, #12]
 8006c08:	6860      	ldr	r0, [r4, #4]
 8006c0a:	f7ff ff81 	bl	8006b10 <std>
 8006c0e:	2201      	movs	r2, #1
 8006c10:	2109      	movs	r1, #9
 8006c12:	68a0      	ldr	r0, [r4, #8]
 8006c14:	f7ff ff7c 	bl	8006b10 <std>
 8006c18:	2202      	movs	r2, #2
 8006c1a:	2112      	movs	r1, #18
 8006c1c:	68e0      	ldr	r0, [r4, #12]
 8006c1e:	f7ff ff77 	bl	8006b10 <std>
 8006c22:	2301      	movs	r3, #1
 8006c24:	61a3      	str	r3, [r4, #24]
 8006c26:	e7d1      	b.n	8006bcc <__sinit+0xc>
 8006c28:	08007c98 	.word	0x08007c98
 8006c2c:	08006b59 	.word	0x08006b59

08006c30 <__sfp>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	4607      	mov	r7, r0
 8006c34:	f7ff ffac 	bl	8006b90 <__sfp_lock_acquire>
 8006c38:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <__sfp+0x84>)
 8006c3a:	681e      	ldr	r6, [r3, #0]
 8006c3c:	69b3      	ldr	r3, [r6, #24]
 8006c3e:	b913      	cbnz	r3, 8006c46 <__sfp+0x16>
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff ffbd 	bl	8006bc0 <__sinit>
 8006c46:	3648      	adds	r6, #72	; 0x48
 8006c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	d503      	bpl.n	8006c58 <__sfp+0x28>
 8006c50:	6833      	ldr	r3, [r6, #0]
 8006c52:	b30b      	cbz	r3, 8006c98 <__sfp+0x68>
 8006c54:	6836      	ldr	r6, [r6, #0]
 8006c56:	e7f7      	b.n	8006c48 <__sfp+0x18>
 8006c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c5c:	b9d5      	cbnz	r5, 8006c94 <__sfp+0x64>
 8006c5e:	4b16      	ldr	r3, [pc, #88]	; (8006cb8 <__sfp+0x88>)
 8006c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c64:	60e3      	str	r3, [r4, #12]
 8006c66:	6665      	str	r5, [r4, #100]	; 0x64
 8006c68:	f000 f847 	bl	8006cfa <__retarget_lock_init_recursive>
 8006c6c:	f7ff ff96 	bl	8006b9c <__sfp_lock_release>
 8006c70:	2208      	movs	r2, #8
 8006c72:	4629      	mov	r1, r5
 8006c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c7c:	6025      	str	r5, [r4, #0]
 8006c7e:	61a5      	str	r5, [r4, #24]
 8006c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c84:	f7ff ff24 	bl	8006ad0 <memset>
 8006c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c90:	4620      	mov	r0, r4
 8006c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c94:	3468      	adds	r4, #104	; 0x68
 8006c96:	e7d9      	b.n	8006c4c <__sfp+0x1c>
 8006c98:	2104      	movs	r1, #4
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f7ff ff62 	bl	8006b64 <__sfmoreglue>
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	6030      	str	r0, [r6, #0]
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d1d5      	bne.n	8006c54 <__sfp+0x24>
 8006ca8:	f7ff ff78 	bl	8006b9c <__sfp_lock_release>
 8006cac:	230c      	movs	r3, #12
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	e7ee      	b.n	8006c90 <__sfp+0x60>
 8006cb2:	bf00      	nop
 8006cb4:	08007c98 	.word	0x08007c98
 8006cb8:	ffff0001 	.word	0xffff0001

08006cbc <_fwalk_reent>:
 8006cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	4688      	mov	r8, r1
 8006cc4:	2700      	movs	r7, #0
 8006cc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cce:	f1b9 0901 	subs.w	r9, r9, #1
 8006cd2:	d505      	bpl.n	8006ce0 <_fwalk_reent+0x24>
 8006cd4:	6824      	ldr	r4, [r4, #0]
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	d1f7      	bne.n	8006cca <_fwalk_reent+0xe>
 8006cda:	4638      	mov	r0, r7
 8006cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce0:	89ab      	ldrh	r3, [r5, #12]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d907      	bls.n	8006cf6 <_fwalk_reent+0x3a>
 8006ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cea:	3301      	adds	r3, #1
 8006cec:	d003      	beq.n	8006cf6 <_fwalk_reent+0x3a>
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	47c0      	blx	r8
 8006cf4:	4307      	orrs	r7, r0
 8006cf6:	3568      	adds	r5, #104	; 0x68
 8006cf8:	e7e9      	b.n	8006cce <_fwalk_reent+0x12>

08006cfa <__retarget_lock_init_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <__retarget_lock_acquire_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <__retarget_lock_release_recursive>:
 8006cfe:	4770      	bx	lr

08006d00 <sbrk_aligned>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4e0e      	ldr	r6, [pc, #56]	; (8006d3c <sbrk_aligned+0x3c>)
 8006d04:	460c      	mov	r4, r1
 8006d06:	6831      	ldr	r1, [r6, #0]
 8006d08:	4605      	mov	r5, r0
 8006d0a:	b911      	cbnz	r1, 8006d12 <sbrk_aligned+0x12>
 8006d0c:	f000 fb7a 	bl	8007404 <_sbrk_r>
 8006d10:	6030      	str	r0, [r6, #0]
 8006d12:	4621      	mov	r1, r4
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 fb75 	bl	8007404 <_sbrk_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	d00a      	beq.n	8006d34 <sbrk_aligned+0x34>
 8006d1e:	1cc4      	adds	r4, r0, #3
 8006d20:	f024 0403 	bic.w	r4, r4, #3
 8006d24:	42a0      	cmp	r0, r4
 8006d26:	d007      	beq.n	8006d38 <sbrk_aligned+0x38>
 8006d28:	1a21      	subs	r1, r4, r0
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f000 fb6a 	bl	8007404 <_sbrk_r>
 8006d30:	3001      	adds	r0, #1
 8006d32:	d101      	bne.n	8006d38 <sbrk_aligned+0x38>
 8006d34:	f04f 34ff 	mov.w	r4, #4294967295
 8006d38:	4620      	mov	r0, r4
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	20003910 	.word	0x20003910

08006d40 <_malloc_r>:
 8006d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d44:	1ccd      	adds	r5, r1, #3
 8006d46:	f025 0503 	bic.w	r5, r5, #3
 8006d4a:	3508      	adds	r5, #8
 8006d4c:	2d0c      	cmp	r5, #12
 8006d4e:	bf38      	it	cc
 8006d50:	250c      	movcc	r5, #12
 8006d52:	2d00      	cmp	r5, #0
 8006d54:	4607      	mov	r7, r0
 8006d56:	db01      	blt.n	8006d5c <_malloc_r+0x1c>
 8006d58:	42a9      	cmp	r1, r5
 8006d5a:	d905      	bls.n	8006d68 <_malloc_r+0x28>
 8006d5c:	230c      	movs	r3, #12
 8006d5e:	2600      	movs	r6, #0
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	4630      	mov	r0, r6
 8006d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d68:	4e2e      	ldr	r6, [pc, #184]	; (8006e24 <_malloc_r+0xe4>)
 8006d6a:	f000 fdc5 	bl	80078f8 <__malloc_lock>
 8006d6e:	6833      	ldr	r3, [r6, #0]
 8006d70:	461c      	mov	r4, r3
 8006d72:	bb34      	cbnz	r4, 8006dc2 <_malloc_r+0x82>
 8006d74:	4629      	mov	r1, r5
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff ffc2 	bl	8006d00 <sbrk_aligned>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	4604      	mov	r4, r0
 8006d80:	d14d      	bne.n	8006e1e <_malloc_r+0xde>
 8006d82:	6834      	ldr	r4, [r6, #0]
 8006d84:	4626      	mov	r6, r4
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d140      	bne.n	8006e0c <_malloc_r+0xcc>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4638      	mov	r0, r7
 8006d90:	eb04 0803 	add.w	r8, r4, r3
 8006d94:	f000 fb36 	bl	8007404 <_sbrk_r>
 8006d98:	4580      	cmp	r8, r0
 8006d9a:	d13a      	bne.n	8006e12 <_malloc_r+0xd2>
 8006d9c:	6821      	ldr	r1, [r4, #0]
 8006d9e:	3503      	adds	r5, #3
 8006da0:	1a6d      	subs	r5, r5, r1
 8006da2:	f025 0503 	bic.w	r5, r5, #3
 8006da6:	3508      	adds	r5, #8
 8006da8:	2d0c      	cmp	r5, #12
 8006daa:	bf38      	it	cc
 8006dac:	250c      	movcc	r5, #12
 8006dae:	4638      	mov	r0, r7
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7ff ffa5 	bl	8006d00 <sbrk_aligned>
 8006db6:	3001      	adds	r0, #1
 8006db8:	d02b      	beq.n	8006e12 <_malloc_r+0xd2>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	442b      	add	r3, r5
 8006dbe:	6023      	str	r3, [r4, #0]
 8006dc0:	e00e      	b.n	8006de0 <_malloc_r+0xa0>
 8006dc2:	6822      	ldr	r2, [r4, #0]
 8006dc4:	1b52      	subs	r2, r2, r5
 8006dc6:	d41e      	bmi.n	8006e06 <_malloc_r+0xc6>
 8006dc8:	2a0b      	cmp	r2, #11
 8006dca:	d916      	bls.n	8006dfa <_malloc_r+0xba>
 8006dcc:	1961      	adds	r1, r4, r5
 8006dce:	42a3      	cmp	r3, r4
 8006dd0:	6025      	str	r5, [r4, #0]
 8006dd2:	bf18      	it	ne
 8006dd4:	6059      	strne	r1, [r3, #4]
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	bf08      	it	eq
 8006dda:	6031      	streq	r1, [r6, #0]
 8006ddc:	5162      	str	r2, [r4, r5]
 8006dde:	604b      	str	r3, [r1, #4]
 8006de0:	4638      	mov	r0, r7
 8006de2:	f104 060b 	add.w	r6, r4, #11
 8006de6:	f000 fd8d 	bl	8007904 <__malloc_unlock>
 8006dea:	f026 0607 	bic.w	r6, r6, #7
 8006dee:	1d23      	adds	r3, r4, #4
 8006df0:	1af2      	subs	r2, r6, r3
 8006df2:	d0b6      	beq.n	8006d62 <_malloc_r+0x22>
 8006df4:	1b9b      	subs	r3, r3, r6
 8006df6:	50a3      	str	r3, [r4, r2]
 8006df8:	e7b3      	b.n	8006d62 <_malloc_r+0x22>
 8006dfa:	6862      	ldr	r2, [r4, #4]
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	bf0c      	ite	eq
 8006e00:	6032      	streq	r2, [r6, #0]
 8006e02:	605a      	strne	r2, [r3, #4]
 8006e04:	e7ec      	b.n	8006de0 <_malloc_r+0xa0>
 8006e06:	4623      	mov	r3, r4
 8006e08:	6864      	ldr	r4, [r4, #4]
 8006e0a:	e7b2      	b.n	8006d72 <_malloc_r+0x32>
 8006e0c:	4634      	mov	r4, r6
 8006e0e:	6876      	ldr	r6, [r6, #4]
 8006e10:	e7b9      	b.n	8006d86 <_malloc_r+0x46>
 8006e12:	230c      	movs	r3, #12
 8006e14:	4638      	mov	r0, r7
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	f000 fd74 	bl	8007904 <__malloc_unlock>
 8006e1c:	e7a1      	b.n	8006d62 <_malloc_r+0x22>
 8006e1e:	6025      	str	r5, [r4, #0]
 8006e20:	e7de      	b.n	8006de0 <_malloc_r+0xa0>
 8006e22:	bf00      	nop
 8006e24:	2000390c 	.word	0x2000390c

08006e28 <__sfputc_r>:
 8006e28:	6893      	ldr	r3, [r2, #8]
 8006e2a:	b410      	push	{r4}
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	6093      	str	r3, [r2, #8]
 8006e32:	da07      	bge.n	8006e44 <__sfputc_r+0x1c>
 8006e34:	6994      	ldr	r4, [r2, #24]
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	db01      	blt.n	8006e3e <__sfputc_r+0x16>
 8006e3a:	290a      	cmp	r1, #10
 8006e3c:	d102      	bne.n	8006e44 <__sfputc_r+0x1c>
 8006e3e:	bc10      	pop	{r4}
 8006e40:	f000 bb34 	b.w	80074ac <__swbuf_r>
 8006e44:	6813      	ldr	r3, [r2, #0]
 8006e46:	1c58      	adds	r0, r3, #1
 8006e48:	6010      	str	r0, [r2, #0]
 8006e4a:	7019      	strb	r1, [r3, #0]
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	bc10      	pop	{r4}
 8006e50:	4770      	bx	lr

08006e52 <__sfputs_r>:
 8006e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e54:	4606      	mov	r6, r0
 8006e56:	460f      	mov	r7, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	18d5      	adds	r5, r2, r3
 8006e5c:	42ac      	cmp	r4, r5
 8006e5e:	d101      	bne.n	8006e64 <__sfputs_r+0x12>
 8006e60:	2000      	movs	r0, #0
 8006e62:	e007      	b.n	8006e74 <__sfputs_r+0x22>
 8006e64:	463a      	mov	r2, r7
 8006e66:	4630      	mov	r0, r6
 8006e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6c:	f7ff ffdc 	bl	8006e28 <__sfputc_r>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d1f3      	bne.n	8006e5c <__sfputs_r+0xa>
 8006e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e78 <_vfiprintf_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	4614      	mov	r4, r2
 8006e80:	4698      	mov	r8, r3
 8006e82:	4606      	mov	r6, r0
 8006e84:	b09d      	sub	sp, #116	; 0x74
 8006e86:	b118      	cbz	r0, 8006e90 <_vfiprintf_r+0x18>
 8006e88:	6983      	ldr	r3, [r0, #24]
 8006e8a:	b90b      	cbnz	r3, 8006e90 <_vfiprintf_r+0x18>
 8006e8c:	f7ff fe98 	bl	8006bc0 <__sinit>
 8006e90:	4b89      	ldr	r3, [pc, #548]	; (80070b8 <_vfiprintf_r+0x240>)
 8006e92:	429d      	cmp	r5, r3
 8006e94:	d11b      	bne.n	8006ece <_vfiprintf_r+0x56>
 8006e96:	6875      	ldr	r5, [r6, #4]
 8006e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e9a:	07d9      	lsls	r1, r3, #31
 8006e9c:	d405      	bmi.n	8006eaa <_vfiprintf_r+0x32>
 8006e9e:	89ab      	ldrh	r3, [r5, #12]
 8006ea0:	059a      	lsls	r2, r3, #22
 8006ea2:	d402      	bmi.n	8006eaa <_vfiprintf_r+0x32>
 8006ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea6:	f7ff ff29 	bl	8006cfc <__retarget_lock_acquire_recursive>
 8006eaa:	89ab      	ldrh	r3, [r5, #12]
 8006eac:	071b      	lsls	r3, r3, #28
 8006eae:	d501      	bpl.n	8006eb4 <_vfiprintf_r+0x3c>
 8006eb0:	692b      	ldr	r3, [r5, #16]
 8006eb2:	b9eb      	cbnz	r3, 8006ef0 <_vfiprintf_r+0x78>
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f000 fb5c 	bl	8007574 <__swsetup_r>
 8006ebc:	b1c0      	cbz	r0, 8006ef0 <_vfiprintf_r+0x78>
 8006ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ec0:	07dc      	lsls	r4, r3, #31
 8006ec2:	d50e      	bpl.n	8006ee2 <_vfiprintf_r+0x6a>
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	b01d      	add	sp, #116	; 0x74
 8006eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ece:	4b7b      	ldr	r3, [pc, #492]	; (80070bc <_vfiprintf_r+0x244>)
 8006ed0:	429d      	cmp	r5, r3
 8006ed2:	d101      	bne.n	8006ed8 <_vfiprintf_r+0x60>
 8006ed4:	68b5      	ldr	r5, [r6, #8]
 8006ed6:	e7df      	b.n	8006e98 <_vfiprintf_r+0x20>
 8006ed8:	4b79      	ldr	r3, [pc, #484]	; (80070c0 <_vfiprintf_r+0x248>)
 8006eda:	429d      	cmp	r5, r3
 8006edc:	bf08      	it	eq
 8006ede:	68f5      	ldreq	r5, [r6, #12]
 8006ee0:	e7da      	b.n	8006e98 <_vfiprintf_r+0x20>
 8006ee2:	89ab      	ldrh	r3, [r5, #12]
 8006ee4:	0598      	lsls	r0, r3, #22
 8006ee6:	d4ed      	bmi.n	8006ec4 <_vfiprintf_r+0x4c>
 8006ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eea:	f7ff ff08 	bl	8006cfe <__retarget_lock_release_recursive>
 8006eee:	e7e9      	b.n	8006ec4 <_vfiprintf_r+0x4c>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef4:	2320      	movs	r3, #32
 8006ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006efa:	2330      	movs	r3, #48	; 0x30
 8006efc:	f04f 0901 	mov.w	r9, #1
 8006f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f04:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80070c4 <_vfiprintf_r+0x24c>
 8006f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	469a      	mov	sl, r3
 8006f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f14:	b10a      	cbz	r2, 8006f1a <_vfiprintf_r+0xa2>
 8006f16:	2a25      	cmp	r2, #37	; 0x25
 8006f18:	d1f9      	bne.n	8006f0e <_vfiprintf_r+0x96>
 8006f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f1e:	d00b      	beq.n	8006f38 <_vfiprintf_r+0xc0>
 8006f20:	465b      	mov	r3, fp
 8006f22:	4622      	mov	r2, r4
 8006f24:	4629      	mov	r1, r5
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ff93 	bl	8006e52 <__sfputs_r>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f000 80aa 	beq.w	8007086 <_vfiprintf_r+0x20e>
 8006f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f34:	445a      	add	r2, fp
 8006f36:	9209      	str	r2, [sp, #36]	; 0x24
 8006f38:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80a2 	beq.w	8007086 <_vfiprintf_r+0x20e>
 8006f42:	2300      	movs	r3, #0
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295
 8006f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f4c:	f10a 0a01 	add.w	sl, sl, #1
 8006f50:	9304      	str	r3, [sp, #16]
 8006f52:	9307      	str	r3, [sp, #28]
 8006f54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f58:	931a      	str	r3, [sp, #104]	; 0x68
 8006f5a:	4654      	mov	r4, sl
 8006f5c:	2205      	movs	r2, #5
 8006f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f62:	4858      	ldr	r0, [pc, #352]	; (80070c4 <_vfiprintf_r+0x24c>)
 8006f64:	f000 fcba 	bl	80078dc <memchr>
 8006f68:	9a04      	ldr	r2, [sp, #16]
 8006f6a:	b9d8      	cbnz	r0, 8006fa4 <_vfiprintf_r+0x12c>
 8006f6c:	06d1      	lsls	r1, r2, #27
 8006f6e:	bf44      	itt	mi
 8006f70:	2320      	movmi	r3, #32
 8006f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f76:	0713      	lsls	r3, r2, #28
 8006f78:	bf44      	itt	mi
 8006f7a:	232b      	movmi	r3, #43	; 0x2b
 8006f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f80:	f89a 3000 	ldrb.w	r3, [sl]
 8006f84:	2b2a      	cmp	r3, #42	; 0x2a
 8006f86:	d015      	beq.n	8006fb4 <_vfiprintf_r+0x13c>
 8006f88:	4654      	mov	r4, sl
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	f04f 0c0a 	mov.w	ip, #10
 8006f90:	9a07      	ldr	r2, [sp, #28]
 8006f92:	4621      	mov	r1, r4
 8006f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f98:	3b30      	subs	r3, #48	; 0x30
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	d94e      	bls.n	800703c <_vfiprintf_r+0x1c4>
 8006f9e:	b1b0      	cbz	r0, 8006fce <_vfiprintf_r+0x156>
 8006fa0:	9207      	str	r2, [sp, #28]
 8006fa2:	e014      	b.n	8006fce <_vfiprintf_r+0x156>
 8006fa4:	eba0 0308 	sub.w	r3, r0, r8
 8006fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fac:	4313      	orrs	r3, r2
 8006fae:	46a2      	mov	sl, r4
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	e7d2      	b.n	8006f5a <_vfiprintf_r+0xe2>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	1d19      	adds	r1, r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	9103      	str	r1, [sp, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfbb      	ittet	lt
 8006fc0:	425b      	neglt	r3, r3
 8006fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006fc6:	9307      	strge	r3, [sp, #28]
 8006fc8:	9307      	strlt	r3, [sp, #28]
 8006fca:	bfb8      	it	lt
 8006fcc:	9204      	strlt	r2, [sp, #16]
 8006fce:	7823      	ldrb	r3, [r4, #0]
 8006fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd2:	d10c      	bne.n	8006fee <_vfiprintf_r+0x176>
 8006fd4:	7863      	ldrb	r3, [r4, #1]
 8006fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd8:	d135      	bne.n	8007046 <_vfiprintf_r+0x1ce>
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	3402      	adds	r4, #2
 8006fde:	1d1a      	adds	r2, r3, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	9203      	str	r2, [sp, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfb8      	it	lt
 8006fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fec:	9305      	str	r3, [sp, #20]
 8006fee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80070c8 <_vfiprintf_r+0x250>
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	4650      	mov	r0, sl
 8006ff6:	7821      	ldrb	r1, [r4, #0]
 8006ff8:	f000 fc70 	bl	80078dc <memchr>
 8006ffc:	b140      	cbz	r0, 8007010 <_vfiprintf_r+0x198>
 8006ffe:	2340      	movs	r3, #64	; 0x40
 8007000:	eba0 000a 	sub.w	r0, r0, sl
 8007004:	fa03 f000 	lsl.w	r0, r3, r0
 8007008:	9b04      	ldr	r3, [sp, #16]
 800700a:	3401      	adds	r4, #1
 800700c:	4303      	orrs	r3, r0
 800700e:	9304      	str	r3, [sp, #16]
 8007010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007014:	2206      	movs	r2, #6
 8007016:	482d      	ldr	r0, [pc, #180]	; (80070cc <_vfiprintf_r+0x254>)
 8007018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800701c:	f000 fc5e 	bl	80078dc <memchr>
 8007020:	2800      	cmp	r0, #0
 8007022:	d03f      	beq.n	80070a4 <_vfiprintf_r+0x22c>
 8007024:	4b2a      	ldr	r3, [pc, #168]	; (80070d0 <_vfiprintf_r+0x258>)
 8007026:	bb1b      	cbnz	r3, 8007070 <_vfiprintf_r+0x1f8>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	3307      	adds	r3, #7
 800702c:	f023 0307 	bic.w	r3, r3, #7
 8007030:	3308      	adds	r3, #8
 8007032:	9303      	str	r3, [sp, #12]
 8007034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007036:	443b      	add	r3, r7
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	e767      	b.n	8006f0c <_vfiprintf_r+0x94>
 800703c:	460c      	mov	r4, r1
 800703e:	2001      	movs	r0, #1
 8007040:	fb0c 3202 	mla	r2, ip, r2, r3
 8007044:	e7a5      	b.n	8006f92 <_vfiprintf_r+0x11a>
 8007046:	2300      	movs	r3, #0
 8007048:	f04f 0c0a 	mov.w	ip, #10
 800704c:	4619      	mov	r1, r3
 800704e:	3401      	adds	r4, #1
 8007050:	9305      	str	r3, [sp, #20]
 8007052:	4620      	mov	r0, r4
 8007054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007058:	3a30      	subs	r2, #48	; 0x30
 800705a:	2a09      	cmp	r2, #9
 800705c:	d903      	bls.n	8007066 <_vfiprintf_r+0x1ee>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0c5      	beq.n	8006fee <_vfiprintf_r+0x176>
 8007062:	9105      	str	r1, [sp, #20]
 8007064:	e7c3      	b.n	8006fee <_vfiprintf_r+0x176>
 8007066:	4604      	mov	r4, r0
 8007068:	2301      	movs	r3, #1
 800706a:	fb0c 2101 	mla	r1, ip, r1, r2
 800706e:	e7f0      	b.n	8007052 <_vfiprintf_r+0x1da>
 8007070:	ab03      	add	r3, sp, #12
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	462a      	mov	r2, r5
 8007076:	4630      	mov	r0, r6
 8007078:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <_vfiprintf_r+0x25c>)
 800707a:	a904      	add	r1, sp, #16
 800707c:	f3af 8000 	nop.w
 8007080:	4607      	mov	r7, r0
 8007082:	1c78      	adds	r0, r7, #1
 8007084:	d1d6      	bne.n	8007034 <_vfiprintf_r+0x1bc>
 8007086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007088:	07d9      	lsls	r1, r3, #31
 800708a:	d405      	bmi.n	8007098 <_vfiprintf_r+0x220>
 800708c:	89ab      	ldrh	r3, [r5, #12]
 800708e:	059a      	lsls	r2, r3, #22
 8007090:	d402      	bmi.n	8007098 <_vfiprintf_r+0x220>
 8007092:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007094:	f7ff fe33 	bl	8006cfe <__retarget_lock_release_recursive>
 8007098:	89ab      	ldrh	r3, [r5, #12]
 800709a:	065b      	lsls	r3, r3, #25
 800709c:	f53f af12 	bmi.w	8006ec4 <_vfiprintf_r+0x4c>
 80070a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070a2:	e711      	b.n	8006ec8 <_vfiprintf_r+0x50>
 80070a4:	ab03      	add	r3, sp, #12
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	462a      	mov	r2, r5
 80070aa:	4630      	mov	r0, r6
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <_vfiprintf_r+0x25c>)
 80070ae:	a904      	add	r1, sp, #16
 80070b0:	f000 f882 	bl	80071b8 <_printf_i>
 80070b4:	e7e4      	b.n	8007080 <_vfiprintf_r+0x208>
 80070b6:	bf00      	nop
 80070b8:	08007cbc 	.word	0x08007cbc
 80070bc:	08007cdc 	.word	0x08007cdc
 80070c0:	08007c9c 	.word	0x08007c9c
 80070c4:	08007cfc 	.word	0x08007cfc
 80070c8:	08007d02 	.word	0x08007d02
 80070cc:	08007d06 	.word	0x08007d06
 80070d0:	00000000 	.word	0x00000000
 80070d4:	08006e53 	.word	0x08006e53

080070d8 <_printf_common>:
 80070d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070dc:	4616      	mov	r6, r2
 80070de:	4699      	mov	r9, r3
 80070e0:	688a      	ldr	r2, [r1, #8]
 80070e2:	690b      	ldr	r3, [r1, #16]
 80070e4:	4607      	mov	r7, r0
 80070e6:	4293      	cmp	r3, r2
 80070e8:	bfb8      	it	lt
 80070ea:	4613      	movlt	r3, r2
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070f2:	460c      	mov	r4, r1
 80070f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070f8:	b10a      	cbz	r2, 80070fe <_printf_common+0x26>
 80070fa:	3301      	adds	r3, #1
 80070fc:	6033      	str	r3, [r6, #0]
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	0699      	lsls	r1, r3, #26
 8007102:	bf42      	ittt	mi
 8007104:	6833      	ldrmi	r3, [r6, #0]
 8007106:	3302      	addmi	r3, #2
 8007108:	6033      	strmi	r3, [r6, #0]
 800710a:	6825      	ldr	r5, [r4, #0]
 800710c:	f015 0506 	ands.w	r5, r5, #6
 8007110:	d106      	bne.n	8007120 <_printf_common+0x48>
 8007112:	f104 0a19 	add.w	sl, r4, #25
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	6832      	ldr	r2, [r6, #0]
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	42ab      	cmp	r3, r5
 800711e:	dc28      	bgt.n	8007172 <_printf_common+0x9a>
 8007120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007124:	1e13      	subs	r3, r2, #0
 8007126:	6822      	ldr	r2, [r4, #0]
 8007128:	bf18      	it	ne
 800712a:	2301      	movne	r3, #1
 800712c:	0692      	lsls	r2, r2, #26
 800712e:	d42d      	bmi.n	800718c <_printf_common+0xb4>
 8007130:	4649      	mov	r1, r9
 8007132:	4638      	mov	r0, r7
 8007134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d020      	beq.n	8007180 <_printf_common+0xa8>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	68e5      	ldr	r5, [r4, #12]
 8007142:	f003 0306 	and.w	r3, r3, #6
 8007146:	2b04      	cmp	r3, #4
 8007148:	bf18      	it	ne
 800714a:	2500      	movne	r5, #0
 800714c:	6832      	ldr	r2, [r6, #0]
 800714e:	f04f 0600 	mov.w	r6, #0
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	bf08      	it	eq
 8007156:	1aad      	subeq	r5, r5, r2
 8007158:	6922      	ldr	r2, [r4, #16]
 800715a:	bf08      	it	eq
 800715c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007160:	4293      	cmp	r3, r2
 8007162:	bfc4      	itt	gt
 8007164:	1a9b      	subgt	r3, r3, r2
 8007166:	18ed      	addgt	r5, r5, r3
 8007168:	341a      	adds	r4, #26
 800716a:	42b5      	cmp	r5, r6
 800716c:	d11a      	bne.n	80071a4 <_printf_common+0xcc>
 800716e:	2000      	movs	r0, #0
 8007170:	e008      	b.n	8007184 <_printf_common+0xac>
 8007172:	2301      	movs	r3, #1
 8007174:	4652      	mov	r2, sl
 8007176:	4649      	mov	r1, r9
 8007178:	4638      	mov	r0, r7
 800717a:	47c0      	blx	r8
 800717c:	3001      	adds	r0, #1
 800717e:	d103      	bne.n	8007188 <_printf_common+0xb0>
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007188:	3501      	adds	r5, #1
 800718a:	e7c4      	b.n	8007116 <_printf_common+0x3e>
 800718c:	2030      	movs	r0, #48	; 0x30
 800718e:	18e1      	adds	r1, r4, r3
 8007190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800719a:	4422      	add	r2, r4
 800719c:	3302      	adds	r3, #2
 800719e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071a2:	e7c5      	b.n	8007130 <_printf_common+0x58>
 80071a4:	2301      	movs	r3, #1
 80071a6:	4622      	mov	r2, r4
 80071a8:	4649      	mov	r1, r9
 80071aa:	4638      	mov	r0, r7
 80071ac:	47c0      	blx	r8
 80071ae:	3001      	adds	r0, #1
 80071b0:	d0e6      	beq.n	8007180 <_printf_common+0xa8>
 80071b2:	3601      	adds	r6, #1
 80071b4:	e7d9      	b.n	800716a <_printf_common+0x92>
	...

080071b8 <_printf_i>:
 80071b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	7e0f      	ldrb	r7, [r1, #24]
 80071be:	4691      	mov	r9, r2
 80071c0:	2f78      	cmp	r7, #120	; 0x78
 80071c2:	4680      	mov	r8, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	469a      	mov	sl, r3
 80071c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ce:	d807      	bhi.n	80071e0 <_printf_i+0x28>
 80071d0:	2f62      	cmp	r7, #98	; 0x62
 80071d2:	d80a      	bhi.n	80071ea <_printf_i+0x32>
 80071d4:	2f00      	cmp	r7, #0
 80071d6:	f000 80d9 	beq.w	800738c <_printf_i+0x1d4>
 80071da:	2f58      	cmp	r7, #88	; 0x58
 80071dc:	f000 80a4 	beq.w	8007328 <_printf_i+0x170>
 80071e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071e8:	e03a      	b.n	8007260 <_printf_i+0xa8>
 80071ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ee:	2b15      	cmp	r3, #21
 80071f0:	d8f6      	bhi.n	80071e0 <_printf_i+0x28>
 80071f2:	a101      	add	r1, pc, #4	; (adr r1, 80071f8 <_printf_i+0x40>)
 80071f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071f8:	08007251 	.word	0x08007251
 80071fc:	08007265 	.word	0x08007265
 8007200:	080071e1 	.word	0x080071e1
 8007204:	080071e1 	.word	0x080071e1
 8007208:	080071e1 	.word	0x080071e1
 800720c:	080071e1 	.word	0x080071e1
 8007210:	08007265 	.word	0x08007265
 8007214:	080071e1 	.word	0x080071e1
 8007218:	080071e1 	.word	0x080071e1
 800721c:	080071e1 	.word	0x080071e1
 8007220:	080071e1 	.word	0x080071e1
 8007224:	08007373 	.word	0x08007373
 8007228:	08007295 	.word	0x08007295
 800722c:	08007355 	.word	0x08007355
 8007230:	080071e1 	.word	0x080071e1
 8007234:	080071e1 	.word	0x080071e1
 8007238:	08007395 	.word	0x08007395
 800723c:	080071e1 	.word	0x080071e1
 8007240:	08007295 	.word	0x08007295
 8007244:	080071e1 	.word	0x080071e1
 8007248:	080071e1 	.word	0x080071e1
 800724c:	0800735d 	.word	0x0800735d
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	1d1a      	adds	r2, r3, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	602a      	str	r2, [r5, #0]
 8007258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800725c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007260:	2301      	movs	r3, #1
 8007262:	e0a4      	b.n	80073ae <_printf_i+0x1f6>
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	6829      	ldr	r1, [r5, #0]
 8007268:	0606      	lsls	r6, r0, #24
 800726a:	f101 0304 	add.w	r3, r1, #4
 800726e:	d50a      	bpl.n	8007286 <_printf_i+0xce>
 8007270:	680e      	ldr	r6, [r1, #0]
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	2e00      	cmp	r6, #0
 8007276:	da03      	bge.n	8007280 <_printf_i+0xc8>
 8007278:	232d      	movs	r3, #45	; 0x2d
 800727a:	4276      	negs	r6, r6
 800727c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007280:	230a      	movs	r3, #10
 8007282:	485e      	ldr	r0, [pc, #376]	; (80073fc <_printf_i+0x244>)
 8007284:	e019      	b.n	80072ba <_printf_i+0x102>
 8007286:	680e      	ldr	r6, [r1, #0]
 8007288:	f010 0f40 	tst.w	r0, #64	; 0x40
 800728c:	602b      	str	r3, [r5, #0]
 800728e:	bf18      	it	ne
 8007290:	b236      	sxthne	r6, r6
 8007292:	e7ef      	b.n	8007274 <_printf_i+0xbc>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	1d19      	adds	r1, r3, #4
 800729a:	6029      	str	r1, [r5, #0]
 800729c:	0601      	lsls	r1, r0, #24
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0xec>
 80072a0:	681e      	ldr	r6, [r3, #0]
 80072a2:	e002      	b.n	80072aa <_printf_i+0xf2>
 80072a4:	0646      	lsls	r6, r0, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0xe8>
 80072a8:	881e      	ldrh	r6, [r3, #0]
 80072aa:	2f6f      	cmp	r7, #111	; 0x6f
 80072ac:	bf0c      	ite	eq
 80072ae:	2308      	moveq	r3, #8
 80072b0:	230a      	movne	r3, #10
 80072b2:	4852      	ldr	r0, [pc, #328]	; (80073fc <_printf_i+0x244>)
 80072b4:	2100      	movs	r1, #0
 80072b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ba:	6865      	ldr	r5, [r4, #4]
 80072bc:	2d00      	cmp	r5, #0
 80072be:	bfa8      	it	ge
 80072c0:	6821      	ldrge	r1, [r4, #0]
 80072c2:	60a5      	str	r5, [r4, #8]
 80072c4:	bfa4      	itt	ge
 80072c6:	f021 0104 	bicge.w	r1, r1, #4
 80072ca:	6021      	strge	r1, [r4, #0]
 80072cc:	b90e      	cbnz	r6, 80072d2 <_printf_i+0x11a>
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	d04d      	beq.n	800736e <_printf_i+0x1b6>
 80072d2:	4615      	mov	r5, r2
 80072d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80072d8:	fb03 6711 	mls	r7, r3, r1, r6
 80072dc:	5dc7      	ldrb	r7, [r0, r7]
 80072de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072e2:	4637      	mov	r7, r6
 80072e4:	42bb      	cmp	r3, r7
 80072e6:	460e      	mov	r6, r1
 80072e8:	d9f4      	bls.n	80072d4 <_printf_i+0x11c>
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d10b      	bne.n	8007306 <_printf_i+0x14e>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	07de      	lsls	r6, r3, #31
 80072f2:	d508      	bpl.n	8007306 <_printf_i+0x14e>
 80072f4:	6923      	ldr	r3, [r4, #16]
 80072f6:	6861      	ldr	r1, [r4, #4]
 80072f8:	4299      	cmp	r1, r3
 80072fa:	bfde      	ittt	le
 80072fc:	2330      	movle	r3, #48	; 0x30
 80072fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007302:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007306:	1b52      	subs	r2, r2, r5
 8007308:	6122      	str	r2, [r4, #16]
 800730a:	464b      	mov	r3, r9
 800730c:	4621      	mov	r1, r4
 800730e:	4640      	mov	r0, r8
 8007310:	f8cd a000 	str.w	sl, [sp]
 8007314:	aa03      	add	r2, sp, #12
 8007316:	f7ff fedf 	bl	80070d8 <_printf_common>
 800731a:	3001      	adds	r0, #1
 800731c:	d14c      	bne.n	80073b8 <_printf_i+0x200>
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	b004      	add	sp, #16
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	4834      	ldr	r0, [pc, #208]	; (80073fc <_printf_i+0x244>)
 800732a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800732e:	6829      	ldr	r1, [r5, #0]
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	f851 6b04 	ldr.w	r6, [r1], #4
 8007336:	6029      	str	r1, [r5, #0]
 8007338:	061d      	lsls	r5, r3, #24
 800733a:	d514      	bpl.n	8007366 <_printf_i+0x1ae>
 800733c:	07df      	lsls	r7, r3, #31
 800733e:	bf44      	itt	mi
 8007340:	f043 0320 	orrmi.w	r3, r3, #32
 8007344:	6023      	strmi	r3, [r4, #0]
 8007346:	b91e      	cbnz	r6, 8007350 <_printf_i+0x198>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	f023 0320 	bic.w	r3, r3, #32
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	2310      	movs	r3, #16
 8007352:	e7af      	b.n	80072b4 <_printf_i+0xfc>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	f043 0320 	orr.w	r3, r3, #32
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	2378      	movs	r3, #120	; 0x78
 800735e:	4828      	ldr	r0, [pc, #160]	; (8007400 <_printf_i+0x248>)
 8007360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007364:	e7e3      	b.n	800732e <_printf_i+0x176>
 8007366:	0659      	lsls	r1, r3, #25
 8007368:	bf48      	it	mi
 800736a:	b2b6      	uxthmi	r6, r6
 800736c:	e7e6      	b.n	800733c <_printf_i+0x184>
 800736e:	4615      	mov	r5, r2
 8007370:	e7bb      	b.n	80072ea <_printf_i+0x132>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	6826      	ldr	r6, [r4, #0]
 8007376:	1d18      	adds	r0, r3, #4
 8007378:	6961      	ldr	r1, [r4, #20]
 800737a:	6028      	str	r0, [r5, #0]
 800737c:	0635      	lsls	r5, r6, #24
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	d501      	bpl.n	8007386 <_printf_i+0x1ce>
 8007382:	6019      	str	r1, [r3, #0]
 8007384:	e002      	b.n	800738c <_printf_i+0x1d4>
 8007386:	0670      	lsls	r0, r6, #25
 8007388:	d5fb      	bpl.n	8007382 <_printf_i+0x1ca>
 800738a:	8019      	strh	r1, [r3, #0]
 800738c:	2300      	movs	r3, #0
 800738e:	4615      	mov	r5, r2
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	e7ba      	b.n	800730a <_printf_i+0x152>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	2100      	movs	r1, #0
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	602a      	str	r2, [r5, #0]
 800739c:	681d      	ldr	r5, [r3, #0]
 800739e:	6862      	ldr	r2, [r4, #4]
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 fa9b 	bl	80078dc <memchr>
 80073a6:	b108      	cbz	r0, 80073ac <_printf_i+0x1f4>
 80073a8:	1b40      	subs	r0, r0, r5
 80073aa:	6060      	str	r0, [r4, #4]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	2300      	movs	r3, #0
 80073b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073b6:	e7a8      	b.n	800730a <_printf_i+0x152>
 80073b8:	462a      	mov	r2, r5
 80073ba:	4649      	mov	r1, r9
 80073bc:	4640      	mov	r0, r8
 80073be:	6923      	ldr	r3, [r4, #16]
 80073c0:	47d0      	blx	sl
 80073c2:	3001      	adds	r0, #1
 80073c4:	d0ab      	beq.n	800731e <_printf_i+0x166>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	079b      	lsls	r3, r3, #30
 80073ca:	d413      	bmi.n	80073f4 <_printf_i+0x23c>
 80073cc:	68e0      	ldr	r0, [r4, #12]
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	4298      	cmp	r0, r3
 80073d2:	bfb8      	it	lt
 80073d4:	4618      	movlt	r0, r3
 80073d6:	e7a4      	b.n	8007322 <_printf_i+0x16a>
 80073d8:	2301      	movs	r3, #1
 80073da:	4632      	mov	r2, r6
 80073dc:	4649      	mov	r1, r9
 80073de:	4640      	mov	r0, r8
 80073e0:	47d0      	blx	sl
 80073e2:	3001      	adds	r0, #1
 80073e4:	d09b      	beq.n	800731e <_printf_i+0x166>
 80073e6:	3501      	adds	r5, #1
 80073e8:	68e3      	ldr	r3, [r4, #12]
 80073ea:	9903      	ldr	r1, [sp, #12]
 80073ec:	1a5b      	subs	r3, r3, r1
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	dcf2      	bgt.n	80073d8 <_printf_i+0x220>
 80073f2:	e7eb      	b.n	80073cc <_printf_i+0x214>
 80073f4:	2500      	movs	r5, #0
 80073f6:	f104 0619 	add.w	r6, r4, #25
 80073fa:	e7f5      	b.n	80073e8 <_printf_i+0x230>
 80073fc:	08007d0d 	.word	0x08007d0d
 8007400:	08007d1e 	.word	0x08007d1e

08007404 <_sbrk_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	2300      	movs	r3, #0
 8007408:	4d05      	ldr	r5, [pc, #20]	; (8007420 <_sbrk_r+0x1c>)
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	f7f9 fa68 	bl	80008e4 <_sbrk>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_sbrk_r+0x1a>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_sbrk_r+0x1a>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	20003914 	.word	0x20003914

08007424 <__sread>:
 8007424:	b510      	push	{r4, lr}
 8007426:	460c      	mov	r4, r1
 8007428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742c:	f000 fab8 	bl	80079a0 <_read_r>
 8007430:	2800      	cmp	r0, #0
 8007432:	bfab      	itete	ge
 8007434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007436:	89a3      	ldrhlt	r3, [r4, #12]
 8007438:	181b      	addge	r3, r3, r0
 800743a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800743e:	bfac      	ite	ge
 8007440:	6563      	strge	r3, [r4, #84]	; 0x54
 8007442:	81a3      	strhlt	r3, [r4, #12]
 8007444:	bd10      	pop	{r4, pc}

08007446 <__swrite>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	461f      	mov	r7, r3
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	4605      	mov	r5, r0
 8007450:	05db      	lsls	r3, r3, #23
 8007452:	460c      	mov	r4, r1
 8007454:	4616      	mov	r6, r2
 8007456:	d505      	bpl.n	8007464 <__swrite+0x1e>
 8007458:	2302      	movs	r3, #2
 800745a:	2200      	movs	r2, #0
 800745c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007460:	f000 f9c4 	bl	80077ec <_lseek_r>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	4632      	mov	r2, r6
 8007468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	4628      	mov	r0, r5
 8007470:	463b      	mov	r3, r7
 8007472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	f000 b869 	b.w	8007550 <_write_r>

0800747e <__sseek>:
 800747e:	b510      	push	{r4, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007486:	f000 f9b1 	bl	80077ec <_lseek_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	bf15      	itete	ne
 8007490:	6560      	strne	r0, [r4, #84]	; 0x54
 8007492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800749a:	81a3      	strheq	r3, [r4, #12]
 800749c:	bf18      	it	ne
 800749e:	81a3      	strhne	r3, [r4, #12]
 80074a0:	bd10      	pop	{r4, pc}

080074a2 <__sclose>:
 80074a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a6:	f000 b8d3 	b.w	8007650 <_close_r>
	...

080074ac <__swbuf_r>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	460e      	mov	r6, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	4605      	mov	r5, r0
 80074b4:	b118      	cbz	r0, 80074be <__swbuf_r+0x12>
 80074b6:	6983      	ldr	r3, [r0, #24]
 80074b8:	b90b      	cbnz	r3, 80074be <__swbuf_r+0x12>
 80074ba:	f7ff fb81 	bl	8006bc0 <__sinit>
 80074be:	4b21      	ldr	r3, [pc, #132]	; (8007544 <__swbuf_r+0x98>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	d12b      	bne.n	800751c <__swbuf_r+0x70>
 80074c4:	686c      	ldr	r4, [r5, #4]
 80074c6:	69a3      	ldr	r3, [r4, #24]
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	071a      	lsls	r2, r3, #28
 80074ce:	d52f      	bpl.n	8007530 <__swbuf_r+0x84>
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	b36b      	cbz	r3, 8007530 <__swbuf_r+0x84>
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	b2f6      	uxtb	r6, r6
 80074da:	1ac0      	subs	r0, r0, r3
 80074dc:	6963      	ldr	r3, [r4, #20]
 80074de:	4637      	mov	r7, r6
 80074e0:	4283      	cmp	r3, r0
 80074e2:	dc04      	bgt.n	80074ee <__swbuf_r+0x42>
 80074e4:	4621      	mov	r1, r4
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 f944 	bl	8007774 <_fflush_r>
 80074ec:	bb30      	cbnz	r0, 800753c <__swbuf_r+0x90>
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	3001      	adds	r0, #1
 80074f2:	3b01      	subs	r3, #1
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	6022      	str	r2, [r4, #0]
 80074fc:	701e      	strb	r6, [r3, #0]
 80074fe:	6963      	ldr	r3, [r4, #20]
 8007500:	4283      	cmp	r3, r0
 8007502:	d004      	beq.n	800750e <__swbuf_r+0x62>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	07db      	lsls	r3, r3, #31
 8007508:	d506      	bpl.n	8007518 <__swbuf_r+0x6c>
 800750a:	2e0a      	cmp	r6, #10
 800750c:	d104      	bne.n	8007518 <__swbuf_r+0x6c>
 800750e:	4621      	mov	r1, r4
 8007510:	4628      	mov	r0, r5
 8007512:	f000 f92f 	bl	8007774 <_fflush_r>
 8007516:	b988      	cbnz	r0, 800753c <__swbuf_r+0x90>
 8007518:	4638      	mov	r0, r7
 800751a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <__swbuf_r+0x9c>)
 800751e:	429c      	cmp	r4, r3
 8007520:	d101      	bne.n	8007526 <__swbuf_r+0x7a>
 8007522:	68ac      	ldr	r4, [r5, #8]
 8007524:	e7cf      	b.n	80074c6 <__swbuf_r+0x1a>
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <__swbuf_r+0xa0>)
 8007528:	429c      	cmp	r4, r3
 800752a:	bf08      	it	eq
 800752c:	68ec      	ldreq	r4, [r5, #12]
 800752e:	e7ca      	b.n	80074c6 <__swbuf_r+0x1a>
 8007530:	4621      	mov	r1, r4
 8007532:	4628      	mov	r0, r5
 8007534:	f000 f81e 	bl	8007574 <__swsetup_r>
 8007538:	2800      	cmp	r0, #0
 800753a:	d0cb      	beq.n	80074d4 <__swbuf_r+0x28>
 800753c:	f04f 37ff 	mov.w	r7, #4294967295
 8007540:	e7ea      	b.n	8007518 <__swbuf_r+0x6c>
 8007542:	bf00      	nop
 8007544:	08007cbc 	.word	0x08007cbc
 8007548:	08007cdc 	.word	0x08007cdc
 800754c:	08007c9c 	.word	0x08007c9c

08007550 <_write_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	2200      	movs	r2, #0
 800755a:	4d05      	ldr	r5, [pc, #20]	; (8007570 <_write_r+0x20>)
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f7f8 ffb8 	bl	80004d4 <_write>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_write_r+0x1e>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_write_r+0x1e>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20003914 	.word	0x20003914

08007574 <__swsetup_r>:
 8007574:	4b32      	ldr	r3, [pc, #200]	; (8007640 <__swsetup_r+0xcc>)
 8007576:	b570      	push	{r4, r5, r6, lr}
 8007578:	681d      	ldr	r5, [r3, #0]
 800757a:	4606      	mov	r6, r0
 800757c:	460c      	mov	r4, r1
 800757e:	b125      	cbz	r5, 800758a <__swsetup_r+0x16>
 8007580:	69ab      	ldr	r3, [r5, #24]
 8007582:	b913      	cbnz	r3, 800758a <__swsetup_r+0x16>
 8007584:	4628      	mov	r0, r5
 8007586:	f7ff fb1b 	bl	8006bc0 <__sinit>
 800758a:	4b2e      	ldr	r3, [pc, #184]	; (8007644 <__swsetup_r+0xd0>)
 800758c:	429c      	cmp	r4, r3
 800758e:	d10f      	bne.n	80075b0 <__swsetup_r+0x3c>
 8007590:	686c      	ldr	r4, [r5, #4]
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007598:	0719      	lsls	r1, r3, #28
 800759a:	d42c      	bmi.n	80075f6 <__swsetup_r+0x82>
 800759c:	06dd      	lsls	r5, r3, #27
 800759e:	d411      	bmi.n	80075c4 <__swsetup_r+0x50>
 80075a0:	2309      	movs	r3, #9
 80075a2:	6033      	str	r3, [r6, #0]
 80075a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	e03e      	b.n	800762e <__swsetup_r+0xba>
 80075b0:	4b25      	ldr	r3, [pc, #148]	; (8007648 <__swsetup_r+0xd4>)
 80075b2:	429c      	cmp	r4, r3
 80075b4:	d101      	bne.n	80075ba <__swsetup_r+0x46>
 80075b6:	68ac      	ldr	r4, [r5, #8]
 80075b8:	e7eb      	b.n	8007592 <__swsetup_r+0x1e>
 80075ba:	4b24      	ldr	r3, [pc, #144]	; (800764c <__swsetup_r+0xd8>)
 80075bc:	429c      	cmp	r4, r3
 80075be:	bf08      	it	eq
 80075c0:	68ec      	ldreq	r4, [r5, #12]
 80075c2:	e7e6      	b.n	8007592 <__swsetup_r+0x1e>
 80075c4:	0758      	lsls	r0, r3, #29
 80075c6:	d512      	bpl.n	80075ee <__swsetup_r+0x7a>
 80075c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ca:	b141      	cbz	r1, 80075de <__swsetup_r+0x6a>
 80075cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075d0:	4299      	cmp	r1, r3
 80075d2:	d002      	beq.n	80075da <__swsetup_r+0x66>
 80075d4:	4630      	mov	r0, r6
 80075d6:	f000 f99b 	bl	8007910 <_free_r>
 80075da:	2300      	movs	r3, #0
 80075dc:	6363      	str	r3, [r4, #52]	; 0x34
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	2300      	movs	r3, #0
 80075e8:	6063      	str	r3, [r4, #4]
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	f043 0308 	orr.w	r3, r3, #8
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	b94b      	cbnz	r3, 800760e <__swsetup_r+0x9a>
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007604:	d003      	beq.n	800760e <__swsetup_r+0x9a>
 8007606:	4621      	mov	r1, r4
 8007608:	4630      	mov	r0, r6
 800760a:	f000 f927 	bl	800785c <__smakebuf_r>
 800760e:	89a0      	ldrh	r0, [r4, #12]
 8007610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007614:	f010 0301 	ands.w	r3, r0, #1
 8007618:	d00a      	beq.n	8007630 <__swsetup_r+0xbc>
 800761a:	2300      	movs	r3, #0
 800761c:	60a3      	str	r3, [r4, #8]
 800761e:	6963      	ldr	r3, [r4, #20]
 8007620:	425b      	negs	r3, r3
 8007622:	61a3      	str	r3, [r4, #24]
 8007624:	6923      	ldr	r3, [r4, #16]
 8007626:	b943      	cbnz	r3, 800763a <__swsetup_r+0xc6>
 8007628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800762c:	d1ba      	bne.n	80075a4 <__swsetup_r+0x30>
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	0781      	lsls	r1, r0, #30
 8007632:	bf58      	it	pl
 8007634:	6963      	ldrpl	r3, [r4, #20]
 8007636:	60a3      	str	r3, [r4, #8]
 8007638:	e7f4      	b.n	8007624 <__swsetup_r+0xb0>
 800763a:	2000      	movs	r0, #0
 800763c:	e7f7      	b.n	800762e <__swsetup_r+0xba>
 800763e:	bf00      	nop
 8007640:	20000014 	.word	0x20000014
 8007644:	08007cbc 	.word	0x08007cbc
 8007648:	08007cdc 	.word	0x08007cdc
 800764c:	08007c9c 	.word	0x08007c9c

08007650 <_close_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	2300      	movs	r3, #0
 8007654:	4d05      	ldr	r5, [pc, #20]	; (800766c <_close_r+0x1c>)
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7f9 f911 	bl	8000882 <_close>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_close_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_close_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20003914 	.word	0x20003914

08007670 <__sflush_r>:
 8007670:	898a      	ldrh	r2, [r1, #12]
 8007672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007674:	4605      	mov	r5, r0
 8007676:	0710      	lsls	r0, r2, #28
 8007678:	460c      	mov	r4, r1
 800767a:	d457      	bmi.n	800772c <__sflush_r+0xbc>
 800767c:	684b      	ldr	r3, [r1, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	dc04      	bgt.n	800768c <__sflush_r+0x1c>
 8007682:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc01      	bgt.n	800768c <__sflush_r+0x1c>
 8007688:	2000      	movs	r0, #0
 800768a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800768c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800768e:	2e00      	cmp	r6, #0
 8007690:	d0fa      	beq.n	8007688 <__sflush_r+0x18>
 8007692:	2300      	movs	r3, #0
 8007694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007698:	682f      	ldr	r7, [r5, #0]
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	d032      	beq.n	8007704 <__sflush_r+0x94>
 800769e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	075a      	lsls	r2, r3, #29
 80076a4:	d505      	bpl.n	80076b2 <__sflush_r+0x42>
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	1ac0      	subs	r0, r0, r3
 80076aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076ac:	b10b      	cbz	r3, 80076b2 <__sflush_r+0x42>
 80076ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b0:	1ac0      	subs	r0, r0, r3
 80076b2:	2300      	movs	r3, #0
 80076b4:	4602      	mov	r2, r0
 80076b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076b8:	4628      	mov	r0, r5
 80076ba:	6a21      	ldr	r1, [r4, #32]
 80076bc:	47b0      	blx	r6
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	d106      	bne.n	80076d2 <__sflush_r+0x62>
 80076c4:	6829      	ldr	r1, [r5, #0]
 80076c6:	291d      	cmp	r1, #29
 80076c8:	d82c      	bhi.n	8007724 <__sflush_r+0xb4>
 80076ca:	4a29      	ldr	r2, [pc, #164]	; (8007770 <__sflush_r+0x100>)
 80076cc:	40ca      	lsrs	r2, r1
 80076ce:	07d6      	lsls	r6, r2, #31
 80076d0:	d528      	bpl.n	8007724 <__sflush_r+0xb4>
 80076d2:	2200      	movs	r2, #0
 80076d4:	6062      	str	r2, [r4, #4]
 80076d6:	6922      	ldr	r2, [r4, #16]
 80076d8:	04d9      	lsls	r1, r3, #19
 80076da:	6022      	str	r2, [r4, #0]
 80076dc:	d504      	bpl.n	80076e8 <__sflush_r+0x78>
 80076de:	1c42      	adds	r2, r0, #1
 80076e0:	d101      	bne.n	80076e6 <__sflush_r+0x76>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b903      	cbnz	r3, 80076e8 <__sflush_r+0x78>
 80076e6:	6560      	str	r0, [r4, #84]	; 0x54
 80076e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ea:	602f      	str	r7, [r5, #0]
 80076ec:	2900      	cmp	r1, #0
 80076ee:	d0cb      	beq.n	8007688 <__sflush_r+0x18>
 80076f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076f4:	4299      	cmp	r1, r3
 80076f6:	d002      	beq.n	80076fe <__sflush_r+0x8e>
 80076f8:	4628      	mov	r0, r5
 80076fa:	f000 f909 	bl	8007910 <_free_r>
 80076fe:	2000      	movs	r0, #0
 8007700:	6360      	str	r0, [r4, #52]	; 0x34
 8007702:	e7c2      	b.n	800768a <__sflush_r+0x1a>
 8007704:	6a21      	ldr	r1, [r4, #32]
 8007706:	2301      	movs	r3, #1
 8007708:	4628      	mov	r0, r5
 800770a:	47b0      	blx	r6
 800770c:	1c41      	adds	r1, r0, #1
 800770e:	d1c7      	bne.n	80076a0 <__sflush_r+0x30>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0c4      	beq.n	80076a0 <__sflush_r+0x30>
 8007716:	2b1d      	cmp	r3, #29
 8007718:	d001      	beq.n	800771e <__sflush_r+0xae>
 800771a:	2b16      	cmp	r3, #22
 800771c:	d101      	bne.n	8007722 <__sflush_r+0xb2>
 800771e:	602f      	str	r7, [r5, #0]
 8007720:	e7b2      	b.n	8007688 <__sflush_r+0x18>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007728:	81a3      	strh	r3, [r4, #12]
 800772a:	e7ae      	b.n	800768a <__sflush_r+0x1a>
 800772c:	690f      	ldr	r7, [r1, #16]
 800772e:	2f00      	cmp	r7, #0
 8007730:	d0aa      	beq.n	8007688 <__sflush_r+0x18>
 8007732:	0793      	lsls	r3, r2, #30
 8007734:	bf18      	it	ne
 8007736:	2300      	movne	r3, #0
 8007738:	680e      	ldr	r6, [r1, #0]
 800773a:	bf08      	it	eq
 800773c:	694b      	ldreq	r3, [r1, #20]
 800773e:	1bf6      	subs	r6, r6, r7
 8007740:	600f      	str	r7, [r1, #0]
 8007742:	608b      	str	r3, [r1, #8]
 8007744:	2e00      	cmp	r6, #0
 8007746:	dd9f      	ble.n	8007688 <__sflush_r+0x18>
 8007748:	4633      	mov	r3, r6
 800774a:	463a      	mov	r2, r7
 800774c:	4628      	mov	r0, r5
 800774e:	6a21      	ldr	r1, [r4, #32]
 8007750:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007754:	47e0      	blx	ip
 8007756:	2800      	cmp	r0, #0
 8007758:	dc06      	bgt.n	8007768 <__sflush_r+0xf8>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	f04f 30ff 	mov.w	r0, #4294967295
 8007760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e790      	b.n	800768a <__sflush_r+0x1a>
 8007768:	4407      	add	r7, r0
 800776a:	1a36      	subs	r6, r6, r0
 800776c:	e7ea      	b.n	8007744 <__sflush_r+0xd4>
 800776e:	bf00      	nop
 8007770:	20400001 	.word	0x20400001

08007774 <_fflush_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	690b      	ldr	r3, [r1, #16]
 8007778:	4605      	mov	r5, r0
 800777a:	460c      	mov	r4, r1
 800777c:	b913      	cbnz	r3, 8007784 <_fflush_r+0x10>
 800777e:	2500      	movs	r5, #0
 8007780:	4628      	mov	r0, r5
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	b118      	cbz	r0, 800778e <_fflush_r+0x1a>
 8007786:	6983      	ldr	r3, [r0, #24]
 8007788:	b90b      	cbnz	r3, 800778e <_fflush_r+0x1a>
 800778a:	f7ff fa19 	bl	8006bc0 <__sinit>
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <_fflush_r+0x6c>)
 8007790:	429c      	cmp	r4, r3
 8007792:	d11b      	bne.n	80077cc <_fflush_r+0x58>
 8007794:	686c      	ldr	r4, [r5, #4]
 8007796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0ef      	beq.n	800777e <_fflush_r+0xa>
 800779e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077a0:	07d0      	lsls	r0, r2, #31
 80077a2:	d404      	bmi.n	80077ae <_fflush_r+0x3a>
 80077a4:	0599      	lsls	r1, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_fflush_r+0x3a>
 80077a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077aa:	f7ff faa7 	bl	8006cfc <__retarget_lock_acquire_recursive>
 80077ae:	4628      	mov	r0, r5
 80077b0:	4621      	mov	r1, r4
 80077b2:	f7ff ff5d 	bl	8007670 <__sflush_r>
 80077b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077b8:	4605      	mov	r5, r0
 80077ba:	07da      	lsls	r2, r3, #31
 80077bc:	d4e0      	bmi.n	8007780 <_fflush_r+0xc>
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	059b      	lsls	r3, r3, #22
 80077c2:	d4dd      	bmi.n	8007780 <_fflush_r+0xc>
 80077c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077c6:	f7ff fa9a 	bl	8006cfe <__retarget_lock_release_recursive>
 80077ca:	e7d9      	b.n	8007780 <_fflush_r+0xc>
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <_fflush_r+0x70>)
 80077ce:	429c      	cmp	r4, r3
 80077d0:	d101      	bne.n	80077d6 <_fflush_r+0x62>
 80077d2:	68ac      	ldr	r4, [r5, #8]
 80077d4:	e7df      	b.n	8007796 <_fflush_r+0x22>
 80077d6:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <_fflush_r+0x74>)
 80077d8:	429c      	cmp	r4, r3
 80077da:	bf08      	it	eq
 80077dc:	68ec      	ldreq	r4, [r5, #12]
 80077de:	e7da      	b.n	8007796 <_fflush_r+0x22>
 80077e0:	08007cbc 	.word	0x08007cbc
 80077e4:	08007cdc 	.word	0x08007cdc
 80077e8:	08007c9c 	.word	0x08007c9c

080077ec <_lseek_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	2200      	movs	r2, #0
 80077f6:	4d05      	ldr	r5, [pc, #20]	; (800780c <_lseek_r+0x20>)
 80077f8:	602a      	str	r2, [r5, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	f7f9 f865 	bl	80008ca <_lseek>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_lseek_r+0x1e>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_lseek_r+0x1e>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20003914 	.word	0x20003914

08007810 <__swhatbuf_r>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	460e      	mov	r6, r1
 8007814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007818:	4614      	mov	r4, r2
 800781a:	2900      	cmp	r1, #0
 800781c:	461d      	mov	r5, r3
 800781e:	b096      	sub	sp, #88	; 0x58
 8007820:	da08      	bge.n	8007834 <__swhatbuf_r+0x24>
 8007822:	2200      	movs	r2, #0
 8007824:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	061a      	lsls	r2, r3, #24
 800782c:	d410      	bmi.n	8007850 <__swhatbuf_r+0x40>
 800782e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007832:	e00e      	b.n	8007852 <__swhatbuf_r+0x42>
 8007834:	466a      	mov	r2, sp
 8007836:	f000 f8c5 	bl	80079c4 <_fstat_r>
 800783a:	2800      	cmp	r0, #0
 800783c:	dbf1      	blt.n	8007822 <__swhatbuf_r+0x12>
 800783e:	9a01      	ldr	r2, [sp, #4]
 8007840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007848:	425a      	negs	r2, r3
 800784a:	415a      	adcs	r2, r3
 800784c:	602a      	str	r2, [r5, #0]
 800784e:	e7ee      	b.n	800782e <__swhatbuf_r+0x1e>
 8007850:	2340      	movs	r3, #64	; 0x40
 8007852:	2000      	movs	r0, #0
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	b016      	add	sp, #88	; 0x58
 8007858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800785c <__smakebuf_r>:
 800785c:	898b      	ldrh	r3, [r1, #12]
 800785e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007860:	079d      	lsls	r5, r3, #30
 8007862:	4606      	mov	r6, r0
 8007864:	460c      	mov	r4, r1
 8007866:	d507      	bpl.n	8007878 <__smakebuf_r+0x1c>
 8007868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	2301      	movs	r3, #1
 8007872:	6163      	str	r3, [r4, #20]
 8007874:	b002      	add	sp, #8
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	466a      	mov	r2, sp
 800787a:	ab01      	add	r3, sp, #4
 800787c:	f7ff ffc8 	bl	8007810 <__swhatbuf_r>
 8007880:	9900      	ldr	r1, [sp, #0]
 8007882:	4605      	mov	r5, r0
 8007884:	4630      	mov	r0, r6
 8007886:	f7ff fa5b 	bl	8006d40 <_malloc_r>
 800788a:	b948      	cbnz	r0, 80078a0 <__smakebuf_r+0x44>
 800788c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007890:	059a      	lsls	r2, r3, #22
 8007892:	d4ef      	bmi.n	8007874 <__smakebuf_r+0x18>
 8007894:	f023 0303 	bic.w	r3, r3, #3
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	e7e3      	b.n	8007868 <__smakebuf_r+0xc>
 80078a0:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <__smakebuf_r+0x7c>)
 80078a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	6020      	str	r0, [r4, #0]
 80078a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	9b00      	ldr	r3, [sp, #0]
 80078b0:	6120      	str	r0, [r4, #16]
 80078b2:	6163      	str	r3, [r4, #20]
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	b15b      	cbz	r3, 80078d0 <__smakebuf_r+0x74>
 80078b8:	4630      	mov	r0, r6
 80078ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078be:	f000 f893 	bl	80079e8 <_isatty_r>
 80078c2:	b128      	cbz	r0, 80078d0 <__smakebuf_r+0x74>
 80078c4:	89a3      	ldrh	r3, [r4, #12]
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	f043 0301 	orr.w	r3, r3, #1
 80078ce:	81a3      	strh	r3, [r4, #12]
 80078d0:	89a0      	ldrh	r0, [r4, #12]
 80078d2:	4305      	orrs	r5, r0
 80078d4:	81a5      	strh	r5, [r4, #12]
 80078d6:	e7cd      	b.n	8007874 <__smakebuf_r+0x18>
 80078d8:	08006b59 	.word	0x08006b59

080078dc <memchr>:
 80078dc:	4603      	mov	r3, r0
 80078de:	b510      	push	{r4, lr}
 80078e0:	b2c9      	uxtb	r1, r1
 80078e2:	4402      	add	r2, r0
 80078e4:	4293      	cmp	r3, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	d101      	bne.n	80078ee <memchr+0x12>
 80078ea:	2000      	movs	r0, #0
 80078ec:	e003      	b.n	80078f6 <memchr+0x1a>
 80078ee:	7804      	ldrb	r4, [r0, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	428c      	cmp	r4, r1
 80078f4:	d1f6      	bne.n	80078e4 <memchr+0x8>
 80078f6:	bd10      	pop	{r4, pc}

080078f8 <__malloc_lock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__malloc_lock+0x8>)
 80078fa:	f7ff b9ff 	b.w	8006cfc <__retarget_lock_acquire_recursive>
 80078fe:	bf00      	nop
 8007900:	20003908 	.word	0x20003908

08007904 <__malloc_unlock>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__malloc_unlock+0x8>)
 8007906:	f7ff b9fa 	b.w	8006cfe <__retarget_lock_release_recursive>
 800790a:	bf00      	nop
 800790c:	20003908 	.word	0x20003908

08007910 <_free_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4605      	mov	r5, r0
 8007914:	2900      	cmp	r1, #0
 8007916:	d040      	beq.n	800799a <_free_r+0x8a>
 8007918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791c:	1f0c      	subs	r4, r1, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfb8      	it	lt
 8007922:	18e4      	addlt	r4, r4, r3
 8007924:	f7ff ffe8 	bl	80078f8 <__malloc_lock>
 8007928:	4a1c      	ldr	r2, [pc, #112]	; (800799c <_free_r+0x8c>)
 800792a:	6813      	ldr	r3, [r2, #0]
 800792c:	b933      	cbnz	r3, 800793c <_free_r+0x2c>
 800792e:	6063      	str	r3, [r4, #4]
 8007930:	6014      	str	r4, [r2, #0]
 8007932:	4628      	mov	r0, r5
 8007934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007938:	f7ff bfe4 	b.w	8007904 <__malloc_unlock>
 800793c:	42a3      	cmp	r3, r4
 800793e:	d908      	bls.n	8007952 <_free_r+0x42>
 8007940:	6820      	ldr	r0, [r4, #0]
 8007942:	1821      	adds	r1, r4, r0
 8007944:	428b      	cmp	r3, r1
 8007946:	bf01      	itttt	eq
 8007948:	6819      	ldreq	r1, [r3, #0]
 800794a:	685b      	ldreq	r3, [r3, #4]
 800794c:	1809      	addeq	r1, r1, r0
 800794e:	6021      	streq	r1, [r4, #0]
 8007950:	e7ed      	b.n	800792e <_free_r+0x1e>
 8007952:	461a      	mov	r2, r3
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	b10b      	cbz	r3, 800795c <_free_r+0x4c>
 8007958:	42a3      	cmp	r3, r4
 800795a:	d9fa      	bls.n	8007952 <_free_r+0x42>
 800795c:	6811      	ldr	r1, [r2, #0]
 800795e:	1850      	adds	r0, r2, r1
 8007960:	42a0      	cmp	r0, r4
 8007962:	d10b      	bne.n	800797c <_free_r+0x6c>
 8007964:	6820      	ldr	r0, [r4, #0]
 8007966:	4401      	add	r1, r0
 8007968:	1850      	adds	r0, r2, r1
 800796a:	4283      	cmp	r3, r0
 800796c:	6011      	str	r1, [r2, #0]
 800796e:	d1e0      	bne.n	8007932 <_free_r+0x22>
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4401      	add	r1, r0
 8007976:	6011      	str	r1, [r2, #0]
 8007978:	6053      	str	r3, [r2, #4]
 800797a:	e7da      	b.n	8007932 <_free_r+0x22>
 800797c:	d902      	bls.n	8007984 <_free_r+0x74>
 800797e:	230c      	movs	r3, #12
 8007980:	602b      	str	r3, [r5, #0]
 8007982:	e7d6      	b.n	8007932 <_free_r+0x22>
 8007984:	6820      	ldr	r0, [r4, #0]
 8007986:	1821      	adds	r1, r4, r0
 8007988:	428b      	cmp	r3, r1
 800798a:	bf01      	itttt	eq
 800798c:	6819      	ldreq	r1, [r3, #0]
 800798e:	685b      	ldreq	r3, [r3, #4]
 8007990:	1809      	addeq	r1, r1, r0
 8007992:	6021      	streq	r1, [r4, #0]
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	6054      	str	r4, [r2, #4]
 8007998:	e7cb      	b.n	8007932 <_free_r+0x22>
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	2000390c 	.word	0x2000390c

080079a0 <_read_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	4611      	mov	r1, r2
 80079a8:	2200      	movs	r2, #0
 80079aa:	4d05      	ldr	r5, [pc, #20]	; (80079c0 <_read_r+0x20>)
 80079ac:	602a      	str	r2, [r5, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f7f8 ff4a 	bl	8000848 <_read>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_read_r+0x1e>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_read_r+0x1e>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20003914 	.word	0x20003914

080079c4 <_fstat_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	2300      	movs	r3, #0
 80079c8:	4d06      	ldr	r5, [pc, #24]	; (80079e4 <_fstat_r+0x20>)
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	4611      	mov	r1, r2
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	f7f8 ff61 	bl	8000898 <_fstat>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d102      	bne.n	80079e0 <_fstat_r+0x1c>
 80079da:	682b      	ldr	r3, [r5, #0]
 80079dc:	b103      	cbz	r3, 80079e0 <_fstat_r+0x1c>
 80079de:	6023      	str	r3, [r4, #0]
 80079e0:	bd38      	pop	{r3, r4, r5, pc}
 80079e2:	bf00      	nop
 80079e4:	20003914 	.word	0x20003914

080079e8 <_isatty_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	2300      	movs	r3, #0
 80079ec:	4d05      	ldr	r5, [pc, #20]	; (8007a04 <_isatty_r+0x1c>)
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	602b      	str	r3, [r5, #0]
 80079f4:	f7f8 ff5f 	bl	80008b6 <_isatty>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	d102      	bne.n	8007a02 <_isatty_r+0x1a>
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	b103      	cbz	r3, 8007a02 <_isatty_r+0x1a>
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	20003914 	.word	0x20003914

08007a08 <_init>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr

08007a14 <_fini>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr
